Welcome to the _white_gold_ documentation home page!
===

Basics
---

### 0. No title
Simplest application written in white_gold:
#{ code.call "sample/basics/step_0.rb" }
When library is loaded this way, window is shown on script end.

### 1. Hello world
Let's customize window title:
#{ code.call "sample/basics/step_1.rb" }
Methods with trailing '!' are quiet common in white_gold. Generally, they are used to change the state of the currently running object.

### 2. Button
Widgets are also created by methods with bang:
#{ code.call "sample/basics/step_2.rb" }
Several named arguments can be passed with the widget creating method call. They will be used as the new widget attributes.

### 3. Widget tree
To build widget tree, call widget creating methods inside associated block:
#{ code.call "sample/basics/step_3.rb" }
Providing an array as position attribute allows to set x and y coordinates individually. 
When rational is used as position argument, then it is interpreted as relative to the parent size.

### 4. Callbacks
In associated blocks attributes can be adapted, too:
#{ code.call "sample/basics/step_4.rb" }
`on_press!` can be called multiple times, every time new signal listener is attached. The block given as the argument is evaluated when the button is pressed.

### 5. Themes
Theme defines how widgets looks like. `theme!` method allows to set up global theme for all widgets, or custom one for particular object:
#{ code.call "sample/basics/step_5.rb" }

### 6. Custom widgets
List of base widgets with methods to create them can be found [here](./api). 
Custom widgets can be created by customizing and combining base widgets:
#{ code.call "sample/basics/step_6.rb" }
Notice, that bang methods are not defined in common way (`def! :hello_world` instead of `def hello_world!`).

DSL
---

### Building gui structure:<br>

see [extree](https://github.com/lpogic/extree) gem

### Widgets attributing:<br>

Almost every widget is created empty. Attribute setting is invoked on existing instance:

#{ code.call "sample/dsl/attributing/attr_1.rb" }

There are two other ways for setting attributes. First one uses extree methods:

#{ code.call "sample/dsl/attributing/attr_2.rb" }

Second one is passing attributes as named arguments:

#{ code.call "sample/dsl/attributing/attr_3.rb" }

All of 3 methods can be mixed of course:

#{ code.call "sample/dsl/attributing/attr_4.rb" }

### Method to proc conversion:<br>

see [procify](https://github.com/lpogic/procify) gem

API
---

Methods prefixed with `api_`, `abi_`, `self_`, `_abi_` belongs to the internal API and shouldn't be used directly.<br>
Generated API reference: [Widgets API](./api)
