require 'optparse'
require 'fileutils'
require_relative '../../tgui-abi-update.config'

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: tgui-update.rb [options]"

  opts.on("-c", "--compile", "Compile TGUI-ABI") do |v|
    options[:compile] = v
  end
end.parse!

if options[:compile]
  system BUILD_TGUI_ABI
else
  puts "Skipping TGUI-ABI compilation"
end

def script_path file
  File.expand_path(file, File.dirname($0))
end

loader_file = File.new(script_path("../lib/white_gold/generated/tgui-abi-loader.gf.rb"), "w")
loader_file.write <<~RUBY_
## File generated by tgui-update.rb
## Manual changes not recommended

module Tgui
  module Abi
RUBY_

## Parse header file

classes = {}
classes.default_proc = proc{|h, k| h[k] = []}
pointer_type = proc{ _1.end_with? "*" }
File.new(TGUI_CABI_HPP).each_line do |line|
  if lm = /^\s*C_ABI\s+(.+)(ABI_STATIC|ABI)_([[:alnum:]]*)_(\w+)(.*);/.match(line)
    parser = ""
    return_type = lm[1].strip
    case return_type
    when 'bool'
      return_type = 'int'
    when pointer_type
      return_type = "void*"
    end
    function_name = "#{lm[2]}_#{lm[3]}_#{lm[4]}"
    method_name = lm[4].gsub(/([A-Z])/, '_\1').downcase
    loader_file.write "    extern '#{return_type} #{function_name}#{lm[5]}'\n"
    case lm[2]
    when "ABI"
      if method_name == "new"
        classes[lm[3]] << "def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.#{function_name}(*a)); end"
      else
        classes[lm[3]] << "def _abi_#{method_name}(*a);    Abi.call_arg_map! a; Abi.#{function_name}(@pointer, *a)#{parser}; end"
      end
    when "ABI_STATIC"
      classes[lm[3]] << "def self._abi_#{method_name}(*a);    Abi.call_arg_map! a; Abi.#{function_name}(*a)#{parser}; end"
    end
  end
end

loader_file.write "  end\n"

classes.each do |c, ms|
  loader_file.write "\n  class #{c}"
  ms.each do |m|
    loader_file.write "\n    "
    loader_file.write m
  end
  loader_file.write "\n  end\n"
end

loader_file.write "end\n"
loader_file.close

## copy generated shared library
FileUtils.cp TGUI_COMPILED_BIN, TGUI_TARGET_BIN