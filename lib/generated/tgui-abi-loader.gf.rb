## File generated by tgui-update.rb
## Manual changes not recommended

class Tgui
  module Abi
    extern 'void ABI_Util_free(void* pointer)'
    extern 'void* ABI_Color_new(int r, int g, int b, int a)'
    extern 'int ABI_Color_get_red(Color* self)'
    extern 'int ABI_Color_get_green(Color* self)'
    extern 'int ABI_Color_get_blue(Color* self)'
    extern 'int ABI_Color_get_alpha(Color* self)'
    extern 'void* ABI_Color_fade(Color* self, float fade)'
    extern 'int ABI_Signal_connect(Signal* signal, void(*f)())'
    extern 'int ABI_Signal_disconnect(Signal* signal, int f)'
    extern 'void* ABI_Window_new()'
    extern 'void ABI_Window_close(sf::WindowBase* self)'
    extern 'int ABI_Window_isOpen(sf::WindowBase* self)'
    extern 'void* ABI_Gui_new(sf::RenderWindow* window)'
    extern 'int ABI_Gui_isActive(Gui* self)'
    extern 'void ABI_Gui_pollEvents(Gui* self)'
    extern 'void ABI_Gui_draw(Gui* self)'
    extern 'void ABI_Gui_add(Gui* self, Widget::Ptr* widget, const char* name)'
    extern 'void ABI_Gui_remove(Gui* self, Widget::Ptr* widget)'
    extern 'void ABI_Gui_removeAll(Gui* self)'
    extern 'void ABI_Gui_mainLoop(Gui* self)'
    extern 'void* ABI_Gui_getWidget(Gui* self, const char* name)'
    extern 'void ABI_Theme_setDefault(char* theme)'
    extern 'void ABI_Widget_free(std::shared_ptr<Widget>* pointer)'
    extern 'void* ABI_Widget_getType(Widget::Ptr* self)'
    extern 'void* ABI_Widget_getName(Widget::Ptr* self)'
    extern 'void ABI_Widget_setSize(Widget::Ptr* self, const char* width, const char* height)'
    extern 'void* ABI_Widget_getSize(Widget::Ptr* self)'
    extern 'void* ABI_Widget_getFullSize(Widget::Ptr* self)'
    extern 'void ABI_Widget_setPosition(Widget::Ptr* self, const char* x, const char* y)'
    extern 'void* ABI_Widget_getPosition(Widget::Ptr* self)'
    extern 'void* ABI_Widget_getAbsolutePosition(Widget::Ptr* self)'
    extern 'void ABI_Widget_setWidth(Widget::Ptr* self, const char* width)'
    extern 'void ABI_Widget_setHeight(Widget::Ptr* self, const char* height)'
    extern 'void ABI_Widget_setVisible(Widget::Ptr* self, int visible)'
    extern 'int ABI_Widget_isVisible(Widget::Ptr* self)'
    extern 'void ABI_Widget_setEnabled(Widget::Ptr* self, int enabled)'
    extern 'int ABI_Widget_isEnabled(Widget::Ptr* self)'
    extern 'void ABI_Widget_setFocused(Widget::Ptr* self, int focused)'
    extern 'int ABI_Widget_isFocused(Widget::Ptr* self)'
    extern 'void ABI_Widget_setFocusable(Widget::Ptr* self, int focusable)'
    extern 'int ABI_Widget_isFocusable(Widget::Ptr* self)'
    extern 'int ABI_Widget_canGainFocus(Widget::Ptr* self)'
    extern 'int ABI_Widget_isContainer(Widget::Ptr* self)'
    extern 'void* ABI_Widget_onPositionChange(Widget::Ptr* self)'
    extern 'void* ABI_Widget_onSizeChange(Widget::Ptr* self)'
    extern 'void* ABI_Widget_onFocus(Widget::Ptr* self)'
    extern 'void* ABI_Widget_onUnfocus(Widget::Ptr* self)'
    extern 'void* ABI_Widget_onMouseEnter(Widget::Ptr* self)'
    extern 'void* ABI_Widget_onMouseLeave(Widget::Ptr* self)'
    extern 'void* ABI_Widget_onShowEffectFinish(Widget::Ptr* self)'
    extern 'void* ABI_Widget_onAnimationFinish(Widget::Ptr* self)'
    extern 'void* ABI_ClickableWidget_onMousePress(ClickableWidget::Ptr* self)'
    extern 'void* ABI_ClickableWidget_onMouseRelease(ClickableWidget::Ptr* self)'
    extern 'void* ABI_ClickableWidget_onClick(ClickableWidget::Ptr* self)'
    extern 'void* ABI_ClickableWidget_onRightMousePress(ClickableWidget::Ptr* self)'
    extern 'void* ABI_ClickableWidget_onRightMouseRelease(ClickableWidget::Ptr* self)'
    extern 'void* ABI_ClickableWidget_onRightClick(ClickableWidget::Ptr* self)'
    extern 'void ABI_ButtonBase_setTextPosition(ButtonBase::Ptr* self, const char* position, const char* origin)'
    extern 'void* ABI_Button_new()'
    extern 'void ABI_Button_setText(Button::Ptr* self, const char* text)'
    extern 'void* ABI_Button_getText(Button::Ptr* self)'
    extern 'void* ABI_Button_onPress(Button::Ptr* self)'
    extern 'void* ABI_EditBox_new()'
    extern 'void ABI_EditBox_setText(EditBox::Ptr* self, const char* text)'
    extern 'void* ABI_EditBox_getText(EditBox::Ptr* self)'
    extern 'void ABI_EditBox_setDefaultText(EditBox::Ptr* self, const char* text)'
    extern 'void* ABI_EditBox_getDefaultText(EditBox::Ptr* self)'
    extern 'void ABI_EditBox_selectText(EditBox::Ptr* self, int start, int length)'
    extern 'void* ABI_EditBox_getSelectedText(EditBox::Ptr* self)'
    extern 'void ABI_EditBox_setPasswordCharacter(EditBox::Ptr* self, char* character)'
    extern 'char ABI_EditBox_getPasswordCharacter(EditBox::Ptr* self)'
    extern 'void ABI_EditBox_setMaximumCharacters(EditBox::Ptr* self, unsigned int max)'
    extern 'unsigned int ABI_EditBox_getMaximumCharacters(EditBox::Ptr* self)'
    extern 'void ABI_EditBox_setAlignment(EditBox::Ptr* self, int alignment)'
    extern 'int ABI_EditBox_getAlignment(EditBox::Ptr* self)'
    extern 'void ABI_EditBox_limitTextWidth(EditBox::Ptr* self, int limit)'
    extern 'int ABI_EditBox_isTextWidthLimited(EditBox::Ptr* self)'
    extern 'void ABI_EditBox_setReadOnly(EditBox::Ptr* self, int read_only)'
    extern 'int ABI_EditBox_isReadOnly(EditBox::Ptr* self)'
    extern 'void ABI_EditBox_setCaretPosition(EditBox::Ptr* self, int caretPosition)'
    extern 'int ABI_EditBox_getCaretPosition(EditBox::Ptr* self)'
    extern 'void ABI_EditBox_setSuffix(EditBox::Ptr* self, char* suffix)'
    extern 'void* ABI_EditBox_getSuffix(EditBox::Ptr* self)'
    extern 'void* ABI_EditBox_onTextChange(EditBox::Ptr* self)'
    extern 'void* ABI_EditBox_onReturnKeyPress(EditBox::Ptr* self)'
    extern 'void* ABI_EditBox_onReturnOrUnfocus(EditBox::Ptr* self)'
    extern 'void* ABI_Label_new(char* text)'
    extern 'void ABI_Label_setText(Label::Ptr* self, char* text)'
    extern 'void* ABI_Label_getText(Label::Ptr* self)'
    extern 'void ABI_Label_setHorizontalAlignment(Label::Ptr* self, int alignment)'
    extern 'int ABI_Label_getHorizontalAlignment(Label::Ptr* self)'
    extern 'void ABI_Label_setVerticalAlignment(Label::Ptr* self, int alignment)'
    extern 'int ABI_Label_getVerticalAlignment(Label::Ptr* self)'
    extern 'void ABI_Label_setScrollbarPolicy(Label::Ptr* self, int policy)'
    extern 'int ABI_Label_getScrollbarPolicy(Label::Ptr* self)'
    extern 'void ABI_Label_setScrollbarValue(Label::Ptr* self, unsigned int value)'
    extern 'int ABI_Label_getScrollbarValue(Label::Ptr* self)'
    extern 'void ABI_Label_setAutoSize(Label::Ptr* self, int auto_size)'
    extern 'int ABI_Label_getAutoSize(Label::Ptr* self)'
    extern 'void ABI_Label_setMaximumTextWidth(Label::Ptr* self, float maximumWidth)'
    extern 'float ABI_Label_getMaximumTextWidth(Label::Ptr* self)'
    extern 'void ABI_Label_ignoreMouseEvents(Label::Ptr* self, int ignore)'
    extern 'int ABI_Label_ignoringMouseEvents(Label::Ptr* self)'
    extern 'void* ABI_RadioButton_new()'
    extern 'void ABI_RadioButton_setText(RadioButton::Ptr* self, char* text)'
    extern 'void* ABI_RadioButton_getText(RadioButton::Ptr* self)'
    extern 'void ABI_RadioButton_setChecked(RadioButton::Ptr* self, int checked)'
    extern 'int ABI_RadioButton_isChecked(RadioButton::Ptr* self)'
    extern 'void ABI_RadioButton_setTextClickable(RadioButton::Ptr* self, int textClickable)'
    extern 'int ABI_RadioButton_isTextClickable(RadioButton::Ptr* self)'
    extern 'void* ABI_RadioButton_onCheck(RadioButton::Ptr* self)'
    extern 'void* ABI_RadioButton_onUncheck(RadioButton::Ptr* self)'
    extern 'void* ABI_RadioButton_onChange(RadioButton::Ptr* self)'
    extern 'void* ABI_CheckBox_new()'
    extern 'void ABI_Container_add(Container::Ptr* self, Widget::Ptr* widget, char* name)'
    extern 'void* ABI_Container_get(Container::Ptr* self, char* name)'
    extern 'int ABI_Container_remove(Container::Ptr* self, Widget::Ptr* widget)'
    extern 'void ABI_Container_removeAllWidgets(Container::Ptr* self)'
    extern 'void* ABI_Container_getInnerSize(Container::Ptr* self)'
    extern 'void* ABI_Container_getChildWidgetsOffset(Container::Ptr* self)'
    extern 'void ABI_Container_moveWidgetToFront(Container::Ptr* self, Widget::Ptr* widget)'
    extern 'void ABI_Container_moveWidgetToBack(Container::Ptr* self, Widget::Ptr* widget)'
    extern 'int ABI_Container_moveWidgetForward(Container::Ptr* self, Widget::Ptr* widget)'
    extern 'int ABI_Container_moveWidgetBackward(Container::Ptr* self, Widget::Ptr* widget)'
    extern 'int ABI_Container_setWidgetIndex(Container::Ptr* self, Widget::Ptr* widget, int index)'
    extern 'int ABI_Container_getWidgetIndex(Container::Ptr* self, Widget::Ptr* widget)'
    extern 'void* ABI_Container_getFocusedChild(Container::Ptr* self)'
    extern 'void* ABI_Container_getFocusedLeaf(Container::Ptr* self)'
    extern 'void* ABI_Container_getWidgetAtPosition(Container::Ptr* self, float x, float y)'
    extern 'int ABI_Container_focusNextWidget(Container::Ptr* self, int recursive)'
    extern 'int ABI_Container_focusPreviousWidget(Container::Ptr* self, int recursive)'
    extern 'void ABI_Container_setFocused(Container::Ptr* self, int focused)'
    extern 'void* ABI_ChildWindow_new()'
    extern 'void ABI_ChildWindow_setClientSize(ChildWindow::Ptr* self, char* size)'
    extern 'void* ABI_ChildWindow_getClientSize(ChildWindow::Ptr* self)'
    extern 'void ABI_ChildWindow_setMaximumSize(ChildWindow::Ptr* self, float x, float y)'
    extern 'void* ABI_ChildWindow_getMaximumSize(ChildWindow::Ptr* self)'
    extern 'void ABI_ChildWindow_setMinimumSize(ChildWindow::Ptr* self, float x, float y)'
    extern 'void* ABI_ChildWindow_getMinimumSize(ChildWindow::Ptr* self)'
    extern 'void ABI_ChildWindow_setTitle(ChildWindow::Ptr* self, char* title)'
    extern 'void* ABI_ChildWindow_getTitle(ChildWindow::Ptr* self)'
    extern 'void ABI_ChildWindow_setTitleTextSize(ChildWindow::Ptr* self, unsigned int size)'
    extern 'unsigned int ABI_ChildWindow_getTitleTextSize(ChildWindow::Ptr* self)'
    extern 'void ABI_ChildWindow_setTitleAlignment(ChildWindow::Ptr* self, int alignment)'
    extern 'int ABI_ChildWindow_getTitleAlignment(ChildWindow::Ptr* self)'
    extern 'void ABI_ChildWindow_setTitleButtons(ChildWindow::Ptr* self, unsigned int buttons)'
    extern 'unsigned int ABI_ChildWindow_getTitleButtons(ChildWindow::Ptr* self)'
    extern 'void ABI_ChildWindow_close(ChildWindow::Ptr* self)'
    extern 'void ABI_ChildWindow_destroy(ChildWindow::Ptr* self)'
    extern 'void ABI_ChildWindow_setResizable(ChildWindow::Ptr* self, int resizable)'
    extern 'int ABI_ChildWindow_isResizable(ChildWindow::Ptr* self)'
    extern 'void ABI_ChildWindow_setPositionLocked(ChildWindow::Ptr* self, int positionLocked)'
    extern 'int ABI_ChildWindow_isPositionLocked(ChildWindow::Ptr* self)'
    extern 'void ABI_ChildWindow_setKeepInParent(ChildWindow::Ptr* self, int enabled)'
    extern 'int ABI_ChildWindow_isKeptInParent(ChildWindow::Ptr* self)'
    extern 'void* ABI_ChildWindow_onMousePress(ChildWindow::Ptr* self)'
    extern 'void* ABI_ChildWindow_onClose(ChildWindow::Ptr* self)'
    extern 'void* ABI_ChildWindow_onMinimize(ChildWindow::Ptr* self)'
    extern 'void* ABI_ChildWindow_onMaximize(ChildWindow::Ptr* self)'
    extern 'void* ABI_ChildWindow_onEscapeKeyPress(ChildWindow::Ptr* self)'
    extern 'void* ABI_Group_new()'
    extern 'void* ABI_ColorPicker_new()'
    extern 'void ABI_ColorPicker_setColor(ColorPicker::Ptr* self, Color* color)'
    extern 'void* ABI_ColorPicker_getColor(ColorPicker::Ptr* self)'
    extern 'void* ABI_ColorPicker_onColorChange(ColorPicker::Ptr* self)'
    extern 'void* ABI_ColorPicker_onOkPress(ColorPicker::Ptr* self)'
  end

  class Util
    def self.free(*a);    Abi.call_arg_map! a; Abi.ABI_Util_free(*a); end
  end

  class Color
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_Color_new(*a)); end
    def red(*a);    Abi.call_arg_map! a; Abi.ABI_Color_get_red(@pointer, *a); end
    def green(*a);    Abi.call_arg_map! a; Abi.ABI_Color_get_green(@pointer, *a); end
    def blue(*a);    Abi.call_arg_map! a; Abi.ABI_Color_get_blue(@pointer, *a); end
    def alpha(*a);    Abi.call_arg_map! a; Abi.ABI_Color_get_alpha(@pointer, *a); end
    def fade(*a, &b);    Abi.call_arg_map! a; Abi.ABI_Color_fade(@pointer, *a).parse('Color'); end
  end

  class Signal
    module Private; def self.connect(*a);    Abi.call_arg_map! a; Abi.ABI_Signal_connect(*a); end; end
    module Private; def self.disconnect(*a);    Abi.call_arg_map! a; Abi.ABI_Signal_disconnect(*a).odd?; end; end
  end

  class Window
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_Window_new(*a)); end
    def close(*a, &b);    Abi.call_arg_map! a; Abi.ABI_Window_close(@pointer, *a); end
    def open?(*a);    Abi.call_arg_map! a; Abi.ABI_Window_isOpen(@pointer, *a).odd?; end
  end

  class Gui
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_Gui_new(*a)); end
    def active?(*a);    Abi.call_arg_map! a; Abi.ABI_Gui_isActive(@pointer, *a).odd?; end
    def poll_events(*a, &b);    Abi.call_arg_map! a; Abi.ABI_Gui_pollEvents(@pointer, *a); end
    def draw(*a, &b);    Abi.call_arg_map! a; Abi.ABI_Gui_draw(@pointer, *a); end
    def add(*a, &b);    Abi.call_arg_map! a; Abi.ABI_Gui_add(@pointer, *a); end
    def remove(*a, &b);    Abi.call_arg_map! a; Abi.ABI_Gui_remove(@pointer, *a); end
    def remove_all(*a, &b);    Abi.call_arg_map! a; Abi.ABI_Gui_removeAll(@pointer, *a); end
    def main_loop(*a, &b);    Abi.call_arg_map! a; Abi.ABI_Gui_mainLoop(@pointer, *a); end
    module Private; def self.get_widget(*a);    Abi.call_arg_map! a; Abi.ABI_Gui_getWidget(*a).parse('Widget::Ptr'); end; end
  end

  class Theme
    def self.set_default(*a);    Abi.call_arg_map! a; Abi.ABI_Theme_setDefault(*a); end
  end

  class Widget
    def self.finalizer(pointer);    proc{ Abi.ABI_Widget_free(pointer) }; end
    def self.get_type(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_getType(*a).parse('char32_t'); end
    def name(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_getName(@pointer, *a).parse('char32_t'); end
    def size=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_Widget_setSize(@pointer, *a); end
    def size(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_getSize(@pointer, *a).parse('Vector2f'); end
    def full_size(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_getFullSize(@pointer, *a).parse('Vector2f'); end
    def position=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_Widget_setPosition(@pointer, *a); end
    def position(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_getPosition(@pointer, *a).parse('Vector2f'); end
    def absolute_position(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_getAbsolutePosition(@pointer, *a).parse('Vector2f'); end
    def width=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_Widget_setWidth(@pointer, *a); end
    def height=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_Widget_setHeight(@pointer, *a); end
    def visible=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_Widget_setVisible(@pointer, *a); end
    def visible?(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_isVisible(@pointer, *a).odd?; end
    def enabled=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_Widget_setEnabled(@pointer, *a); end
    def enabled?(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_isEnabled(@pointer, *a).odd?; end
    def focused=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_Widget_setFocused(@pointer, *a); end
    def focused?(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_isFocused(@pointer, *a).odd?; end
    def focusable=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_Widget_setFocusable(@pointer, *a); end
    def focusable?(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_isFocusable(@pointer, *a).odd?; end
    def can_gain_focus?(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_canGainFocus(@pointer, *a).odd?; end
    def container?(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_isContainer(@pointer, *a).odd?; end
    def on_position_change(*a, &b);   Abi.call_arg_map! a; signal = Signal.new pointer: Abi.ABI_Widget_onPositionChange(@pointer, *a), autofree: false; block_given? ? signal.connect(&b) : signal; end
    def on_position_change=(a);    signal = Signal.new pointer: Abi.ABI_Widget_onPositionChange(@pointer), autofree: false; signal.connect(&a); end
    def on_size_change(*a, &b);   Abi.call_arg_map! a; signal = Signal.new pointer: Abi.ABI_Widget_onSizeChange(@pointer, *a), autofree: false; block_given? ? signal.connect(&b) : signal; end
    def on_size_change=(a);    signal = Signal.new pointer: Abi.ABI_Widget_onSizeChange(@pointer), autofree: false; signal.connect(&a); end
    def on_focus(*a, &b);   Abi.call_arg_map! a; signal = Signal.new pointer: Abi.ABI_Widget_onFocus(@pointer, *a), autofree: false; block_given? ? signal.connect(&b) : signal; end
    def on_focus=(a);    signal = Signal.new pointer: Abi.ABI_Widget_onFocus(@pointer), autofree: false; signal.connect(&a); end
    def on_unfocus(*a, &b);   Abi.call_arg_map! a; signal = Signal.new pointer: Abi.ABI_Widget_onUnfocus(@pointer, *a), autofree: false; block_given? ? signal.connect(&b) : signal; end
    def on_unfocus=(a);    signal = Signal.new pointer: Abi.ABI_Widget_onUnfocus(@pointer), autofree: false; signal.connect(&a); end
    def on_mouse_enter(*a, &b);   Abi.call_arg_map! a; signal = Signal.new pointer: Abi.ABI_Widget_onMouseEnter(@pointer, *a), autofree: false; block_given? ? signal.connect(&b) : signal; end
    def on_mouse_enter=(a);    signal = Signal.new pointer: Abi.ABI_Widget_onMouseEnter(@pointer), autofree: false; signal.connect(&a); end
    def on_mouse_leave(*a, &b);   Abi.call_arg_map! a; signal = Signal.new pointer: Abi.ABI_Widget_onMouseLeave(@pointer, *a), autofree: false; block_given? ? signal.connect(&b) : signal; end
    def on_mouse_leave=(a);    signal = Signal.new pointer: Abi.ABI_Widget_onMouseLeave(@pointer), autofree: false; signal.connect(&a); end
    def on_show_effect_finish(*a, &b);   Abi.call_arg_map! a; signal = Signal.new pointer: Abi.ABI_Widget_onShowEffectFinish(@pointer, *a), autofree: false; block_given? ? signal.connect(&b) : signal; end
    def on_show_effect_finish=(a);    signal = Signal.new pointer: Abi.ABI_Widget_onShowEffectFinish(@pointer), autofree: false; signal.connect(&a); end
    def on_animation_finish(*a, &b);   Abi.call_arg_map! a; signal = Signal.new pointer: Abi.ABI_Widget_onAnimationFinish(@pointer, *a), autofree: false; block_given? ? signal.connect(&b) : signal; end
    def on_animation_finish=(a);    signal = Signal.new pointer: Abi.ABI_Widget_onAnimationFinish(@pointer), autofree: false; signal.connect(&a); end
  end

  class ClickableWidget
    def on_mouse_press(*a, &b);   Abi.call_arg_map! a; signal = Signal.new pointer: Abi.ABI_ClickableWidget_onMousePress(@pointer, *a), autofree: false; block_given? ? signal.connect(&b) : signal; end
    def on_mouse_press=(a);    signal = Signal.new pointer: Abi.ABI_ClickableWidget_onMousePress(@pointer), autofree: false; signal.connect(&a); end
    def on_mouse_release(*a, &b);   Abi.call_arg_map! a; signal = Signal.new pointer: Abi.ABI_ClickableWidget_onMouseRelease(@pointer, *a), autofree: false; block_given? ? signal.connect(&b) : signal; end
    def on_mouse_release=(a);    signal = Signal.new pointer: Abi.ABI_ClickableWidget_onMouseRelease(@pointer), autofree: false; signal.connect(&a); end
    def on_click(*a, &b);   Abi.call_arg_map! a; signal = Signal.new pointer: Abi.ABI_ClickableWidget_onClick(@pointer, *a), autofree: false; block_given? ? signal.connect(&b) : signal; end
    def on_click=(a);    signal = Signal.new pointer: Abi.ABI_ClickableWidget_onClick(@pointer), autofree: false; signal.connect(&a); end
    def on_right_mouse_press(*a, &b);   Abi.call_arg_map! a; signal = Signal.new pointer: Abi.ABI_ClickableWidget_onRightMousePress(@pointer, *a), autofree: false; block_given? ? signal.connect(&b) : signal; end
    def on_right_mouse_press=(a);    signal = Signal.new pointer: Abi.ABI_ClickableWidget_onRightMousePress(@pointer), autofree: false; signal.connect(&a); end
    def on_right_mouse_release(*a, &b);   Abi.call_arg_map! a; signal = Signal.new pointer: Abi.ABI_ClickableWidget_onRightMouseRelease(@pointer, *a), autofree: false; block_given? ? signal.connect(&b) : signal; end
    def on_right_mouse_release=(a);    signal = Signal.new pointer: Abi.ABI_ClickableWidget_onRightMouseRelease(@pointer), autofree: false; signal.connect(&a); end
    def on_right_click(*a, &b);   Abi.call_arg_map! a; signal = Signal.new pointer: Abi.ABI_ClickableWidget_onRightClick(@pointer, *a), autofree: false; block_given? ? signal.connect(&b) : signal; end
    def on_right_click=(a);    signal = Signal.new pointer: Abi.ABI_ClickableWidget_onRightClick(@pointer), autofree: false; signal.connect(&a); end
  end

  class ButtonBase
    module Private; def self.set_text_position(*a);    Abi.call_arg_map! a; Abi.ABI_ButtonBase_setTextPosition(*a); end; end
  end

  class Button
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_Button_new(*a)); end
    def text=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_Button_setText(@pointer, *a); end
    def text(*a);    Abi.call_arg_map! a; Abi.ABI_Button_getText(@pointer, *a).parse('char32_t'); end
    def on_press(*a, &b);   Abi.call_arg_map! a; signal = Signal.new pointer: Abi.ABI_Button_onPress(@pointer, *a), autofree: false; block_given? ? signal.connect(&b) : signal; end
    def on_press=(a);    signal = Signal.new pointer: Abi.ABI_Button_onPress(@pointer), autofree: false; signal.connect(&a); end
  end

  class EditBox
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_EditBox_new(*a)); end
    def text=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_EditBox_setText(@pointer, *a); end
    def text(*a);    Abi.call_arg_map! a; Abi.ABI_EditBox_getText(@pointer, *a).parse('char32_t'); end
    def default_text=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_EditBox_setDefaultText(@pointer, *a); end
    def default_text(*a);    Abi.call_arg_map! a; Abi.ABI_EditBox_getDefaultText(@pointer, *a).parse('char32_t'); end
    def select_text(*a, &b);    Abi.call_arg_map! a; Abi.ABI_EditBox_selectText(@pointer, *a); end
    def selected_text(*a);    Abi.call_arg_map! a; Abi.ABI_EditBox_getSelectedText(@pointer, *a).parse('char32_t'); end
    def password_character=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_EditBox_setPasswordCharacter(@pointer, *a); end
    def password_character(*a);    Abi.call_arg_map! a; Abi.ABI_EditBox_getPasswordCharacter(@pointer, *a).chr; end
    def maximum_characters=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_EditBox_setMaximumCharacters(@pointer, *a); end
    def maximum_characters(*a);    Abi.call_arg_map! a; Abi.ABI_EditBox_getMaximumCharacters(@pointer, *a); end
    module Private; def self.set_alignment(*a);    Abi.call_arg_map! a; Abi.ABI_EditBox_setAlignment(*a); end; end
    module Private; def self.get_alignment(*a);    Abi.call_arg_map! a; Abi.ABI_EditBox_getAlignment(*a); end; end
    def limit_text_width=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_EditBox_limitTextWidth(@pointer, *a); end
    def text_width_limited?(*a);    Abi.call_arg_map! a; Abi.ABI_EditBox_isTextWidthLimited(@pointer, *a).odd?; end
    def read_only=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_EditBox_setReadOnly(@pointer, *a); end
    def read_only?(*a);    Abi.call_arg_map! a; Abi.ABI_EditBox_isReadOnly(@pointer, *a).odd?; end
    def caret_position=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_EditBox_setCaretPosition(@pointer, *a); end
    def caret_position(*a);    Abi.call_arg_map! a; Abi.ABI_EditBox_getCaretPosition(@pointer, *a); end
    def suffix=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_EditBox_setSuffix(@pointer, *a); end
    def suffix(*a);    Abi.call_arg_map! a; Abi.ABI_EditBox_getSuffix(@pointer, *a).parse('char32_t'); end
    def on_text_change(*a, &b);   Abi.call_arg_map! a; signal = Signal.new pointer: Abi.ABI_EditBox_onTextChange(@pointer, *a), autofree: false; block_given? ? signal.connect(&b) : signal; end
    def on_text_change=(a);    signal = Signal.new pointer: Abi.ABI_EditBox_onTextChange(@pointer), autofree: false; signal.connect(&a); end
    def on_return_key_press(*a, &b);   Abi.call_arg_map! a; signal = Signal.new pointer: Abi.ABI_EditBox_onReturnKeyPress(@pointer, *a), autofree: false; block_given? ? signal.connect(&b) : signal; end
    def on_return_key_press=(a);    signal = Signal.new pointer: Abi.ABI_EditBox_onReturnKeyPress(@pointer), autofree: false; signal.connect(&a); end
    def on_return_or_unfocus(*a, &b);   Abi.call_arg_map! a; signal = Signal.new pointer: Abi.ABI_EditBox_onReturnOrUnfocus(@pointer, *a), autofree: false; block_given? ? signal.connect(&b) : signal; end
    def on_return_or_unfocus=(a);    signal = Signal.new pointer: Abi.ABI_EditBox_onReturnOrUnfocus(@pointer), autofree: false; signal.connect(&a); end
  end

  class Label
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_Label_new(*a)); end
    def text=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_Label_setText(@pointer, *a); end
    def text(*a);    Abi.call_arg_map! a; Abi.ABI_Label_getText(@pointer, *a).parse('char32_t'); end
    module Private; def self.set_horizontal_alignment(*a);    Abi.call_arg_map! a; Abi.ABI_Label_setHorizontalAlignment(*a); end; end
    module Private; def self.get_horizontal_alignment(*a);    Abi.call_arg_map! a; Abi.ABI_Label_getHorizontalAlignment(*a); end; end
    module Private; def self.set_vertical_alignment(*a);    Abi.call_arg_map! a; Abi.ABI_Label_setVerticalAlignment(*a); end; end
    module Private; def self.get_vertical_alignment(*a);    Abi.call_arg_map! a; Abi.ABI_Label_getVerticalAlignment(*a); end; end
    module Private; def self.set_scrollbar_policy(*a);    Abi.call_arg_map! a; Abi.ABI_Label_setScrollbarPolicy(*a); end; end
    module Private; def self.get_scrollbar_policy(*a);    Abi.call_arg_map! a; Abi.ABI_Label_getScrollbarPolicy(*a); end; end
    def scrollbar_value=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_Label_setScrollbarValue(@pointer, *a); end
    def scrollbar_value(*a);    Abi.call_arg_map! a; Abi.ABI_Label_getScrollbarValue(@pointer, *a); end
    def auto_size=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_Label_setAutoSize(@pointer, *a); end
    def auto_size(*a);    Abi.call_arg_map! a; Abi.ABI_Label_getAutoSize(@pointer, *a).odd?; end
    def maximum_text_width=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_Label_setMaximumTextWidth(@pointer, *a); end
    def maximum_text_width(*a);    Abi.call_arg_map! a; Abi.ABI_Label_getMaximumTextWidth(@pointer, *a); end
    def ignore_mouse_events=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_Label_ignoreMouseEvents(@pointer, *a); end
    def ignoring_mouse_events?(*a);    Abi.call_arg_map! a; Abi.ABI_Label_ignoringMouseEvents(@pointer, *a).odd?; end
  end

  class RadioButton
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_RadioButton_new(*a)); end
    def text=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_RadioButton_setText(@pointer, *a); end
    def text(*a);    Abi.call_arg_map! a; Abi.ABI_RadioButton_getText(@pointer, *a).parse('char32_t'); end
    def checked=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_RadioButton_setChecked(@pointer, *a); end
    def checked?(*a);    Abi.call_arg_map! a; Abi.ABI_RadioButton_isChecked(@pointer, *a).odd?; end
    def text_clickable=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_RadioButton_setTextClickable(@pointer, *a); end
    def text_clickable?(*a);    Abi.call_arg_map! a; Abi.ABI_RadioButton_isTextClickable(@pointer, *a).odd?; end
    def on_check(*a, &b);    Abi.call_arg_map! a; Abi.ABI_RadioButton_onCheck(@pointer, *a).parse('Signal'); end
    def on_uncheck(*a, &b);    Abi.call_arg_map! a; Abi.ABI_RadioButton_onUncheck(@pointer, *a).parse('Signal'); end
    def on_change(*a, &b);    Abi.call_arg_map! a; Abi.ABI_RadioButton_onChange(@pointer, *a).parse('Signal'); end
  end

  class CheckBox
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_CheckBox_new(*a)); end
  end

  class Container
    def add(*a, &b);    Abi.call_arg_map! a; Abi.ABI_Container_add(@pointer, *a); end
    module Private; def self.get(*a);    Abi.call_arg_map! a; Abi.ABI_Container_get(*a).parse('Widget::Ptr'); end; end
    def remove(*a, &b);    Abi.call_arg_map! a; Abi.ABI_Container_remove(@pointer, *a).odd?; end
    def remove_all_widgets(*a, &b);    Abi.call_arg_map! a; Abi.ABI_Container_removeAllWidgets(@pointer, *a); end
    def inner_size(*a);    Abi.call_arg_map! a; Abi.ABI_Container_getInnerSize(@pointer, *a).parse('Vector2f'); end
    def child_widgets_offset(*a);    Abi.call_arg_map! a; Abi.ABI_Container_getChildWidgetsOffset(@pointer, *a).parse('Vector2f'); end
    def move_widget_to_front(*a, &b);    Abi.call_arg_map! a; Abi.ABI_Container_moveWidgetToFront(@pointer, *a); end
    def move_widget_to_back(*a, &b);    Abi.call_arg_map! a; Abi.ABI_Container_moveWidgetToBack(@pointer, *a); end
    def move_widget_forward(*a, &b);    Abi.call_arg_map! a; Abi.ABI_Container_moveWidgetForward(@pointer, *a); end
    def move_widget_backward(*a, &b);    Abi.call_arg_map! a; Abi.ABI_Container_moveWidgetBackward(@pointer, *a); end
    def widget_index=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_Container_setWidgetIndex(@pointer, *a).odd?; end
    def widget_index(*a);    Abi.call_arg_map! a; Abi.ABI_Container_getWidgetIndex(@pointer, *a); end
    def focused_child(*a);    Abi.call_arg_map! a; Abi.ABI_Container_getFocusedChild(@pointer, *a).parse('Widget::Ptr'); end
    def focused_leaf(*a);    Abi.call_arg_map! a; Abi.ABI_Container_getFocusedLeaf(@pointer, *a).parse('Widget::Ptr'); end
    def widget_at_position(*a);    Abi.call_arg_map! a; Abi.ABI_Container_getWidgetAtPosition(@pointer, *a).parse('Widget::Ptr'); end
    def focus_next_widget(*a, &b);    Abi.call_arg_map! a; Abi.ABI_Container_focusNextWidget(@pointer, *a).odd?; end
    def focus_previous_widget(*a, &b);    Abi.call_arg_map! a; Abi.ABI_Container_focusPreviousWidget(@pointer, *a).odd?; end
    def focused=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_Container_setFocused(@pointer, *a); end
  end

  class ChildWindow
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_ChildWindow_new(*a)); end
    def client_size=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ChildWindow_setClientSize(@pointer, *a); end
    def client_size(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_getClientSize(@pointer, *a).parse('Vector2f'); end
    def maximum_size=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ChildWindow_setMaximumSize(@pointer, *a); end
    def maximum_size(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_getMaximumSize(@pointer, *a).parse('Vector2f'); end
    def minimum_size=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ChildWindow_setMinimumSize(@pointer, *a); end
    def minimum_size(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_getMinimumSize(@pointer, *a).parse('Vector2f'); end
    def title=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ChildWindow_setTitle(@pointer, *a); end
    def title(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_getTitle(@pointer, *a).parse('char32_t'); end
    def title_text_size=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ChildWindow_setTitleTextSize(@pointer, *a); end
    def title_text_size(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_getTitleTextSize(@pointer, *a); end
    module Private; def self.set_title_alignment(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_setTitleAlignment(*a); end; end
    module Private; def self.get_title_alignment(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_getTitleAlignment(*a); end; end
    module Private; def self.set_title_buttons(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_setTitleButtons(*a); end; end
    module Private; def self.get_title_buttons(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_getTitleButtons(*a); end; end
    def close(*a, &b);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_close(@pointer, *a); end
    def destroy(*a, &b);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_destroy(@pointer, *a); end
    def resizable=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ChildWindow_setResizable(@pointer, *a); end
    def resizable?(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_isResizable(@pointer, *a).odd?; end
    def position_locked=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ChildWindow_setPositionLocked(@pointer, *a); end
    def position_locked?(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_isPositionLocked(@pointer, *a).odd?; end
    def keep_in_parent=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ChildWindow_setKeepInParent(@pointer, *a); end
    def kept_in_parent?(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_isKeptInParent(@pointer, *a).odd?; end
    def on_mouse_press(*a, &b);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_onMousePress(@pointer, *a).parse('Signal'); end
    def on_close(*a, &b);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_onClose(@pointer, *a).parse('Signal'); end
    def on_minimize(*a, &b);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_onMinimize(@pointer, *a).parse('Signal'); end
    def on_maximize(*a, &b);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_onMaximize(@pointer, *a).parse('Signal'); end
    def on_escape_key_press(*a, &b);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_onEscapeKeyPress(@pointer, *a).parse('Signal'); end
  end

  class Group
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_Group_new(*a)); end
  end

  class ColorPicker
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_ColorPicker_new(*a)); end
    def color=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ColorPicker_setColor(@pointer, *a); end
    def color(*a);    Abi.call_arg_map! a; Abi.ABI_ColorPicker_getColor(@pointer, *a).parse('Color'); end
    def on_color_change(*a, &b);   Abi.call_arg_map! a; signal = Signal.new pointer: Abi.ABI_ColorPicker_onColorChange(@pointer, *a), autofree: false; block_given? ? signal.connect(&b) : signal; end
    def on_color_change=(a);    signal = Signal.new pointer: Abi.ABI_ColorPicker_onColorChange(@pointer), autofree: false; signal.connect(&a); end
    def on_ok_press(*a, &b);   Abi.call_arg_map! a; signal = Signal.new pointer: Abi.ABI_ColorPicker_onOkPress(@pointer, *a), autofree: false; block_given? ? signal.connect(&b) : signal; end
    def on_ok_press=(a);    signal = Signal.new pointer: Abi.ABI_ColorPicker_onOkPress(@pointer), autofree: false; signal.connect(&a); end
  end
end
