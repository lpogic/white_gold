## File generated by tgui-update.rb
## Manual changes not recommended

class Tgui
  module Abi
    extern 'void ABI_Util_free(void* pointer)'
    extern 'void* ABI_Color_new(int r, int g, int b, int a)'
    extern 'int ABI_Color_get_red(Color* self)'
    extern 'int ABI_Color_get_green(Color* self)'
    extern 'int ABI_Color_get_blue(Color* self)'
    extern 'int ABI_Color_get_alpha(Color* self)'
    extern 'void* ABI_Color_fade(Color* self, float fade)'
    extern 'int ABI_Signal_connect(Signal* self, void(*f)())'
    extern 'int ABI_Signal_disconnect(Signal* self, int f)'
    extern 'int ABI_SignalString_connect(SignalString* self, void(*f)(const char32_t*))'
    extern 'int ABI_SignalBool_connect(SignalBool* self, void(*f)(int))'
    extern 'int ABI_SignalInt_connect(SignalInt* self, void(*f)(int))'
    extern 'int ABI_SignalFloat_connect(SignalFloat* self, void(*f)(float))'
    extern 'int ABI_SignalPointer_connect(SignalTyped<void*>* self, void(*f)(void*))'
    extern 'int ABI_SignalColor_connect(SignalColor* self, void(*f)(void*))'
    extern 'int ABI_SignalVector2f_connect(SignalVector2f* self, void(*f)(void*))'
    extern 'int ABI_SignalShowEffect_connect(SignalShowEffect* self, void(*f)(int, int))'
    extern 'int ABI_SignalAnimationType_connect(SignalAnimationType* self, void(*f)(int))'
    extern 'int ABI_SignalItem_connect(SignalItem* self, void(*f)(const char32_t*, const char32_t*))'
    extern 'void* ABI_Window_new()'
    extern 'void ABI_Window_close(sf::WindowBase* self)'
    extern 'int ABI_Window_isOpen(sf::WindowBase* self)'
    extern 'void* ABI_Gui_new(sf::RenderWindow* window)'
    extern 'int ABI_Gui_isActive(Gui* self)'
    extern 'void ABI_Gui_pollEvents(Gui* self)'
    extern 'void ABI_Gui_draw(Gui* self)'
    extern 'void ABI_Gui_add(Gui* self, Widget::Ptr* widget, const char* name)'
    extern 'void ABI_Gui_remove(Gui* self, Widget::Ptr* widget)'
    extern 'void ABI_Gui_removeAll(Gui* self)'
    extern 'void ABI_Gui_mainLoop(Gui* self)'
    extern 'void* ABI_Gui_getWidget(Gui* self, const char* name)'
    extern 'void ABI_Theme_setDefault(char* theme)'
    extern 'void* ABI_Texture_new(char* id, int partRectX, int partRectY, int partRectW, int partRectH, int middlePartX, int middlePartY, int middlePartW, int middlePartH, int smooth)'
    extern 'void* ABI_Texture_getId(Texture* self)'
    extern 'void* ABI_Texture_getImageSize(Texture* self)'
    extern 'void* ABI_Texture_getPartRect(Texture* self)'
    extern 'void ABI_Texture_setColor(Texture* self, int red, int green, int blue)'
    extern 'void* ABI_Texture_getColor(Texture* self)'
    extern 'int ABI_Texture_isSmooth(Texture* self)'
    extern 'void ABI_Widget_free(std::shared_ptr<Widget>* pointer)'
    extern 'void* ABI_Widget_getUnshared(std::shared_ptr<Widget>* pointer)'
    extern 'void* ABI_Widget_getType(Widget::Ptr* self)'
    extern 'void* ABI_Widget_getName(Widget::Ptr* self)'
    extern 'void ABI_Widget_setSize(Widget::Ptr* self, const char* width, const char* height)'
    extern 'void* ABI_Widget_getSize(Widget::Ptr* self)'
    extern 'void* ABI_Widget_getFullSize(Widget::Ptr* self)'
    extern 'void ABI_Widget_setPosition(Widget::Ptr* self, const char* x, const char* y)'
    extern 'void* ABI_Widget_getPosition(Widget::Ptr* self)'
    extern 'void* ABI_Widget_getAbsolutePosition(Widget::Ptr* self)'
    extern 'void ABI_Widget_setWidth(Widget::Ptr* self, const char* width)'
    extern 'void ABI_Widget_setHeight(Widget::Ptr* self, const char* height)'
    extern 'void ABI_Widget_setVisible(Widget::Ptr* self, int visible)'
    extern 'int ABI_Widget_isVisible(Widget::Ptr* self)'
    extern 'void ABI_Widget_setEnabled(Widget::Ptr* self, int enabled)'
    extern 'int ABI_Widget_isEnabled(Widget::Ptr* self)'
    extern 'void ABI_Widget_setFocused(Widget::Ptr* self, int focused)'
    extern 'int ABI_Widget_isFocused(Widget::Ptr* self)'
    extern 'void ABI_Widget_setFocusable(Widget::Ptr* self, int focusable)'
    extern 'int ABI_Widget_isFocusable(Widget::Ptr* self)'
    extern 'int ABI_Widget_canGainFocus(Widget::Ptr* self)'
    extern 'int ABI_Widget_isContainer(Widget::Ptr* self)'
    extern 'void* ABI_Widget_onPositionChange(Widget::Ptr* self)'
    extern 'void* ABI_Widget_onSizeChange(Widget::Ptr* self)'
    extern 'void* ABI_Widget_onFocus(Widget::Ptr* self)'
    extern 'void* ABI_Widget_onUnfocus(Widget::Ptr* self)'
    extern 'void* ABI_Widget_onMouseEnter(Widget::Ptr* self)'
    extern 'void* ABI_Widget_onMouseLeave(Widget::Ptr* self)'
    extern 'void* ABI_Widget_onShowEffectFinish(Widget::Ptr* self)'
    extern 'void* ABI_Widget_onAnimationFinish(Widget::Ptr* self)'
    extern 'void* ABI_ClickableWidget_onMousePress(ClickableWidget::Ptr* self)'
    extern 'void* ABI_ClickableWidget_onMouseRelease(ClickableWidget::Ptr* self)'
    extern 'void* ABI_ClickableWidget_onClick(ClickableWidget::Ptr* self)'
    extern 'void* ABI_ClickableWidget_onRightMousePress(ClickableWidget::Ptr* self)'
    extern 'void* ABI_ClickableWidget_onRightMouseRelease(ClickableWidget::Ptr* self)'
    extern 'void* ABI_ClickableWidget_onRightClick(ClickableWidget::Ptr* self)'
    extern 'void ABI_ButtonBase_setTextPosition(ButtonBase::Ptr* self, const char* position, const char* origin)'
    extern 'void* ABI_Button_new()'
    extern 'void ABI_Button_setText(Button::Ptr* self, const char* text)'
    extern 'void* ABI_Button_getText(Button::Ptr* self)'
    extern 'void* ABI_Button_onPress(Button::Ptr* self)'
    extern 'void* ABI_BitmapButton_new()'
    extern 'void ABI_BitmapButton_setImage(BitmapButton::Ptr* self, Texture* texture)'
    extern 'void* ABI_BitmapButton_getImage(BitmapButton::Ptr* self)'
    extern 'void ABI_BitmapButton_setImageScaling(BitmapButton::Ptr* self, float relativeHeight)'
    extern 'float ABI_BitmapButton_getImageScaling(BitmapButton::Ptr* self)'
    extern 'void* ABI_EditBox_new()'
    extern 'void ABI_EditBox_setText(EditBox::Ptr* self, const char* text)'
    extern 'void* ABI_EditBox_getText(EditBox::Ptr* self)'
    extern 'void ABI_EditBox_setDefaultText(EditBox::Ptr* self, const char* text)'
    extern 'void* ABI_EditBox_getDefaultText(EditBox::Ptr* self)'
    extern 'void ABI_EditBox_selectText(EditBox::Ptr* self, int start, int length)'
    extern 'void* ABI_EditBox_getSelectedText(EditBox::Ptr* self)'
    extern 'void ABI_EditBox_setPasswordCharacter(EditBox::Ptr* self, char* character)'
    extern 'char ABI_EditBox_getPasswordCharacter(EditBox::Ptr* self)'
    extern 'void ABI_EditBox_setMaximumCharacters(EditBox::Ptr* self, unsigned int max)'
    extern 'unsigned int ABI_EditBox_getMaximumCharacters(EditBox::Ptr* self)'
    extern 'void ABI_EditBox_setAlignment(EditBox::Ptr* self, int alignment)'
    extern 'int ABI_EditBox_getAlignment(EditBox::Ptr* self)'
    extern 'void ABI_EditBox_limitTextWidth(EditBox::Ptr* self, int limit)'
    extern 'int ABI_EditBox_isTextWidthLimited(EditBox::Ptr* self)'
    extern 'void ABI_EditBox_setReadOnly(EditBox::Ptr* self, int read_only)'
    extern 'int ABI_EditBox_isReadOnly(EditBox::Ptr* self)'
    extern 'void ABI_EditBox_setCaretPosition(EditBox::Ptr* self, int caretPosition)'
    extern 'int ABI_EditBox_getCaretPosition(EditBox::Ptr* self)'
    extern 'void ABI_EditBox_setSuffix(EditBox::Ptr* self, char* suffix)'
    extern 'void* ABI_EditBox_getSuffix(EditBox::Ptr* self)'
    extern 'void* ABI_EditBox_onTextChange(EditBox::Ptr* self)'
    extern 'void* ABI_EditBox_onReturnKeyPress(EditBox::Ptr* self)'
    extern 'void* ABI_EditBox_onReturnOrUnfocus(EditBox::Ptr* self)'
    extern 'void* ABI_Label_new(char* text)'
    extern 'void ABI_Label_setText(Label::Ptr* self, char* text)'
    extern 'void* ABI_Label_getText(Label::Ptr* self)'
    extern 'void ABI_Label_setHorizontalAlignment(Label::Ptr* self, int alignment)'
    extern 'int ABI_Label_getHorizontalAlignment(Label::Ptr* self)'
    extern 'void ABI_Label_setVerticalAlignment(Label::Ptr* self, int alignment)'
    extern 'int ABI_Label_getVerticalAlignment(Label::Ptr* self)'
    extern 'void ABI_Label_setScrollbarPolicy(Label::Ptr* self, int policy)'
    extern 'int ABI_Label_getScrollbarPolicy(Label::Ptr* self)'
    extern 'void ABI_Label_setScrollbarValue(Label::Ptr* self, unsigned int value)'
    extern 'int ABI_Label_getScrollbarValue(Label::Ptr* self)'
    extern 'void ABI_Label_setAutoSize(Label::Ptr* self, int auto_size)'
    extern 'int ABI_Label_getAutoSize(Label::Ptr* self)'
    extern 'void ABI_Label_setMaximumTextWidth(Label::Ptr* self, float maximumWidth)'
    extern 'float ABI_Label_getMaximumTextWidth(Label::Ptr* self)'
    extern 'void ABI_Label_ignoreMouseEvents(Label::Ptr* self, int ignore)'
    extern 'int ABI_Label_ignoringMouseEvents(Label::Ptr* self)'
    extern 'void* ABI_RadioButton_new()'
    extern 'void ABI_RadioButton_setText(RadioButton::Ptr* self, char* text)'
    extern 'void* ABI_RadioButton_getText(RadioButton::Ptr* self)'
    extern 'void ABI_RadioButton_setChecked(RadioButton::Ptr* self, int checked)'
    extern 'int ABI_RadioButton_isChecked(RadioButton::Ptr* self)'
    extern 'void ABI_RadioButton_setTextClickable(RadioButton::Ptr* self, int textClickable)'
    extern 'int ABI_RadioButton_isTextClickable(RadioButton::Ptr* self)'
    extern 'void* ABI_RadioButton_onCheck(RadioButton::Ptr* self)'
    extern 'void* ABI_RadioButton_onUncheck(RadioButton::Ptr* self)'
    extern 'void* ABI_RadioButton_onChange(RadioButton::Ptr* self)'
    extern 'void* ABI_CheckBox_new()'
    extern 'void* ABI_Knob_new()'
    extern 'void ABI_Knob_setStartRotation(Knob::Ptr* self, float startRotation)'
    extern 'float ABI_Knob_getStartRotation(Knob::Ptr* self)'
    extern 'void ABI_Knob_setEndRotation(Knob::Ptr* self, float endRotation)'
    extern 'float ABI_Knob_getEndRotation(Knob::Ptr* self)'
    extern 'void ABI_Knob_setMinimum(Knob::Ptr* self, float minimum)'
    extern 'float ABI_Knob_getMinimum(Knob::Ptr* self)'
    extern 'void ABI_Knob_setMaximum(Knob::Ptr* self, float maximum)'
    extern 'float ABI_Knob_getMaximum(Knob::Ptr* self)'
    extern 'void ABI_Knob_setValue(Knob::Ptr* self, float value)'
    extern 'float ABI_Knob_getValue(Knob::Ptr* self)'
    extern 'void ABI_Knob_setClockwiseTurning(Knob::Ptr* self, int clockwiseTurning)'
    extern 'float ABI_Knob_getClockwiseTurning(Knob::Ptr* self)'
    extern 'void* ABI_Knob_onValueChange(Knob::Ptr* self)'
    extern 'void ABI_Container_get_widgets(Container::Ptr* self, void(*f)(Widget::Ptr* widget, const char32_t* type))'
    extern 'void ABI_Container_add(Container::Ptr* self, Widget::Ptr* widget, char* name)'
    extern 'void* ABI_Container_get(Container::Ptr* self, char* name)'
    extern 'int ABI_Container_remove(Container::Ptr* self, Widget::Ptr* widget)'
    extern 'void ABI_Container_removeAllWidgets(Container::Ptr* self)'
    extern 'void* ABI_Container_getInnerSize(Container::Ptr* self)'
    extern 'void* ABI_Container_getChildWidgetsOffset(Container::Ptr* self)'
    extern 'void ABI_Container_moveWidgetToFront(Container::Ptr* self, Widget::Ptr* widget)'
    extern 'void ABI_Container_moveWidgetToBack(Container::Ptr* self, Widget::Ptr* widget)'
    extern 'int ABI_Container_moveWidgetForward(Container::Ptr* self, Widget::Ptr* widget)'
    extern 'int ABI_Container_moveWidgetBackward(Container::Ptr* self, Widget::Ptr* widget)'
    extern 'int ABI_Container_setWidgetIndex(Container::Ptr* self, Widget::Ptr* widget, int index)'
    extern 'int ABI_Container_getWidgetIndex(Container::Ptr* self, Widget::Ptr* widget)'
    extern 'void* ABI_Container_getFocusedChild(Container::Ptr* self)'
    extern 'void* ABI_Container_getFocusedLeaf(Container::Ptr* self)'
    extern 'void* ABI_Container_getWidgetAtPosition(Container::Ptr* self, float x, float y)'
    extern 'int ABI_Container_focusNextWidget(Container::Ptr* self, int recursive)'
    extern 'int ABI_Container_focusPreviousWidget(Container::Ptr* self, int recursive)'
    extern 'void ABI_Container_setFocused(Container::Ptr* self, int focused)'
    extern 'void* ABI_ChildWindow_new()'
    extern 'void ABI_ChildWindow_setClientSize(ChildWindow::Ptr* self, char* size)'
    extern 'void* ABI_ChildWindow_getClientSize(ChildWindow::Ptr* self)'
    extern 'void ABI_ChildWindow_setMaximumSize(ChildWindow::Ptr* self, float x, float y)'
    extern 'void* ABI_ChildWindow_getMaximumSize(ChildWindow::Ptr* self)'
    extern 'void ABI_ChildWindow_setMinimumSize(ChildWindow::Ptr* self, float x, float y)'
    extern 'void* ABI_ChildWindow_getMinimumSize(ChildWindow::Ptr* self)'
    extern 'void ABI_ChildWindow_setTitle(ChildWindow::Ptr* self, char* title)'
    extern 'void* ABI_ChildWindow_getTitle(ChildWindow::Ptr* self)'
    extern 'void ABI_ChildWindow_setTitleTextSize(ChildWindow::Ptr* self, unsigned int size)'
    extern 'unsigned int ABI_ChildWindow_getTitleTextSize(ChildWindow::Ptr* self)'
    extern 'void ABI_ChildWindow_setTitleAlignment(ChildWindow::Ptr* self, int alignment)'
    extern 'int ABI_ChildWindow_getTitleAlignment(ChildWindow::Ptr* self)'
    extern 'void ABI_ChildWindow_setTitleButtons(ChildWindow::Ptr* self, unsigned int buttons)'
    extern 'unsigned int ABI_ChildWindow_getTitleButtons(ChildWindow::Ptr* self)'
    extern 'void ABI_ChildWindow_close(ChildWindow::Ptr* self)'
    extern 'void ABI_ChildWindow_destroy(ChildWindow::Ptr* self)'
    extern 'void ABI_ChildWindow_setResizable(ChildWindow::Ptr* self, int resizable)'
    extern 'int ABI_ChildWindow_isResizable(ChildWindow::Ptr* self)'
    extern 'void ABI_ChildWindow_setPositionLocked(ChildWindow::Ptr* self, int positionLocked)'
    extern 'int ABI_ChildWindow_isPositionLocked(ChildWindow::Ptr* self)'
    extern 'void ABI_ChildWindow_setKeepInParent(ChildWindow::Ptr* self, int enabled)'
    extern 'int ABI_ChildWindow_isKeptInParent(ChildWindow::Ptr* self)'
    extern 'void* ABI_ChildWindow_onMousePress(ChildWindow::Ptr* self)'
    extern 'void* ABI_ChildWindow_onClose(ChildWindow::Ptr* self)'
    extern 'void* ABI_ChildWindow_onMinimize(ChildWindow::Ptr* self)'
    extern 'void* ABI_ChildWindow_onMaximize(ChildWindow::Ptr* self)'
    extern 'void* ABI_ChildWindow_onEscapeKeyPress(ChildWindow::Ptr* self)'
    extern 'void* ABI_ChildWindow_onClosing(ChildWindow::Ptr* self)'
    extern 'void* ABI_Group_new()'
    extern 'void* ABI_BoxLayout_getByIndex(BoxLayout::Ptr* self, int index)'
    extern 'void ABI_BoxLayout_insert(BoxLayout::Ptr* self, int index, Widget::Ptr* widget, char* name)'
    extern 'int ABI_BoxLayout_removeByIndex(BoxLayout::Ptr* self, int index)'
    extern 'void ABI_BoxLayoutRatios_addSpace(BoxLayoutRatios::Ptr* self, float ratio)'
    extern 'void ABI_BoxLayoutRatios_insertSpace(BoxLayoutRatios::Ptr* self, int index, float ratio)'
    extern 'void ABI_BoxLayoutRatios_setRatio(BoxLayoutRatios::Ptr* self, Widget::Ptr* widget, float ratio)'
    extern 'void ABI_BoxLayoutRatios_setRatioByIndex(BoxLayoutRatios::Ptr* self, int index, float ratio)'
    extern 'float ABI_BoxLayoutRatios_getRatio(BoxLayoutRatios::Ptr* self, Widget::Ptr* widget)'
    extern 'float ABI_BoxLayoutRatios_getRatioByIndex(BoxLayoutRatios::Ptr* self, int index)'
    extern 'void* ABI_HorizontalLayout_create()'
    extern 'void* ABI_VerticalLayout_create()'
    extern 'void* ABI_HorizontalWrap_create()'
    extern 'void* ABI_RadioButtonGroup_create()'
    extern 'void ABI_RadioButtonGroup_uncheckRadioButtons(RadioButtonGroup::Ptr* self)'
    extern 'void* ABI_RadioButtonGroup_getCheckedRadioButton(RadioButtonGroup::Ptr* self)'
    extern 'void* ABI_Panel_create()'
    extern 'void* ABI_Panel_onMousePress(Panel::Ptr* self)'
    extern 'void* ABI_Panel_onMouseRelease(Panel::Ptr* self)'
    extern 'void* ABI_Panel_onClick(Panel::Ptr* self)'
    extern 'void* ABI_Panel_onDoubleClick(Panel::Ptr* self)'
    extern 'void* ABI_Panel_onRightMousePress(Panel::Ptr* self)'
    extern 'void* ABI_Panel_onRightMouseRelease(Panel::Ptr* self)'
    extern 'void* ABI_Panel_onRightClick(Panel::Ptr* self)'
    extern 'void* ABI_ScrollablePanel_create()'
    extern 'void ABI_ScrollablePanel_setContentSize(ScrollablePanel::Ptr* self, float x, float y)'
    extern 'void* ABI_ScrollablePanel_getContentSize(ScrollablePanel::Ptr* self)'
    extern 'void* ABI_ScrollablePanel_getContentOffset(ScrollablePanel::Ptr* self)'
    extern 'float ABI_ScrollablePanel_getScrollbarWidth(ScrollablePanel::Ptr* self)'
    extern 'void ABI_ScrollablePanel_setVerticalScrollbarPolicy(ScrollablePanel::Ptr* self, int policy)'
    extern 'int ABI_ScrollablePanel_getVerticalScrollbarPolicy(ScrollablePanel::Ptr* self)'
    extern 'void ABI_ScrollablePanel_setHorizontalScrollbarPolicy(ScrollablePanel::Ptr* self, int policy)'
    extern 'int ABI_ScrollablePanel_getHorizontalScrollbarPolicy(ScrollablePanel::Ptr* self)'
    extern 'void ABI_ScrollablePanel_setVerticalScrollAmount(ScrollablePanel::Ptr* self, int amount)'
    extern 'int ABI_ScrollablePanel_getVerticalScrollAmount(ScrollablePanel::Ptr* self)'
    extern 'void ABI_ScrollablePanel_setHorizontalScrollAmount(ScrollablePanel::Ptr* self, int amount)'
    extern 'int ABI_ScrollablePanel_getHorizontalScrollAmount(ScrollablePanel::Ptr* self)'
    extern 'void ABI_ScrollablePanel_setVerticalScrollbarValue(ScrollablePanel::Ptr* self, int value)'
    extern 'int ABI_ScrollablePanel_getVerticalScrollbarValue(ScrollablePanel::Ptr* self)'
    extern 'void ABI_ScrollablePanel_setHorizontalScrollbarValue(ScrollablePanel::Ptr* self, int value)'
    extern 'int ABI_ScrollablePanel_getHorizontalScrollbarValue(ScrollablePanel::Ptr* self)'
    extern 'void* ABI_Grid_make()'
    extern 'void ABI_Grid_setAutoSize(Grid::Ptr* self, int autoSize)'
    extern 'int ABI_Grid_isAutoSize(Grid::Ptr* self)'
    extern 'int ABI_Grid_setWidgetCell(Grid::Ptr* self, Widget::Ptr* widget, int row, int column)'
    extern 'void* ABI_Grid_getWidget(Grid::Ptr* self, int row, int column)'
    extern 'void ABI_Grid_setWidgetPadding(Grid::Ptr* self, Widget::Ptr* widget, char* paddingLeft, char* paddingRight, char* paddingTop, char* paddingBottom)'
    extern 'void* ABI_Grid_getWidgetPadding(Grid::Ptr* self, Widget::Ptr* widget)'
    extern 'void ABI_Grid_setWidgetAlignment(Grid::Ptr* self, Widget::Ptr* widget, int alignment)'
    extern 'int ABI_Grid_getWidgetAlignment(Grid::Ptr* self, Widget::Ptr* widget)'
    extern 'void* ABI_ListView_make()'
    extern 'int ABI_ListView_addColumn(ListView::Ptr* self)'
    extern 'void ABI_ListView_setColumnText(ListView::Ptr* self, int index, char* text)'
    extern 'void* ABI_ListView_getColumnText(ListView::Ptr* self, int index)'
    extern 'void ABI_ListView_setColumnWidth(ListView::Ptr* self, int index, float width)'
    extern 'float ABI_ListView_getColumnWidth(ListView::Ptr* self, int index)'
    extern 'void ABI_ListView_setColumnAlignment(ListView::Ptr* self, int index, int columnAlignment)'
    extern 'int ABI_ListView_getColumnAlignment(ListView::Ptr* self, int index)'
    extern 'void ABI_ListView_removeAllColumns(ListView::Ptr* self)'
    extern 'int ABI_ListView_getColumnCount(ListView::Ptr* self)'
    extern 'void ABI_ListView_setHeaderHeight(ListView::Ptr* self, float height)'
    extern 'float ABI_ListView_getHeaderHeight(ListView::Ptr* self)'
    extern 'float ABI_ListView_getCurrentHeaderHeight(ListView::Ptr* self)'
    extern 'void ABI_ListView_setHeaderVisible(ListView::Ptr* self, int showHeader)'
    extern 'int ABI_ListView_headerVisible(ListView::Ptr* self)'
    extern 'int ABI_ListView_addItem(ListView::Ptr* self, char*(*f)(void))'
    extern 'void ABI_ListView_insertItem(ListView::Ptr* self, int index, char*(*f)(void))'
    extern 'int ABI_ListView_changeItem(ListView::Ptr* self, int index, char*(*f)(void))'
    extern 'int ABI_ListView_changeSubitem(ListView::Ptr* self, int index, int column, char* item)'
    extern 'int ABI_ListView_removeItem(ListView::Ptr* self, int index)'
    extern 'void ABI_ListView_removeAllItems(ListView::Ptr* self)'
    extern 'void ABI_ListView_setSelectedItem(ListView::Ptr* self, int index)'
    extern 'void ABI_ListView_setSelectedItems(ListView::Ptr* self, int(*f)(void))'
    extern 'void ABI_ListView_deselectItems(ListView::Ptr* self)'
    extern 'int ABI_ListView_getSelectedItemIndex(ListView::Ptr* self)'
    extern 'void ABI_ListView_getSelectedItemIndices(ListView::Ptr* self, void(*f)(int))'
    extern 'void ABI_ListView_setMultiSelect(ListView::Ptr* self, int multiSelect)'
    extern 'int ABI_ListView_multiSelect(ListView::Ptr* self)'
    extern 'void ABI_ListView_setItemIcon(ListView::Ptr* self, int index, Texture* texture)'
    extern 'void* ABI_ListView_getItemIcon(ListView::Ptr* self, int index)'
    extern 'int ABI_ListView_getItemCount(ListView::Ptr* self)'
    extern 'void ABI_ListView_getItemRow(ListView::Ptr* self, int index, void(*f)(const char32_t*))'
    extern 'void* ABI_ListView_getItemCell(ListView::Ptr* self, int rowIndex, int columnIndex)'
    extern 'void ABI_ListView_getItemRows(ListView::Ptr* self, void(*f)(const char32_t*, int row))'
    extern 'void ABI_ListView_setItemHeight(ListView::Ptr* self, int itemHeight)'
    extern 'int ABI_ListView_getItemHeight(ListView::Ptr* self)'
    extern 'void ABI_ListView_setHeaderTextSize(ListView::Ptr* self, int textSize)'
    extern 'int ABI_ListView_getHeaderTextSize(ListView::Ptr* self)'
    extern 'void ABI_ListView_setSeparatorWidth(ListView::Ptr* self, int width)'
    extern 'int ABI_ListView_getSeparatorWidth(ListView::Ptr* self)'
    extern 'void ABI_ListView_setHeaderSeparatorHeight(ListView::Ptr* self, int height)'
    extern 'int ABI_ListView_getHeaderSeparatorHeight(ListView::Ptr* self)'
    extern 'void ABI_ListView_setGridLinesWidth(ListView::Ptr* self, int width)'
    extern 'int ABI_ListView_getGridLinesWidth(ListView::Ptr* self)'
    extern 'void ABI_ListView_setAutoScroll(ListView::Ptr* self, int autoScroll)'
    extern 'int ABI_ListView_autoScroll(ListView::Ptr* self)'
    extern 'void ABI_ListView_setShowVerticalGridLines(ListView::Ptr* self, int showGridLines)'
    extern 'int ABI_ListView_showVerticalGridLines(ListView::Ptr* self)'
    extern 'void ABI_ListView_setShowHorizontalGridLines(ListView::Ptr* self, int showGridLines)'
    extern 'int ABI_ListView_showHorizontalGridLines(ListView::Ptr* self)'
    extern 'void ABI_ListView_setExpandLastColumn(ListView::Ptr* self, int expand)'
    extern 'int ABI_ListView_expandLastColumn(ListView::Ptr* self)'
    extern 'void ABI_ListView_setVerticalScrollbarPolicy(ListView::Ptr* self, int policy)'
    extern 'int ABI_ListView_getVerticalScrollbarPolicy(ListView::Ptr* self)'
    extern 'void ABI_ListView_setHorizontalScrollbarPolicy(ListView::Ptr* self, int policy)'
    extern 'int ABI_ListView_getHorizontalScrollbarPolicy(ListView::Ptr* self)'
    extern 'void ABI_ListView_setVerticalScrollbarValue(ListView::Ptr* self, int value)'
    extern 'int ABI_ListView_getVerticalScrollbarValue(ListView::Ptr* self)'
    extern 'void ABI_ListView_setHorizontalScrollbarValue(ListView::Ptr* self, int value)'
    extern 'int ABI_ListView_getHorizontalScrollbarValue(ListView::Ptr* self)'
    extern 'void ABI_ListView_setFixedIconSize(ListView::Ptr* self, float width, float height)'
    extern 'void* ABI_ListView_getFixedIconSize(ListView::Ptr* self)'
    extern 'void ABI_ListView_setResizableColumns(ListView::Ptr* self, int resizable)'
    extern 'int ABI_ListView_resizableColumns(ListView::Ptr* self)'
    extern 'void* ABI_ListView_onItemSelect(ListView::Ptr* self)'
    extern 'void* ABI_ListView_onDoubleClick(ListView::Ptr* self)'
    extern 'void* ABI_ListView_onRightClick(ListView::Ptr* self)'
    extern 'void* ABI_ListView_onHeaderClick(ListView::Ptr* self)'
    extern 'void* ABI_ComboBox_make()'
    extern 'void ABI_ComboBox_setItemsToDisplay(ComboBox::Ptr* self, int itemsToDisplay)'
    extern 'int ABI_ComboBox_getItemsToDisplay(ComboBox::Ptr* self)'
    extern 'void ABI_ComboBox_addItem(ComboBox::Ptr* self, char* name, char* id)'
    extern 'int ABI_ComboBox_setSelectedItemById(ComboBox::Ptr* self, char* id)'
    extern 'int ABI_ComboBox_setSelectedItemByIndex(ComboBox::Ptr* self, int index)'
    extern 'void ABI_ComboBox_deselectItem(ComboBox::Ptr* self)'
    extern 'int ABI_ComboBox_removeItemById(ComboBox::Ptr* self, char* id)'
    extern 'int ABI_ComboBox_removeItemByIndex(ComboBox::Ptr* self, int index)'
    extern 'void ABI_ComboBox_removeAllItems(ComboBox::Ptr* self)'
    extern 'void* ABI_ComboBox_getItemById(ComboBox::Ptr* self, char* id)'
    extern 'void* ABI_ComboBox_getSelectedItemId(ComboBox::Ptr* self)'
    extern 'int ABI_ComboBox_changeItemById(ComboBox::Ptr* self, char* id, char* newValue)'
    extern 'int ABI_ComboBox_changeItemByIndex(ComboBox::Ptr* self, int index, char* newValue)'
    extern 'int ABI_ComboBox_getItemCount(ComboBox::Ptr* self)'
    extern 'void ABI_ComboBox_getItemIds(ComboBox::Ptr* self, void(*f)(char32_t*))'
    extern 'void ABI_ComboBox_setMaximumItems(ComboBox::Ptr* self, int maximumItems)'
    extern 'int ABI_ComboBox_getMaximumItems(ComboBox::Ptr* self)'
    extern 'void ABI_ComboBox_setDefaultText(ComboBox::Ptr* self, char* defaultText)'
    extern 'void* ABI_ComboBox_getDefaultText(ComboBox::Ptr* self)'
    extern 'void ABI_ComboBox_setExpandDirection(ComboBox::Ptr* self, int expandDirection)'
    extern 'int ABI_ComboBox_getExpandDirection(ComboBox::Ptr* self)'
    extern 'int ABI_ComboBox_containsId(ComboBox::Ptr* self, char* id)'
    extern 'void ABI_ComboBox_setChangeItemOnScroll(ComboBox::Ptr* self, int changeItemOnScroll)'
    extern 'int ABI_ComboBox_getChangeItemOnScroll(ComboBox::Ptr* self)'
    extern 'void* ABI_ComboBox_onItemSelect(ComboBox::Ptr* self)'
    extern 'void* ABI_ColorPicker_new()'
    extern 'void ABI_ColorPicker_setColor(ColorPicker::Ptr* self, Color* color)'
    extern 'void* ABI_ColorPicker_getColor(ColorPicker::Ptr* self)'
    extern 'void* ABI_ColorPicker_onColorChange(ColorPicker::Ptr* self)'
    extern 'void* ABI_ColorPicker_onOkPress(ColorPicker::Ptr* self)'
    extern 'void* ABI_MessageBox_new()'
    extern 'void ABI_MessageBox_setText(MessageBox::Ptr* self, char* text)'
    extern 'void* ABI_MessageBox_getText(MessageBox::Ptr* self)'
    extern 'void ABI_MessageBox_addButton(MessageBox::Ptr* self, char* button)'
    extern 'void ABI_MessageBox_getButtons(MessageBox::Ptr* self, void(*f)(const char32_t*))'
    extern 'void ABI_MessageBox_setLabelAlignment(MessageBox::Ptr* self, int alignment)'
    extern 'int ABI_MessageBox_getLabelAlignment(MessageBox::Ptr* self)'
    extern 'void ABI_MessageBox_setButtonAlignment(MessageBox::Ptr* self, int alignment)'
    extern 'int ABI_MessageBox_getButtonAlignment(MessageBox::Ptr* self)'
    extern 'void* ABI_MessageBox_onButtonPress(MessageBox::Ptr* self)'
    extern 'void* ABI_Picture_new(Texture* texture, int transparent)'
    extern 'void ABI_Picture_ignoreMouseEvents(Picture::Ptr* self, int ignore)'
    extern 'int ABI_Picture_isIgnoringMouseEvents(Picture::Ptr* self)'
    extern 'void* ABI_Picture_onDoubleClick(Picture::Ptr* self)'
  end

  class Util
    def self.free(*a);    Abi.call_arg_map! a; Abi.ABI_Util_free(*a); end
  end

  class Color
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_Color_new(*a)); initialized(); end
    def red(*a);    Abi.call_arg_map! a; Abi.ABI_Color_get_red(@pointer, *a); end
    def green(*a);    Abi.call_arg_map! a; Abi.ABI_Color_get_green(@pointer, *a); end
    def blue(*a);    Abi.call_arg_map! a; Abi.ABI_Color_get_blue(@pointer, *a); end
    def alpha(*a);    Abi.call_arg_map! a; Abi.ABI_Color_get_alpha(@pointer, *a); end
    def fade(*a, &b);    Abi.call_arg_map! a; Abi.ABI_Color_fade(@pointer, *a).parse('Color'); end
  end

  class Signal
    module Private; def self.connect(*a);    Abi.call_arg_map! a; Abi.ABI_Signal_connect(*a); end; end
    module Private; def self.disconnect(*a);    Abi.call_arg_map! a; Abi.ABI_Signal_disconnect(*a).odd?; end; end
  end

  class SignalString
    module Private; def self.connect(*a);    Abi.call_arg_map! a; Abi.ABI_SignalString_connect(*a); end; end
  end

  class SignalBool
    module Private; def self.connect(*a);    Abi.call_arg_map! a; Abi.ABI_SignalBool_connect(*a); end; end
  end

  class SignalInt
    module Private; def self.connect(*a);    Abi.call_arg_map! a; Abi.ABI_SignalInt_connect(*a); end; end
  end

  class SignalFloat
    module Private; def self.connect(*a);    Abi.call_arg_map! a; Abi.ABI_SignalFloat_connect(*a); end; end
  end

  class SignalPointer
    module Private; def self.connect(*a);    Abi.call_arg_map! a; Abi.ABI_SignalPointer_connect(*a); end; end
  end

  class SignalColor
    module Private; def self.connect(*a);    Abi.call_arg_map! a; Abi.ABI_SignalColor_connect(*a); end; end
  end

  class SignalVector2f
    module Private; def self.connect(*a);    Abi.call_arg_map! a; Abi.ABI_SignalVector2f_connect(*a); end; end
  end

  class SignalShowEffect
    module Private; def self.connect(*a);    Abi.call_arg_map! a; Abi.ABI_SignalShowEffect_connect(*a); end; end
  end

  class SignalAnimationType
    module Private; def self.connect(*a);    Abi.call_arg_map! a; Abi.ABI_SignalAnimationType_connect(*a); end; end
  end

  class SignalItem
    module Private; def self.connect(*a);    Abi.call_arg_map! a; Abi.ABI_SignalItem_connect(*a); end; end
  end

  class Window
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_Window_new(*a)); initialized(); end
    def close(*a, &b);    Abi.call_arg_map! a; Abi.ABI_Window_close(@pointer, *a); end
    def open?(*a);    Abi.call_arg_map! a; Abi.ABI_Window_isOpen(@pointer, *a).odd?; end
  end

  class Gui
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_Gui_new(*a)); initialized(); end
    def active?(*a);    Abi.call_arg_map! a; Abi.ABI_Gui_isActive(@pointer, *a).odd?; end
    def poll_events(*a, &b);    Abi.call_arg_map! a; Abi.ABI_Gui_pollEvents(@pointer, *a); end
    def draw(*a, &b);    Abi.call_arg_map! a; Abi.ABI_Gui_draw(@pointer, *a); end
    def add(*a, &b);    Abi.call_arg_map! a; Abi.ABI_Gui_add(@pointer, *a); end
    def remove(*a, &b);    Abi.call_arg_map! a; Abi.ABI_Gui_remove(@pointer, *a); end
    def remove_all(*a, &b);    Abi.call_arg_map! a; Abi.ABI_Gui_removeAll(@pointer, *a); end
    def main_loop(*a, &b);    Abi.call_arg_map! a; Abi.ABI_Gui_mainLoop(@pointer, *a); end
    module Private; def self.get_widget(*a);    Abi.call_arg_map! a; Abi.ABI_Gui_getWidget(*a).parse('Widget::Ptr'); end; end
  end

  class Theme
    def self.set_default(*a);    Abi.call_arg_map! a; Abi.ABI_Theme_setDefault(*a); end
  end

  class Texture
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_Texture_new(*a)); initialized(); end
    def id(*a);    Abi.call_arg_map! a; Abi.ABI_Texture_getId(@pointer, *a).parse('char32_t'); end
    def image_size(*a);    Abi.call_arg_map! a; Abi.ABI_Texture_getImageSize(@pointer, *a).parse('Vector2u'); end
    def part_rect(*a);    Abi.call_arg_map! a; Abi.ABI_Texture_getPartRect(@pointer, *a).parse('UIntRect'); end
    def color=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_Texture_setColor(@pointer, *a); end
    def color(*a);    Abi.call_arg_map! a; Abi.ABI_Texture_getColor(@pointer, *a).parse('Color'); end
    def smooth?(*a);    Abi.call_arg_map! a; Abi.ABI_Texture_isSmooth(@pointer, *a).odd?; end
  end

  class Widget
    def self.finalizer(pointer);    proc{ Abi.ABI_Widget_free(pointer) }; end
    def self.get_unshared(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_getUnshared(*a).parse('Widget'); end
    def self.get_type(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_getType(*a).parse('char32_t'); end
    def name(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_getName(@pointer, *a).parse('char32_t'); end
    def size=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_Widget_setSize(@pointer, *a); end
    def size(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_getSize(@pointer, *a).parse('Vector2f'); end
    def full_size(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_getFullSize(@pointer, *a).parse('Vector2f'); end
    def position=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_Widget_setPosition(@pointer, *a); end
    def position(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_getPosition(@pointer, *a).parse('Vector2f'); end
    def absolute_position(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_getAbsolutePosition(@pointer, *a).parse('Vector2f'); end
    def width=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_Widget_setWidth(@pointer, *a); end
    def height=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_Widget_setHeight(@pointer, *a); end
    def visible=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_Widget_setVisible(@pointer, *a); end
    def visible?(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_isVisible(@pointer, *a).odd?; end
    def enabled=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_Widget_setEnabled(@pointer, *a); end
    def enabled?(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_isEnabled(@pointer, *a).odd?; end
    def focused=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_Widget_setFocused(@pointer, *a); end
    def focused?(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_isFocused(@pointer, *a).odd?; end
    def focusable=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_Widget_setFocusable(@pointer, *a); end
    def focusable?(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_isFocusable(@pointer, *a).odd?; end
    def can_gain_focus?(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_canGainFocus(@pointer, *a).odd?; end
    def container?(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_isContainer(@pointer, *a).odd?; end
    def on_position_change(*a, &b);   Abi.call_arg_map! a; signal = Abi.ABI_Widget_onPositionChange(@pointer, *a).parse('SignalVector2f'); block_given? ? signal.connect(&b) : signal; end
    def on_position_change=(a);    signal = Abi.ABI_Widget_onPositionChange(@pointer).parse('SignalVector2f'); signal.connect(&a); end
    def on_size_change(*a, &b);   Abi.call_arg_map! a; signal = Abi.ABI_Widget_onSizeChange(@pointer, *a).parse('SignalVector2f'); block_given? ? signal.connect(&b) : signal; end
    def on_size_change=(a);    signal = Abi.ABI_Widget_onSizeChange(@pointer).parse('SignalVector2f'); signal.connect(&a); end
    def on_focus(*a, &b);   Abi.call_arg_map! a; signal = Abi.ABI_Widget_onFocus(@pointer, *a).parse('Signal'); block_given? ? signal.connect(&b) : signal; end
    def on_focus=(a);    signal = Abi.ABI_Widget_onFocus(@pointer).parse('Signal'); signal.connect(&a); end
    def on_unfocus(*a, &b);   Abi.call_arg_map! a; signal = Abi.ABI_Widget_onUnfocus(@pointer, *a).parse('Signal'); block_given? ? signal.connect(&b) : signal; end
    def on_unfocus=(a);    signal = Abi.ABI_Widget_onUnfocus(@pointer).parse('Signal'); signal.connect(&a); end
    def on_mouse_enter(*a, &b);   Abi.call_arg_map! a; signal = Abi.ABI_Widget_onMouseEnter(@pointer, *a).parse('Signal'); block_given? ? signal.connect(&b) : signal; end
    def on_mouse_enter=(a);    signal = Abi.ABI_Widget_onMouseEnter(@pointer).parse('Signal'); signal.connect(&a); end
    def on_mouse_leave(*a, &b);   Abi.call_arg_map! a; signal = Abi.ABI_Widget_onMouseLeave(@pointer, *a).parse('Signal'); block_given? ? signal.connect(&b) : signal; end
    def on_mouse_leave=(a);    signal = Abi.ABI_Widget_onMouseLeave(@pointer).parse('Signal'); signal.connect(&a); end
    def on_show_effect_finish(*a, &b);   Abi.call_arg_map! a; signal = Abi.ABI_Widget_onShowEffectFinish(@pointer, *a).parse('SignalShowEffect'); block_given? ? signal.connect(&b) : signal; end
    def on_show_effect_finish=(a);    signal = Abi.ABI_Widget_onShowEffectFinish(@pointer).parse('SignalShowEffect'); signal.connect(&a); end
    def on_animation_finish(*a, &b);   Abi.call_arg_map! a; signal = Abi.ABI_Widget_onAnimationFinish(@pointer, *a).parse('SignalAnimationType'); block_given? ? signal.connect(&b) : signal; end
    def on_animation_finish=(a);    signal = Abi.ABI_Widget_onAnimationFinish(@pointer).parse('SignalAnimationType'); signal.connect(&a); end
  end

  class ClickableWidget
    def on_mouse_press(*a, &b);   Abi.call_arg_map! a; signal = Abi.ABI_ClickableWidget_onMousePress(@pointer, *a).parse('SignalVector2f'); block_given? ? signal.connect(&b) : signal; end
    def on_mouse_press=(a);    signal = Abi.ABI_ClickableWidget_onMousePress(@pointer).parse('SignalVector2f'); signal.connect(&a); end
    def on_mouse_release(*a, &b);   Abi.call_arg_map! a; signal = Abi.ABI_ClickableWidget_onMouseRelease(@pointer, *a).parse('SignalVector2f'); block_given? ? signal.connect(&b) : signal; end
    def on_mouse_release=(a);    signal = Abi.ABI_ClickableWidget_onMouseRelease(@pointer).parse('SignalVector2f'); signal.connect(&a); end
    def on_click(*a, &b);   Abi.call_arg_map! a; signal = Abi.ABI_ClickableWidget_onClick(@pointer, *a).parse('SignalVector2f'); block_given? ? signal.connect(&b) : signal; end
    def on_click=(a);    signal = Abi.ABI_ClickableWidget_onClick(@pointer).parse('SignalVector2f'); signal.connect(&a); end
    def on_right_mouse_press(*a, &b);   Abi.call_arg_map! a; signal = Abi.ABI_ClickableWidget_onRightMousePress(@pointer, *a).parse('SignalVector2f'); block_given? ? signal.connect(&b) : signal; end
    def on_right_mouse_press=(a);    signal = Abi.ABI_ClickableWidget_onRightMousePress(@pointer).parse('SignalVector2f'); signal.connect(&a); end
    def on_right_mouse_release(*a, &b);   Abi.call_arg_map! a; signal = Abi.ABI_ClickableWidget_onRightMouseRelease(@pointer, *a).parse('SignalVector2f'); block_given? ? signal.connect(&b) : signal; end
    def on_right_mouse_release=(a);    signal = Abi.ABI_ClickableWidget_onRightMouseRelease(@pointer).parse('SignalVector2f'); signal.connect(&a); end
    def on_right_click(*a, &b);   Abi.call_arg_map! a; signal = Abi.ABI_ClickableWidget_onRightClick(@pointer, *a).parse('SignalVector2f'); block_given? ? signal.connect(&b) : signal; end
    def on_right_click=(a);    signal = Abi.ABI_ClickableWidget_onRightClick(@pointer).parse('SignalVector2f'); signal.connect(&a); end
  end

  class ButtonBase
    module Private; def self.set_text_position(*a);    Abi.call_arg_map! a; Abi.ABI_ButtonBase_setTextPosition(*a); end; end
  end

  class Button
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_Button_new(*a)); initialized(); end
    def text=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_Button_setText(@pointer, *a); end
    def text(*a);    Abi.call_arg_map! a; Abi.ABI_Button_getText(@pointer, *a).parse('char32_t'); end
    def on_press(*a, &b);   Abi.call_arg_map! a; signal = Abi.ABI_Button_onPress(@pointer, *a).parse('Signal'); block_given? ? signal.connect(&b) : signal; end
    def on_press=(a);    signal = Abi.ABI_Button_onPress(@pointer).parse('Signal'); signal.connect(&a); end
  end

  class BitmapButton
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_BitmapButton_new(*a)); initialized(); end
    module Private; def self.set_image(*a);    Abi.call_arg_map! a; Abi.ABI_BitmapButton_setImage(*a); end; end
    def image(*a);    Abi.call_arg_map! a; Abi.ABI_BitmapButton_getImage(@pointer, *a).parse('Texture'); end
    def image_scaling=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_BitmapButton_setImageScaling(@pointer, *a); end
    def image_scaling(*a);    Abi.call_arg_map! a; Abi.ABI_BitmapButton_getImageScaling(@pointer, *a); end
  end

  class EditBox
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_EditBox_new(*a)); initialized(); end
    def text=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_EditBox_setText(@pointer, *a); end
    def text(*a);    Abi.call_arg_map! a; Abi.ABI_EditBox_getText(@pointer, *a).parse('char32_t'); end
    def default_text=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_EditBox_setDefaultText(@pointer, *a); end
    def default_text(*a);    Abi.call_arg_map! a; Abi.ABI_EditBox_getDefaultText(@pointer, *a).parse('char32_t'); end
    def select_text(*a, &b);    Abi.call_arg_map! a; Abi.ABI_EditBox_selectText(@pointer, *a); end
    def selected_text(*a);    Abi.call_arg_map! a; Abi.ABI_EditBox_getSelectedText(@pointer, *a).parse('char32_t'); end
    def password_character=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_EditBox_setPasswordCharacter(@pointer, *a); end
    def password_character(*a);    Abi.call_arg_map! a; Abi.ABI_EditBox_getPasswordCharacter(@pointer, *a).chr; end
    def maximum_characters=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_EditBox_setMaximumCharacters(@pointer, *a); end
    def maximum_characters(*a);    Abi.call_arg_map! a; Abi.ABI_EditBox_getMaximumCharacters(@pointer, *a); end
    module Private; def self.set_alignment(*a);    Abi.call_arg_map! a; Abi.ABI_EditBox_setAlignment(*a); end; end
    module Private; def self.get_alignment(*a);    Abi.call_arg_map! a; Abi.ABI_EditBox_getAlignment(*a); end; end
    def limit_text_width=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_EditBox_limitTextWidth(@pointer, *a); end
    def text_width_limited?(*a);    Abi.call_arg_map! a; Abi.ABI_EditBox_isTextWidthLimited(@pointer, *a).odd?; end
    def read_only=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_EditBox_setReadOnly(@pointer, *a); end
    def read_only?(*a);    Abi.call_arg_map! a; Abi.ABI_EditBox_isReadOnly(@pointer, *a).odd?; end
    def caret_position=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_EditBox_setCaretPosition(@pointer, *a); end
    def caret_position(*a);    Abi.call_arg_map! a; Abi.ABI_EditBox_getCaretPosition(@pointer, *a); end
    def suffix=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_EditBox_setSuffix(@pointer, *a); end
    def suffix(*a);    Abi.call_arg_map! a; Abi.ABI_EditBox_getSuffix(@pointer, *a).parse('char32_t'); end
    def on_text_change(*a, &b);   Abi.call_arg_map! a; signal = Abi.ABI_EditBox_onTextChange(@pointer, *a).parse('SignalString'); block_given? ? signal.connect(&b) : signal; end
    def on_text_change=(a);    signal = Abi.ABI_EditBox_onTextChange(@pointer).parse('SignalString'); signal.connect(&a); end
    def on_return_key_press(*a, &b);   Abi.call_arg_map! a; signal = Abi.ABI_EditBox_onReturnKeyPress(@pointer, *a).parse('SignalString'); block_given? ? signal.connect(&b) : signal; end
    def on_return_key_press=(a);    signal = Abi.ABI_EditBox_onReturnKeyPress(@pointer).parse('SignalString'); signal.connect(&a); end
    def on_return_or_unfocus(*a, &b);   Abi.call_arg_map! a; signal = Abi.ABI_EditBox_onReturnOrUnfocus(@pointer, *a).parse('SignalString'); block_given? ? signal.connect(&b) : signal; end
    def on_return_or_unfocus=(a);    signal = Abi.ABI_EditBox_onReturnOrUnfocus(@pointer).parse('SignalString'); signal.connect(&a); end
  end

  class Label
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_Label_new(*a)); initialized(); end
    def text=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_Label_setText(@pointer, *a); end
    def text(*a);    Abi.call_arg_map! a; Abi.ABI_Label_getText(@pointer, *a).parse('char32_t'); end
    module Private; def self.set_horizontal_alignment(*a);    Abi.call_arg_map! a; Abi.ABI_Label_setHorizontalAlignment(*a); end; end
    module Private; def self.get_horizontal_alignment(*a);    Abi.call_arg_map! a; Abi.ABI_Label_getHorizontalAlignment(*a); end; end
    module Private; def self.set_vertical_alignment(*a);    Abi.call_arg_map! a; Abi.ABI_Label_setVerticalAlignment(*a); end; end
    module Private; def self.get_vertical_alignment(*a);    Abi.call_arg_map! a; Abi.ABI_Label_getVerticalAlignment(*a); end; end
    module Private; def self.set_scrollbar_policy(*a);    Abi.call_arg_map! a; Abi.ABI_Label_setScrollbarPolicy(*a); end; end
    module Private; def self.get_scrollbar_policy(*a);    Abi.call_arg_map! a; Abi.ABI_Label_getScrollbarPolicy(*a); end; end
    def scrollbar_value=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_Label_setScrollbarValue(@pointer, *a); end
    def scrollbar_value(*a);    Abi.call_arg_map! a; Abi.ABI_Label_getScrollbarValue(@pointer, *a); end
    def auto_size=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_Label_setAutoSize(@pointer, *a); end
    def auto_size(*a);    Abi.call_arg_map! a; Abi.ABI_Label_getAutoSize(@pointer, *a).odd?; end
    def maximum_text_width=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_Label_setMaximumTextWidth(@pointer, *a); end
    def maximum_text_width(*a);    Abi.call_arg_map! a; Abi.ABI_Label_getMaximumTextWidth(@pointer, *a); end
    def ignore_mouse_events=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_Label_ignoreMouseEvents(@pointer, *a); end
    def ignoring_mouse_events?(*a);    Abi.call_arg_map! a; Abi.ABI_Label_ignoringMouseEvents(@pointer, *a).odd?; end
  end

  class RadioButton
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_RadioButton_new(*a)); initialized(); end
    def text=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_RadioButton_setText(@pointer, *a); end
    def text(*a);    Abi.call_arg_map! a; Abi.ABI_RadioButton_getText(@pointer, *a).parse('char32_t'); end
    def checked=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_RadioButton_setChecked(@pointer, *a); end
    def checked?(*a);    Abi.call_arg_map! a; Abi.ABI_RadioButton_isChecked(@pointer, *a).odd?; end
    def text_clickable=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_RadioButton_setTextClickable(@pointer, *a); end
    def text_clickable?(*a);    Abi.call_arg_map! a; Abi.ABI_RadioButton_isTextClickable(@pointer, *a).odd?; end
    def on_check(*a, &b);   Abi.call_arg_map! a; signal = Abi.ABI_RadioButton_onCheck(@pointer, *a).parse('SignalBool'); block_given? ? signal.connect(&b) : signal; end
    def on_check=(a);    signal = Abi.ABI_RadioButton_onCheck(@pointer).parse('SignalBool'); signal.connect(&a); end
    def on_uncheck(*a, &b);   Abi.call_arg_map! a; signal = Abi.ABI_RadioButton_onUncheck(@pointer, *a).parse('SignalBool'); block_given? ? signal.connect(&b) : signal; end
    def on_uncheck=(a);    signal = Abi.ABI_RadioButton_onUncheck(@pointer).parse('SignalBool'); signal.connect(&a); end
    def on_change(*a, &b);   Abi.call_arg_map! a; signal = Abi.ABI_RadioButton_onChange(@pointer, *a).parse('SignalBool'); block_given? ? signal.connect(&b) : signal; end
    def on_change=(a);    signal = Abi.ABI_RadioButton_onChange(@pointer).parse('SignalBool'); signal.connect(&a); end
  end

  class CheckBox
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_CheckBox_new(*a)); initialized(); end
  end

  class Knob
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_Knob_new(*a)); initialized(); end
    def start_rotation=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_Knob_setStartRotation(@pointer, *a); end
    def start_rotation(*a);    Abi.call_arg_map! a; Abi.ABI_Knob_getStartRotation(@pointer, *a); end
    def end_rotation=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_Knob_setEndRotation(@pointer, *a); end
    def end_rotation(*a);    Abi.call_arg_map! a; Abi.ABI_Knob_getEndRotation(@pointer, *a); end
    def minimum=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_Knob_setMinimum(@pointer, *a); end
    def minimum(*a);    Abi.call_arg_map! a; Abi.ABI_Knob_getMinimum(@pointer, *a); end
    def maximum=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_Knob_setMaximum(@pointer, *a); end
    def maximum(*a);    Abi.call_arg_map! a; Abi.ABI_Knob_getMaximum(@pointer, *a); end
    def value=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_Knob_setValue(@pointer, *a); end
    def value(*a);    Abi.call_arg_map! a; Abi.ABI_Knob_getValue(@pointer, *a); end
    def clockwise_turning=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_Knob_setClockwiseTurning(@pointer, *a); end
    def get_clockwise_turning?(*a);    Abi.call_arg_map! a; Abi.ABI_Knob_getClockwiseTurning(@pointer, *a); end
    def on_value_change(*a, &b);   Abi.call_arg_map! a; signal = Abi.ABI_Knob_onValueChange(@pointer, *a).parse('SignalFloat'); block_given? ? signal.connect(&b) : signal; end
    def on_value_change=(a);    signal = Abi.ABI_Knob_onValueChange(@pointer).parse('SignalFloat'); signal.connect(&a); end
  end

  class Container
    module Private; def self.get_widgets(*a);    Abi.call_arg_map! a; Abi.ABI_Container_get_widgets(*a); end; end
    def add(*a, &b);    Abi.call_arg_map! a; Abi.ABI_Container_add(@pointer, *a); end
    module Private; def self.get(*a);    Abi.call_arg_map! a; Abi.ABI_Container_get(*a).parse('Widget::Ptr'); end; end
    def remove(*a, &b);    Abi.call_arg_map! a; Abi.ABI_Container_remove(@pointer, *a).odd?; end
    def remove_all_widgets(*a, &b);    Abi.call_arg_map! a; Abi.ABI_Container_removeAllWidgets(@pointer, *a); end
    def inner_size(*a);    Abi.call_arg_map! a; Abi.ABI_Container_getInnerSize(@pointer, *a).parse('Vector2f'); end
    def child_widgets_offset(*a);    Abi.call_arg_map! a; Abi.ABI_Container_getChildWidgetsOffset(@pointer, *a).parse('Vector2f'); end
    def move_widget_to_front(*a, &b);    Abi.call_arg_map! a; Abi.ABI_Container_moveWidgetToFront(@pointer, *a); end
    def move_widget_to_back(*a, &b);    Abi.call_arg_map! a; Abi.ABI_Container_moveWidgetToBack(@pointer, *a); end
    def move_widget_forward(*a, &b);    Abi.call_arg_map! a; Abi.ABI_Container_moveWidgetForward(@pointer, *a); end
    def move_widget_backward(*a, &b);    Abi.call_arg_map! a; Abi.ABI_Container_moveWidgetBackward(@pointer, *a); end
    def widget_index=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_Container_setWidgetIndex(@pointer, *a).odd?; end
    def widget_index(*a);    Abi.call_arg_map! a; Abi.ABI_Container_getWidgetIndex(@pointer, *a); end
    def focused_child(*a);    Abi.call_arg_map! a; Abi.ABI_Container_getFocusedChild(@pointer, *a).parse('Widget::Ptr'); end
    def focused_leaf(*a);    Abi.call_arg_map! a; Abi.ABI_Container_getFocusedLeaf(@pointer, *a).parse('Widget::Ptr'); end
    def widget_at_position(*a);    Abi.call_arg_map! a; Abi.ABI_Container_getWidgetAtPosition(@pointer, *a).parse('Widget::Ptr'); end
    def focus_next_widget(*a, &b);    Abi.call_arg_map! a; Abi.ABI_Container_focusNextWidget(@pointer, *a).odd?; end
    def focus_previous_widget(*a, &b);    Abi.call_arg_map! a; Abi.ABI_Container_focusPreviousWidget(@pointer, *a).odd?; end
    def focused=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_Container_setFocused(@pointer, *a); end
  end

  class ChildWindow
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_ChildWindow_new(*a)); initialized(); end
    def client_size=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ChildWindow_setClientSize(@pointer, *a); end
    def client_size(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_getClientSize(@pointer, *a).parse('Vector2f'); end
    def maximum_size=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ChildWindow_setMaximumSize(@pointer, *a); end
    def maximum_size(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_getMaximumSize(@pointer, *a).parse('Vector2f'); end
    def minimum_size=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ChildWindow_setMinimumSize(@pointer, *a); end
    def minimum_size(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_getMinimumSize(@pointer, *a).parse('Vector2f'); end
    def title=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ChildWindow_setTitle(@pointer, *a); end
    def title(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_getTitle(@pointer, *a).parse('char32_t'); end
    def title_text_size=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ChildWindow_setTitleTextSize(@pointer, *a); end
    def title_text_size(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_getTitleTextSize(@pointer, *a); end
    module Private; def self.set_title_alignment(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_setTitleAlignment(*a); end; end
    module Private; def self.get_title_alignment(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_getTitleAlignment(*a); end; end
    module Private; def self.set_title_buttons(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_setTitleButtons(*a); end; end
    module Private; def self.get_title_buttons(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_getTitleButtons(*a); end; end
    def close(*a, &b);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_close(@pointer, *a); end
    def destroy(*a, &b);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_destroy(@pointer, *a); end
    def resizable=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ChildWindow_setResizable(@pointer, *a); end
    def resizable?(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_isResizable(@pointer, *a).odd?; end
    def position_locked=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ChildWindow_setPositionLocked(@pointer, *a); end
    def position_locked?(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_isPositionLocked(@pointer, *a).odd?; end
    def keep_in_parent=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ChildWindow_setKeepInParent(@pointer, *a); end
    def kept_in_parent?(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_isKeptInParent(@pointer, *a).odd?; end
    def on_mouse_press(*a, &b);   Abi.call_arg_map! a; signal = Abi.ABI_ChildWindow_onMousePress(@pointer, *a).parse('Signal'); block_given? ? signal.connect(&b) : signal; end
    def on_mouse_press=(a);    signal = Abi.ABI_ChildWindow_onMousePress(@pointer).parse('Signal'); signal.connect(&a); end
    def on_close(*a, &b);   Abi.call_arg_map! a; signal = Abi.ABI_ChildWindow_onClose(@pointer, *a).parse('Signal'); block_given? ? signal.connect(&b) : signal; end
    def on_close=(a);    signal = Abi.ABI_ChildWindow_onClose(@pointer).parse('Signal'); signal.connect(&a); end
    def on_minimize(*a, &b);   Abi.call_arg_map! a; signal = Abi.ABI_ChildWindow_onMinimize(@pointer, *a).parse('Signal'); block_given? ? signal.connect(&b) : signal; end
    def on_minimize=(a);    signal = Abi.ABI_ChildWindow_onMinimize(@pointer).parse('Signal'); signal.connect(&a); end
    def on_maximize(*a, &b);   Abi.call_arg_map! a; signal = Abi.ABI_ChildWindow_onMaximize(@pointer, *a).parse('Signal'); block_given? ? signal.connect(&b) : signal; end
    def on_maximize=(a);    signal = Abi.ABI_ChildWindow_onMaximize(@pointer).parse('Signal'); signal.connect(&a); end
    def on_escape_key_press(*a, &b);   Abi.call_arg_map! a; signal = Abi.ABI_ChildWindow_onEscapeKeyPress(@pointer, *a).parse('Signal'); block_given? ? signal.connect(&b) : signal; end
    def on_escape_key_press=(a);    signal = Abi.ABI_ChildWindow_onEscapeKeyPress(@pointer).parse('Signal'); signal.connect(&a); end
    def on_closing(*a, &b);   Abi.call_arg_map! a; signal = Abi.ABI_ChildWindow_onClosing(@pointer, *a).parse('SignalTyped<bool*>'); block_given? ? signal.connect(&b) : signal; end
    def on_closing=(a);    signal = Abi.ABI_ChildWindow_onClosing(@pointer).parse('SignalTyped<bool*>'); signal.connect(&a); end
  end

  class Group
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_Group_new(*a)); initialized(); end
  end

  class BoxLayout
    module Private; def self.get_by_index(*a);    Abi.call_arg_map! a; Abi.ABI_BoxLayout_getByIndex(*a).parse('Widget::Ptr'); end; end
    def insert(*a, &b);    Abi.call_arg_map! a; Abi.ABI_BoxLayout_insert(@pointer, *a); end
    module Private; def self.remove_by_index(*a);    Abi.call_arg_map! a; Abi.ABI_BoxLayout_removeByIndex(*a).odd?; end; end
  end

  class BoxLayoutRatios
    def add_space(*a, &b);    Abi.call_arg_map! a; Abi.ABI_BoxLayoutRatios_addSpace(@pointer, *a); end
    def insert_space(*a, &b);    Abi.call_arg_map! a; Abi.ABI_BoxLayoutRatios_insertSpace(@pointer, *a); end
    module Private; def self.set_ratio(*a);    Abi.call_arg_map! a; Abi.ABI_BoxLayoutRatios_setRatio(*a); end; end
    module Private; def self.set_ratio_by_index(*a);    Abi.call_arg_map! a; Abi.ABI_BoxLayoutRatios_setRatioByIndex(*a); end; end
    module Private; def self.get_ratio(*a);    Abi.call_arg_map! a; Abi.ABI_BoxLayoutRatios_getRatio(*a); end; end
    module Private; def self.get_ratio_by_index(*a);    Abi.call_arg_map! a; Abi.ABI_BoxLayoutRatios_getRatioByIndex(*a); end; end
  end

  class HorizontalLayout
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_HorizontalLayout_create(*a)); initialized(); end
  end

  class VerticalLayout
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_VerticalLayout_create(*a)); initialized(); end
  end

  class HorizontalWrap
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_HorizontalWrap_create(*a)); initialized(); end
  end

  class RadioButtonGroup
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_RadioButtonGroup_create(*a)); initialized(); end
    def uncheck_radio_buttons(*a, &b);    Abi.call_arg_map! a; Abi.ABI_RadioButtonGroup_uncheckRadioButtons(@pointer, *a); end
    def checked_radio_button(*a);    Abi.call_arg_map! a; Abi.ABI_RadioButtonGroup_getCheckedRadioButton(@pointer, *a).parse('RadioButton::Ptr'); end
  end

  class Panel
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_Panel_create(*a)); initialized(); end
    def on_mouse_press(*a, &b);   Abi.call_arg_map! a; signal = Abi.ABI_Panel_onMousePress(@pointer, *a).parse('SignalVector2f'); block_given? ? signal.connect(&b) : signal; end
    def on_mouse_press=(a);    signal = Abi.ABI_Panel_onMousePress(@pointer).parse('SignalVector2f'); signal.connect(&a); end
    def on_mouse_release(*a, &b);   Abi.call_arg_map! a; signal = Abi.ABI_Panel_onMouseRelease(@pointer, *a).parse('SignalVector2f'); block_given? ? signal.connect(&b) : signal; end
    def on_mouse_release=(a);    signal = Abi.ABI_Panel_onMouseRelease(@pointer).parse('SignalVector2f'); signal.connect(&a); end
    def on_click(*a, &b);   Abi.call_arg_map! a; signal = Abi.ABI_Panel_onClick(@pointer, *a).parse('SignalVector2f'); block_given? ? signal.connect(&b) : signal; end
    def on_click=(a);    signal = Abi.ABI_Panel_onClick(@pointer).parse('SignalVector2f'); signal.connect(&a); end
    def on_double_click(*a, &b);   Abi.call_arg_map! a; signal = Abi.ABI_Panel_onDoubleClick(@pointer, *a).parse('SignalVector2f'); block_given? ? signal.connect(&b) : signal; end
    def on_double_click=(a);    signal = Abi.ABI_Panel_onDoubleClick(@pointer).parse('SignalVector2f'); signal.connect(&a); end
    def on_right_mouse_press(*a, &b);   Abi.call_arg_map! a; signal = Abi.ABI_Panel_onRightMousePress(@pointer, *a).parse('SignalVector2f'); block_given? ? signal.connect(&b) : signal; end
    def on_right_mouse_press=(a);    signal = Abi.ABI_Panel_onRightMousePress(@pointer).parse('SignalVector2f'); signal.connect(&a); end
    def on_right_mouse_release(*a, &b);   Abi.call_arg_map! a; signal = Abi.ABI_Panel_onRightMouseRelease(@pointer, *a).parse('SignalVector2f'); block_given? ? signal.connect(&b) : signal; end
    def on_right_mouse_release=(a);    signal = Abi.ABI_Panel_onRightMouseRelease(@pointer).parse('SignalVector2f'); signal.connect(&a); end
    def on_right_click(*a, &b);   Abi.call_arg_map! a; signal = Abi.ABI_Panel_onRightClick(@pointer, *a).parse('SignalVector2f'); block_given? ? signal.connect(&b) : signal; end
    def on_right_click=(a);    signal = Abi.ABI_Panel_onRightClick(@pointer).parse('SignalVector2f'); signal.connect(&a); end
  end

  class ScrollablePanel
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_ScrollablePanel_create(*a)); initialized(); end
    def content_size=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ScrollablePanel_setContentSize(@pointer, *a); end
    def content_size(*a);    Abi.call_arg_map! a; Abi.ABI_ScrollablePanel_getContentSize(@pointer, *a).parse('Vector2f'); end
    def content_offset(*a);    Abi.call_arg_map! a; Abi.ABI_ScrollablePanel_getContentOffset(@pointer, *a).parse('Vector2f'); end
    def scrollbar_width(*a);    Abi.call_arg_map! a; Abi.ABI_ScrollablePanel_getScrollbarWidth(@pointer, *a); end
    def vertical_scrollbar_policy=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ScrollablePanel_setVerticalScrollbarPolicy(@pointer, *a); end
    def vertical_scrollbar_policy(*a);    Abi.call_arg_map! a; Abi.ABI_ScrollablePanel_getVerticalScrollbarPolicy(@pointer, *a); end
    def horizontal_scrollbar_policy=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ScrollablePanel_setHorizontalScrollbarPolicy(@pointer, *a); end
    def horizontal_scrollbar_policy(*a);    Abi.call_arg_map! a; Abi.ABI_ScrollablePanel_getHorizontalScrollbarPolicy(@pointer, *a); end
    def vertical_scroll_amount=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ScrollablePanel_setVerticalScrollAmount(@pointer, *a); end
    def vertical_scroll_amount(*a);    Abi.call_arg_map! a; Abi.ABI_ScrollablePanel_getVerticalScrollAmount(@pointer, *a); end
    def horizontal_scroll_amount=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ScrollablePanel_setHorizontalScrollAmount(@pointer, *a); end
    def horizontal_scroll_amount(*a);    Abi.call_arg_map! a; Abi.ABI_ScrollablePanel_getHorizontalScrollAmount(@pointer, *a); end
    def vertical_scrollbar_value=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ScrollablePanel_setVerticalScrollbarValue(@pointer, *a); end
    def vertical_scrollbar_value(*a);    Abi.call_arg_map! a; Abi.ABI_ScrollablePanel_getVerticalScrollbarValue(@pointer, *a); end
    def horizontal_scrollbar_value=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ScrollablePanel_setHorizontalScrollbarValue(@pointer, *a); end
    def horizontal_scrollbar_value(*a);    Abi.call_arg_map! a; Abi.ABI_ScrollablePanel_getHorizontalScrollbarValue(@pointer, *a); end
  end

  class Grid
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_Grid_make(*a)); initialized(); end
    def auto_size=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_Grid_setAutoSize(@pointer, *a); end
    def is_auto_size(*a);    Abi.call_arg_map! a; Abi.ABI_Grid_isAutoSize(@pointer, *a).odd?; end
    module Private; def self.set_widget_cell(*a);    Abi.call_arg_map! a; Abi.ABI_Grid_setWidgetCell(*a).odd?; end; end
    module Private; def self.get_widget(*a);    Abi.call_arg_map! a; Abi.ABI_Grid_getWidget(*a).parse('Widget::Ptr'); end; end
    module Private; def self.set_widget_padding(*a);    Abi.call_arg_map! a; Abi.ABI_Grid_setWidgetPadding(*a); end; end
    module Private; def self.get_widget_padding(*a);    Abi.call_arg_map! a; Abi.ABI_Grid_getWidgetPadding(*a).parse('Outline'); end; end
    module Private; def self.set_widget_alignment(*a);    Abi.call_arg_map! a; Abi.ABI_Grid_setWidgetAlignment(*a); end; end
    module Private; def self.get_widget_alignment(*a);    Abi.call_arg_map! a; Abi.ABI_Grid_getWidgetAlignment(*a); end; end
  end

  class ListView
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_ListView_make(*a)); initialized(); end
    def add_column(*a, &b);    Abi.call_arg_map! a; Abi.ABI_ListView_addColumn(@pointer, *a); end
    def column_text=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ListView_setColumnText(@pointer, *a); end
    def column_text(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getColumnText(@pointer, *a).parse('char32_t'); end
    def column_width=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ListView_setColumnWidth(@pointer, *a); end
    def column_width(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getColumnWidth(@pointer, *a); end
    module Private; def self.set_column_alignment(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_setColumnAlignment(*a); end; end
    module Private; def self.get_column_alignment(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getColumnAlignment(*a); end; end
    def remove_all_columns(*a, &b);    Abi.call_arg_map! a; Abi.ABI_ListView_removeAllColumns(@pointer, *a); end
    def column_count(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getColumnCount(@pointer, *a); end
    def header_height=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ListView_setHeaderHeight(@pointer, *a); end
    def header_height(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getHeaderHeight(@pointer, *a); end
    def current_header_height(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getCurrentHeaderHeight(@pointer, *a); end
    def header_visible=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ListView_setHeaderVisible(@pointer, *a); end
    def header_visible?(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_headerVisible(@pointer, *a).odd?; end
    module Private; def self.add_item(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_addItem(*a); end; end
    module Private; def self.insert_item(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_insertItem(*a); end; end
    module Private; def self.change_item(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_changeItem(*a).odd?; end; end
    module Private; def self.change_subitem(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_changeSubitem(*a).odd?; end; end
    module Private; def self.remove_item(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_removeItem(*a).odd?; end; end
    def remove_all_items(*a, &b);    Abi.call_arg_map! a; Abi.ABI_ListView_removeAllItems(@pointer, *a); end
    def selected_item=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ListView_setSelectedItem(@pointer, *a); end
    module Private; def self.set_selected_items(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_setSelectedItems(*a); end; end
    def deselect_items(*a, &b);    Abi.call_arg_map! a; Abi.ABI_ListView_deselectItems(@pointer, *a); end
    def selected_item_index(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getSelectedItemIndex(@pointer, *a); end
    module Private; def self.get_selected_item_indices(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getSelectedItemIndices(*a); end; end
    def multi_select=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ListView_setMultiSelect(@pointer, *a); end
    def multi_select?(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_multiSelect(@pointer, *a).odd?; end
    def set_item_icon(*a, &b);    Abi.call_arg_map! a; Abi.ABI_ListView_setItemIcon(@pointer, *a); end
    def item_icon(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getItemIcon(@pointer, *a).parse('Texture'); end
    def item_count(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getItemCount(@pointer, *a); end
    module Private; def self.get_item_row(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getItemRow(*a); end; end
    def item_cell(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getItemCell(@pointer, *a).parse('char32_t'); end
    module Private; def self.get_item_rows(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getItemRows(*a); end; end
    def item_height=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ListView_setItemHeight(@pointer, *a); end
    def item_height(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getItemHeight(@pointer, *a); end
    def header_text_size=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ListView_setHeaderTextSize(@pointer, *a); end
    def header_text_size(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getHeaderTextSize(@pointer, *a); end
    def separator_width=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ListView_setSeparatorWidth(@pointer, *a); end
    def separator_width(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getSeparatorWidth(@pointer, *a); end
    def header_separator_height=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ListView_setHeaderSeparatorHeight(@pointer, *a); end
    def header_separator_height(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getHeaderSeparatorHeight(@pointer, *a); end
    def grid_lines_width=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ListView_setGridLinesWidth(@pointer, *a); end
    def grid_lines_width(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getGridLinesWidth(@pointer, *a); end
    def auto_scroll=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ListView_setAutoScroll(@pointer, *a); end
    def auto_scroll?(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_autoScroll(@pointer, *a).odd?; end
    def show_vertical_grid_lines=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ListView_setShowVerticalGridLines(@pointer, *a); end
    def show_vertical_grid_lines?(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_showVerticalGridLines(@pointer, *a).odd?; end
    def show_horizontal_grid_lines=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ListView_setShowHorizontalGridLines(@pointer, *a); end
    def show_horizontal_grid_lines?(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_showHorizontalGridLines(@pointer, *a).odd?; end
    def expand_last_column=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ListView_setExpandLastColumn(@pointer, *a); end
    def expand_last_column?(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_expandLastColumn(@pointer, *a).odd?; end
    def vertical_scrollbar_policy=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ListView_setVerticalScrollbarPolicy(@pointer, *a); end
    def vertical_scrollbar_policy(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getVerticalScrollbarPolicy(@pointer, *a); end
    def horizontal_scrollbar_policy=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ListView_setHorizontalScrollbarPolicy(@pointer, *a); end
    def horizontal_scrollbar_policy(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getHorizontalScrollbarPolicy(@pointer, *a); end
    def vertical_scrollbar_value=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ListView_setVerticalScrollbarValue(@pointer, *a); end
    def vertical_scrollbar_value(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getVerticalScrollbarValue(@pointer, *a); end
    def horizontal_scrollbar_value=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ListView_setHorizontalScrollbarValue(@pointer, *a); end
    def horizontal_scrollbar_value(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getHorizontalScrollbarValue(@pointer, *a); end
    def fixed_icon_size=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ListView_setFixedIconSize(@pointer, *a); end
    def fixed_icon_size(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getFixedIconSize(@pointer, *a).parse('Vector2f'); end
    def resizable_columns=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ListView_setResizableColumns(@pointer, *a); end
    def resizable_columns?(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_resizableColumns(@pointer, *a).odd?; end
    def on_item_select(*a, &b);   Abi.call_arg_map! a; signal = Abi.ABI_ListView_onItemSelect(@pointer, *a).parse('SignalInt'); block_given? ? signal.connect(&b) : signal; end
    def on_item_select=(a);    signal = Abi.ABI_ListView_onItemSelect(@pointer).parse('SignalInt'); signal.connect(&a); end
    def on_double_click(*a, &b);   Abi.call_arg_map! a; signal = Abi.ABI_ListView_onDoubleClick(@pointer, *a).parse('SignalInt'); block_given? ? signal.connect(&b) : signal; end
    def on_double_click=(a);    signal = Abi.ABI_ListView_onDoubleClick(@pointer).parse('SignalInt'); signal.connect(&a); end
    def on_right_click(*a, &b);   Abi.call_arg_map! a; signal = Abi.ABI_ListView_onRightClick(@pointer, *a).parse('SignalInt'); block_given? ? signal.connect(&b) : signal; end
    def on_right_click=(a);    signal = Abi.ABI_ListView_onRightClick(@pointer).parse('SignalInt'); signal.connect(&a); end
    def on_header_click(*a, &b);   Abi.call_arg_map! a; signal = Abi.ABI_ListView_onHeaderClick(@pointer, *a).parse('SignalInt'); block_given? ? signal.connect(&b) : signal; end
    def on_header_click=(a);    signal = Abi.ABI_ListView_onHeaderClick(@pointer).parse('SignalInt'); signal.connect(&a); end
  end

  class ComboBox
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_ComboBox_make(*a)); initialized(); end
    def items_to_display=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ComboBox_setItemsToDisplay(@pointer, *a); end
    def items_to_display(*a);    Abi.call_arg_map! a; Abi.ABI_ComboBox_getItemsToDisplay(@pointer, *a); end
    def add_item(*a, &b);    Abi.call_arg_map! a; Abi.ABI_ComboBox_addItem(@pointer, *a); end
    module Private; def self.set_selected_item_by_id(*a);    Abi.call_arg_map! a; Abi.ABI_ComboBox_setSelectedItemById(*a).odd?; end; end
    module Private; def self.set_selected_item_by_index(*a);    Abi.call_arg_map! a; Abi.ABI_ComboBox_setSelectedItemByIndex(*a).odd?; end; end
    def deselect_item(*a, &b);    Abi.call_arg_map! a; Abi.ABI_ComboBox_deselectItem(@pointer, *a); end
    module Private; def self.remove_item_by_id(*a);    Abi.call_arg_map! a; Abi.ABI_ComboBox_removeItemById(*a).odd?; end; end
    module Private; def self.remove_item_by_index(*a);    Abi.call_arg_map! a; Abi.ABI_ComboBox_removeItemByIndex(*a).odd?; end; end
    def remove_all_items(*a, &b);    Abi.call_arg_map! a; Abi.ABI_ComboBox_removeAllItems(@pointer, *a); end
    module Private; def self.get_item_by_id(*a);    Abi.call_arg_map! a; Abi.ABI_ComboBox_getItemById(*a).parse('char32_t'); end; end
    module Private; def self.get_selected_item_id(*a);    Abi.call_arg_map! a; Abi.ABI_ComboBox_getSelectedItemId(*a).parse('char32_t'); end; end
    module Private; def self.change_item_by_id(*a);    Abi.call_arg_map! a; Abi.ABI_ComboBox_changeItemById(*a).odd?; end; end
    module Private; def self.change_item_by_index(*a);    Abi.call_arg_map! a; Abi.ABI_ComboBox_changeItemByIndex(*a).odd?; end; end
    def item_count(*a);    Abi.call_arg_map! a; Abi.ABI_ComboBox_getItemCount(@pointer, *a); end
    module Private; def self.get_item_ids(*a);    Abi.call_arg_map! a; Abi.ABI_ComboBox_getItemIds(*a); end; end
    def maximum_items=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ComboBox_setMaximumItems(@pointer, *a); end
    def maximum_items(*a);    Abi.call_arg_map! a; Abi.ABI_ComboBox_getMaximumItems(@pointer, *a); end
    def default_text=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ComboBox_setDefaultText(@pointer, *a); end
    def default_text(*a);    Abi.call_arg_map! a; Abi.ABI_ComboBox_getDefaultText(@pointer, *a).parse('char32_t'); end
    def expand_direction=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ComboBox_setExpandDirection(@pointer, *a); end
    def expand_direction(*a);    Abi.call_arg_map! a; Abi.ABI_ComboBox_getExpandDirection(@pointer, *a); end
    module Private; def self.contains_id(*a);    Abi.call_arg_map! a; Abi.ABI_ComboBox_containsId(*a).odd?; end; end
    def change_item_on_scroll=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ComboBox_setChangeItemOnScroll(@pointer, *a); end
    def change_item_on_scroll(*a);    Abi.call_arg_map! a; Abi.ABI_ComboBox_getChangeItemOnScroll(@pointer, *a).odd?; end
    def on_item_select(*a, &b);   Abi.call_arg_map! a; signal = Abi.ABI_ComboBox_onItemSelect(@pointer, *a).parse('SignalItem'); block_given? ? signal.connect(&b) : signal; end
    def on_item_select=(a);    signal = Abi.ABI_ComboBox_onItemSelect(@pointer).parse('SignalItem'); signal.connect(&a); end
  end

  class ColorPicker
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_ColorPicker_new(*a)); initialized(); end
    def color=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_ColorPicker_setColor(@pointer, *a); end
    def color(*a);    Abi.call_arg_map! a; Abi.ABI_ColorPicker_getColor(@pointer, *a).parse('Color'); end
    def on_color_change(*a, &b);   Abi.call_arg_map! a; signal = Abi.ABI_ColorPicker_onColorChange(@pointer, *a).parse('SignalColor'); block_given? ? signal.connect(&b) : signal; end
    def on_color_change=(a);    signal = Abi.ABI_ColorPicker_onColorChange(@pointer).parse('SignalColor'); signal.connect(&a); end
    def on_ok_press(*a, &b);   Abi.call_arg_map! a; signal = Abi.ABI_ColorPicker_onOkPress(@pointer, *a).parse('SignalColor'); block_given? ? signal.connect(&b) : signal; end
    def on_ok_press=(a);    signal = Abi.ABI_ColorPicker_onOkPress(@pointer).parse('SignalColor'); signal.connect(&a); end
  end

  class MessageBox
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_MessageBox_new(*a)); initialized(); end
    def text=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_MessageBox_setText(@pointer, *a); end
    def text(*a);    Abi.call_arg_map! a; Abi.ABI_MessageBox_getText(@pointer, *a).parse('char32_t'); end
    module Private; def self.add_button(*a);    Abi.call_arg_map! a; Abi.ABI_MessageBox_addButton(*a); end; end
    module Private; def self.get_buttons(*a);    Abi.call_arg_map! a; Abi.ABI_MessageBox_getButtons(*a); end; end
    module Private; def self.set_label_alignment(*a);    Abi.call_arg_map! a; Abi.ABI_MessageBox_setLabelAlignment(*a); end; end
    module Private; def self.get_label_alignment(*a);    Abi.call_arg_map! a; Abi.ABI_MessageBox_getLabelAlignment(*a); end; end
    module Private; def self.set_button_alignment(*a);    Abi.call_arg_map! a; Abi.ABI_MessageBox_setButtonAlignment(*a); end; end
    module Private; def self.get_button_alignment(*a);    Abi.call_arg_map! a; Abi.ABI_MessageBox_getButtonAlignment(*a); end; end
    def on_button_press(*a, &b);   Abi.call_arg_map! a; signal = Abi.ABI_MessageBox_onButtonPress(@pointer, *a).parse('SignalString'); block_given? ? signal.connect(&b) : signal; end
    def on_button_press=(a);    signal = Abi.ABI_MessageBox_onButtonPress(@pointer).parse('SignalString'); signal.connect(&a); end
  end

  class Picture
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_Picture_new(*a)); initialized(); end
    def ignore_mouse_events=(a);    a = a.is_a?(Array) ? a : [a]; Abi.call_arg_map! a; Abi.ABI_Picture_ignoreMouseEvents(@pointer, *a); end
    def ignoring_mouse_events?(*a);    Abi.call_arg_map! a; Abi.ABI_Picture_isIgnoringMouseEvents(@pointer, *a).odd?; end
    def on_double_click(*a, &b);   Abi.call_arg_map! a; signal = Abi.ABI_Picture_onDoubleClick(@pointer, *a).parse('SignalVector2f'); block_given? ? signal.connect(&b) : signal; end
    def on_double_click=(a);    signal = Abi.ABI_Picture_onDoubleClick(@pointer).parse('SignalVector2f'); signal.connect(&a); end
  end
end
