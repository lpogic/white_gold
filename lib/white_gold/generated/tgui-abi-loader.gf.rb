## File generated by tgui-update.rb
## Manual changes not recommended

module Tgui
  module Abi
    extern 'void ABI_STATIC_Util_free(void* pointer)'
    extern 'void* ABI_Color_new(int r, int g, int b, int a)'
    extern 'int ABI_Color_get_red(Color* self)'
    extern 'int ABI_Color_get_green(Color* self)'
    extern 'int ABI_Color_get_blue(Color* self)'
    extern 'int ABI_Color_get_alpha(Color* self)'
    extern 'void* ABI_Color_applyOpacity(Color* self, float fade)'
    extern 'void* ABI_Outline_new(char* left, char* right, char* top, char* bottom)'
    extern 'float ABI_Outline_getLeft(Outline* self)'
    extern 'float ABI_Outline_getRight(Outline* self)'
    extern 'float ABI_Outline_getTop(Outline* self)'
    extern 'float ABI_Outline_getBottom(Outline* self)'
    extern 'int ABI_Signal_connect(Signal* self, void(*f)())'
    extern 'int ABI_Signal_disconnect(Signal* self, int f)'
    extern 'void ABI_Signal_setEnabled(Signal* self, int enabled)'
    extern 'int ABI_Signal_isEnabled(Signal* self)'
    extern 'int ABI_SignalString_connect(SignalString* self, void(*f)(const char32_t*))'
    extern 'int ABI_SignalBool_connect(SignalBool* self, void(*f)(int))'
    extern 'int ABI_SignalInt_connect(SignalInt* self, void(*f)(int))'
    extern 'int ABI_SignalUInt_connect(SignalUInt* self, void(*f)(unsigned int))'
    extern 'int ABI_SignalFloat_connect(SignalFloat* self, void(*f)(float))'
    extern 'int ABI_SignalRange_connect(SignalRange* self, void(*f)(float, float))'
    extern 'int ABI_SignalPointer_connect(SignalTyped<void*>* self, void(*f)(void*))'
    extern 'int ABI_SignalColor_connect(SignalColor* self, void(*f)(void*))'
    extern 'int ABI_SignalVector2f_connect(SignalVector2f* self, void(*f)(void*))'
    extern 'int ABI_SignalShowEffect_connect(SignalShowEffect* self, void(*f)(int, int))'
    extern 'int ABI_SignalAnimationType_connect(SignalAnimationType* self, void(*f)(int))'
    extern 'int ABI_SignalItem_connect(SignalItem* self, void(*f)(const char32_t*, const char32_t*))'
    extern 'int ABI_SignalItemHierarchy_connect(SignalItemHierarchy* self, void(*f)(void*))'
    extern 'void ABI_STATIC_SignalItemHierarchy_fetchPath(std::vector< String >* load, void(*f)(const char32_t*))'
    extern 'int ABI_SignalTypedIntBoolPtr_connect(SignalTypedIntBoolPtr* self, void(*f)(int, bool*))'
    extern 'int ABI_SignalTypedSizeT_connect(SignalTypedSizeT* self, void(*f)(int))'
    extern 'int ABI_SignalPanelListBoxItem_connect(SignalPanelListBoxItem* self, void(*f)(const char32_t*))'
    extern 'void* ABI_Window_new()'
    extern 'void ABI_Window_close(sf::WindowBase* self)'
    extern 'int ABI_Window_isOpen(sf::WindowBase* self)'
    extern 'void ABI_Window_setTitle(sf::WindowBase* self, char* title)'
    extern 'void ABI_BackendGui_setTextSize(BackendGui* self, int textSize)'
    extern 'int ABI_BackendGui_getTextSize(BackendGui* self)'
    extern 'void ABI_BackendGui_setAbsoluteView(BackendGui* self, int x, int y, int w, int h)'
    extern 'void ABI_BackendGui_setRelativeView(BackendGui* self, float x, float y, float w, float h)'
    extern 'void ABI_BackendGui_getView(BackendGui* self, void(*f)(float, float, float, float))'
    extern 'void ABI_BackendGui_setAbsoluteViewport(BackendGui* self, int x, int y, int w, int h)'
    extern 'void ABI_BackendGui_setRelativeViewport(BackendGui* self, float x, float y, float w, float h)'
    extern 'void ABI_BackendGui_getViewport(BackendGui* self, void(*f)(float, float, float, float))'
    extern 'void ABI_BackendGui_setTabKeyUsageEnabled(BackendGui* self, int enabled)'
    extern 'int ABI_BackendGui_isTabKeyUsageEnabled(BackendGui* self)'
    extern 'void ABI_BackendGui_setFont(BackendGui* self, Font* font)'
    extern 'void* ABI_BackendGui_getFont(BackendGui* self)'
    extern 'void ABI_BackendGui_unfocusAllWidgets(BackendGui* self)'
    extern 'void ABI_BackendGui_setOpacity(BackendGui* self, float opacity)'
    extern 'float ABI_BackendGui_getOpacity(BackendGui* self)'
    extern 'void ABI_BackendGui_setOverrideMouseCursor(BackendGui* self, int mouseCursor)'
    extern 'void ABI_BackendGui_restoreOverrideMouseCursor(BackendGui* self)'
    extern 'void ABI_BackendGui_mapPixelToCoords(BackendGui* self, int x, int y, void(*f)(float, float))'
    extern 'void ABI_BackendGui_mapCoordsToPixel(BackendGui* self, float x, float y, void(*f)(float, float))'
    extern 'void* ABI_BackendGui_onViewChange(BackendGui* self)'
    extern 'void* ABI_Font_new(char * id)'
    extern 'void* ABI_Gui_new(sf::RenderWindow* window)'
    extern 'int ABI_Gui_isActive(Gui* self)'
    extern 'void ABI_Gui_pollEvents(Gui* self)'
    extern 'void ABI_Gui_draw(Gui* self)'
    extern 'void ABI_Gui_add(Gui* self, Widget::Ptr* widget, const char* name)'
    extern 'void ABI_Gui_remove(Gui* self, Widget::Ptr* widget)'
    extern 'void ABI_Gui_removeAll(Gui* self)'
    extern 'void ABI_Gui_mainLoop(Gui* self)'
    extern 'void* ABI_Gui_getWidget(Gui* self, const char* name)'
    extern 'void ABI_Gui_setClearColor(Gui* self, Color* color)'
    extern 'void ABI_Gui_setClipboard(Gui* self, char* text)'
    extern 'void* ABI_Gui_getClipboard(Gui* self)'
    extern 'void ABI_STATIC_Theme_setDefault(char* theme)'
    extern 'void* ABI_STATIC_Theme_getDefault()'
    extern 'void ABI_STATIC_Theme_finalizer(std::shared_ptr<Theme>* pointer)'
    extern 'void ABI_Theme_load(std::shared_ptr<Theme>* self, char* primary)'
    extern 'void* ABI_Texture_new(char* id, int partRectX, int partRectY, int partRectW, int partRectH, int middlePartX, int middlePartY, int middlePartW, int middlePartH, int smooth)'
    extern 'void* ABI_Texture_getId(Texture* self)'
    extern 'void* ABI_Texture_getImageSize(Texture* self)'
    extern 'void* ABI_Texture_getPartRect(Texture* self)'
    extern 'void ABI_Texture_setColor(Texture* self, int red, int green, int blue)'
    extern 'void* ABI_Texture_getColor(Texture* self)'
    extern 'int ABI_Texture_isSmooth(Texture* self)'
    extern 'void ABI_STATIC_Texture_setDefaultSmooth(int smooth)'
    extern 'int ABI_STATIC_Texture_getDefaultSmooth()'
    extern 'void ABI_STATIC_Widget_finalizer(std::shared_ptr<Widget>* pointer)'
    extern 'void* ABI_STATIC_Widget_getUnshared(std::shared_ptr<Widget>* pointer)'
    extern 'void* ABI_STATIC_Widget_getType(Widget::Ptr* self)'
    extern 'void* ABI_Widget_getName(Widget::Ptr* self)'
    extern 'void ABI_Widget_setSize(Widget::Ptr* self, const char* width, const char* height)'
    extern 'void* ABI_Widget_getSize(Widget::Ptr* self)'
    extern 'void* ABI_Widget_getFullSize(Widget::Ptr* self)'
    extern 'void ABI_Widget_setPosition(Widget::Ptr* self, const char* x, const char* y)'
    extern 'void* ABI_Widget_getPosition(Widget::Ptr* self)'
    extern 'void* ABI_Widget_getAbsolutePosition(Widget::Ptr* self)'
    extern 'void ABI_Widget_setTextSize(Widget::Ptr* self, int textSize)'
    extern 'int ABI_Widget_getTextSize(Widget::Ptr* self)'
    extern 'void ABI_Widget_setWidth(Widget::Ptr* self, char* width)'
    extern 'void ABI_Widget_setHeight(Widget::Ptr* self, char* height)'
    extern 'void ABI_Widget_setVisible(Widget::Ptr* self, int visible)'
    extern 'int ABI_Widget_isVisible(Widget::Ptr* self)'
    extern 'void ABI_Widget_setEnabled(Widget::Ptr* self, int enabled)'
    extern 'int ABI_Widget_isEnabled(Widget::Ptr* self)'
    extern 'void ABI_Widget_setFocused(Widget::Ptr* self, int focused)'
    extern 'int ABI_Widget_isFocused(Widget::Ptr* self)'
    extern 'void ABI_Widget_setFocusable(Widget::Ptr* self, int focusable)'
    extern 'int ABI_Widget_isFocusable(Widget::Ptr* self)'
    extern 'int ABI_Widget_canGainFocus(Widget::Ptr* self)'
    extern 'int ABI_Widget_isContainer(Widget::Ptr* self)'
    extern 'void ABI_Widget_setToolTip(Widget::Ptr* self, Widget::Ptr* tooltip)'
    extern 'void* ABI_Widget_getToolTip(Widget::Ptr* self)'
    extern 'void ABI_Widget_setMouseCursor(Widget::Ptr* self, int cursor)'
    extern 'int ABI_Widget_getMouseCursor(Widget::Ptr* self)'
    extern 'int ABI_Widget_isMouseDown(Widget::Ptr* self)'
    extern 'void ABI_Widget_showWithEffect(Widget::Ptr* self, int effect, int duration)'
    extern 'void ABI_Widget_hideWithEffect(Widget::Ptr* self, int effect, int duration)'
    extern 'void ABI_Widget_moveWithAnimation(Widget::Ptr* self, char* x, char* y, int duration)'
    extern 'void ABI_Widget_resizeWithAnimation(Widget::Ptr* self, char* width, char* height, int duration)'
    extern 'int ABI_Widget_isAnimationPlaying(Widget::Ptr* self)'
    extern 'void ABI_Widget_moveToFront(Widget::Ptr* self)'
    extern 'void ABI_Widget_moveToBack(Widget::Ptr* self)'
    extern 'void ABI_Widget_finishAllAnimations(Widget::Ptr* self)'
    extern 'void ABI_Widget_leftMousePressed(Widget::Ptr* self, float x, float y)'
    extern 'void ABI_Widget_leftMouseReleased(Widget::Ptr* self, float x, float y)'
    extern 'void ABI_Widget_rightMousePressed(Widget::Ptr* self, float x, float y)'
    extern 'void ABI_Widget_rightMouseReleased(Widget::Ptr* self, float x, float y)'
    extern 'void ABI_Widget_mouseMoved(Widget::Ptr* self, float x, float y)'
    extern 'void ABI_Widget_keyPressed(Widget::Ptr* self, int keyCode, int alt, int control, int shift, int system)'
    extern 'void ABI_Widget_textEntered(Widget::Ptr* self, int character)'
    extern 'void ABI_Widget_scrolled(Widget::Ptr* self, float delta, float x, float y, int touch)'
    extern 'void ABI_Widget_askToolTip(Widget::Ptr* self, float x, float y)'
    extern 'void ABI_Widget_setWidgetName(Widget::Ptr* self, char * name)'
    extern 'void* ABI_Widget_getWidgetName(Widget::Ptr* self)'
    extern 'void* ABI_Widget_onPositionChange(Widget::Ptr* self)'
    extern 'void* ABI_Widget_onSizeChange(Widget::Ptr* self)'
    extern 'void ABI_Widget_setColorRendererProperty(Widget::Ptr* self, char* property, Color* value)'
    extern 'void* ABI_Widget_getColorRendererProperty(Widget::Ptr* self, char* property)'
    extern 'void ABI_Widget_setStringRendererProperty(Widget::Ptr* self, char* property, char* value)'
    extern 'void* ABI_Widget_getStringRendererProperty(Widget::Ptr* self, char* property)'
    extern 'void ABI_Widget_setFontRendererProperty(Widget::Ptr* self, char* property, Font* value)'
    extern 'void* ABI_Widget_getFontRendererProperty(Widget::Ptr* self, char* property)'
    extern 'void ABI_Widget_setBooleanRendererProperty(Widget::Ptr* self, char* property, int value)'
    extern 'int ABI_Widget_getBooleanRendererProperty(Widget::Ptr* self, char* property)'
    extern 'void ABI_Widget_setFloatRendererProperty(Widget::Ptr* self, char* property, float value)'
    extern 'float ABI_Widget_getFloatRendererProperty(Widget::Ptr* self, char* property)'
    extern 'void ABI_Widget_setOutlineRendererProperty(Widget::Ptr* self, char* property, Outline* value)'
    extern 'void* ABI_Widget_getOutlineRendererProperty(Widget::Ptr* self, char* property)'
    extern 'void ABI_Widget_setTextureRendererProperty(Widget::Ptr* self, char* property, Texture* value)'
    extern 'void* ABI_Widget_getTextureRendererProperty(Widget::Ptr* self, char* property)'
    extern 'void ABI_Widget_setTextStylesRendererProperty(Widget::Ptr* self, char* property, int value)'
    extern 'int ABI_Widget_getTextStylesRendererProperty(Widget::Ptr* self, char* property)'
    extern 'void* ABI_Widget_onFocus(Widget::Ptr* self)'
    extern 'void* ABI_Widget_onUnfocus(Widget::Ptr* self)'
    extern 'void* ABI_Widget_onMouseEnter(Widget::Ptr* self)'
    extern 'void* ABI_Widget_onMouseLeave(Widget::Ptr* self)'
    extern 'void* ABI_Widget_onShowEffectFinish(Widget::Ptr* self)'
    extern 'void* ABI_Widget_onAnimationFinish(Widget::Ptr* self)'
    extern 'void* ABI_ClickableWidget_onMousePress(ClickableWidget::Ptr* self)'
    extern 'void* ABI_ClickableWidget_onMouseRelease(ClickableWidget::Ptr* self)'
    extern 'void* ABI_ClickableWidget_onClick(ClickableWidget::Ptr* self)'
    extern 'void* ABI_ClickableWidget_onRightMousePress(ClickableWidget::Ptr* self)'
    extern 'void* ABI_ClickableWidget_onRightMouseRelease(ClickableWidget::Ptr* self)'
    extern 'void* ABI_ClickableWidget_onRightClick(ClickableWidget::Ptr* self)'
    extern 'void ABI_ButtonBase_setTextPosition(ButtonBase::Ptr* self, const char* position, const char* origin)'
    extern 'void ABI_ButtonBase_setText(ButtonBase::Ptr* self, const char* text)'
    extern 'void* ABI_ButtonBase_getText(ButtonBase::Ptr* self)'
    extern 'void* ABI_Button_new()'
    extern 'void* ABI_Button_onPress(Button::Ptr* self)'
    extern 'void* ABI_BitmapButton_new()'
    extern 'void ABI_BitmapButton_setImage(BitmapButton::Ptr* self, Texture* texture)'
    extern 'void* ABI_BitmapButton_getImage(BitmapButton::Ptr* self)'
    extern 'void ABI_BitmapButton_setImageScaling(BitmapButton::Ptr* self, float relativeHeight)'
    extern 'float ABI_BitmapButton_getImageScaling(BitmapButton::Ptr* self)'
    extern 'void* ABI_EditBox_new()'
    extern 'void ABI_EditBox_setText(EditBox::Ptr* self, const char* text)'
    extern 'void* ABI_EditBox_getText(EditBox::Ptr* self)'
    extern 'void ABI_EditBox_setDefaultText(EditBox::Ptr* self, const char* text)'
    extern 'void* ABI_EditBox_getDefaultText(EditBox::Ptr* self)'
    extern 'void ABI_EditBox_selectText(EditBox::Ptr* self, int start, int length)'
    extern 'void* ABI_EditBox_getSelectedText(EditBox::Ptr* self)'
    extern 'void ABI_EditBox_setPasswordCharacter(EditBox::Ptr* self, char* character)'
    extern 'char ABI_EditBox_getPasswordCharacter(EditBox::Ptr* self)'
    extern 'void ABI_EditBox_setMaximumCharacters(EditBox::Ptr* self, unsigned int max)'
    extern 'unsigned int ABI_EditBox_getMaximumCharacters(EditBox::Ptr* self)'
    extern 'void ABI_EditBox_setAlignment(EditBox::Ptr* self, int alignment)'
    extern 'int ABI_EditBox_getAlignment(EditBox::Ptr* self)'
    extern 'void ABI_EditBox_limitTextWidth(EditBox::Ptr* self, int limit)'
    extern 'int ABI_EditBox_isTextWidthLimited(EditBox::Ptr* self)'
    extern 'void ABI_EditBox_setReadOnly(EditBox::Ptr* self, int read_only)'
    extern 'int ABI_EditBox_isReadOnly(EditBox::Ptr* self)'
    extern 'void ABI_EditBox_setCaretPosition(EditBox::Ptr* self, int caretPosition)'
    extern 'int ABI_EditBox_getCaretPosition(EditBox::Ptr* self)'
    extern 'void ABI_EditBox_setSuffix(EditBox::Ptr* self, char* suffix)'
    extern 'void* ABI_EditBox_getSuffix(EditBox::Ptr* self)'
    extern 'void* ABI_EditBox_onTextChange(EditBox::Ptr* self)'
    extern 'void* ABI_EditBox_onReturnKeyPress(EditBox::Ptr* self)'
    extern 'void* ABI_EditBox_onReturnOrUnfocus(EditBox::Ptr* self)'
    extern 'void* ABI_EditBox_onCaretPositionChange(EditBox::Ptr* self)'
    extern 'void* ABI_Label_new()'
    extern 'void ABI_Label_setText(Label::Ptr* self, char* text)'
    extern 'void* ABI_Label_getText(Label::Ptr* self)'
    extern 'void ABI_Label_setHorizontalAlignment(Label::Ptr* self, int alignment)'
    extern 'int ABI_Label_getHorizontalAlignment(Label::Ptr* self)'
    extern 'void ABI_Label_setVerticalAlignment(Label::Ptr* self, int alignment)'
    extern 'int ABI_Label_getVerticalAlignment(Label::Ptr* self)'
    extern 'void ABI_Label_setScrollbarPolicy(Label::Ptr* self, int policy)'
    extern 'int ABI_Label_getScrollbarPolicy(Label::Ptr* self)'
    extern 'void ABI_Label_setScrollbarValue(Label::Ptr* self, unsigned int value)'
    extern 'int ABI_Label_getScrollbarValue(Label::Ptr* self)'
    extern 'void ABI_Label_setAutoSize(Label::Ptr* self, int auto_size)'
    extern 'int ABI_Label_getAutoSize(Label::Ptr* self)'
    extern 'void ABI_Label_setMaximumTextWidth(Label::Ptr* self, float maximumWidth)'
    extern 'float ABI_Label_getMaximumTextWidth(Label::Ptr* self)'
    extern 'void ABI_Label_ignoreMouseEvents(Label::Ptr* self, int ignore)'
    extern 'int ABI_Label_ignoringMouseEvents(Label::Ptr* self)'
    extern 'void* ABI_RadioButton_new()'
    extern 'void ABI_RadioButton_setText(RadioButton::Ptr* self, char* text)'
    extern 'void* ABI_RadioButton_getText(RadioButton::Ptr* self)'
    extern 'void ABI_RadioButton_setChecked(RadioButton::Ptr* self, int checked)'
    extern 'int ABI_RadioButton_isChecked(RadioButton::Ptr* self)'
    extern 'void ABI_RadioButton_setTextClickable(RadioButton::Ptr* self, int textClickable)'
    extern 'int ABI_RadioButton_isTextClickable(RadioButton::Ptr* self)'
    extern 'void* ABI_RadioButton_onCheck(RadioButton::Ptr* self)'
    extern 'void* ABI_RadioButton_onUncheck(RadioButton::Ptr* self)'
    extern 'void* ABI_RadioButton_onChange(RadioButton::Ptr* self)'
    extern 'void* ABI_CheckBox_new()'
    extern 'void* ABI_Knob_new()'
    extern 'void ABI_Knob_setStartRotation(Knob::Ptr* self, float startRotation)'
    extern 'float ABI_Knob_getStartRotation(Knob::Ptr* self)'
    extern 'void ABI_Knob_setEndRotation(Knob::Ptr* self, float endRotation)'
    extern 'float ABI_Knob_getEndRotation(Knob::Ptr* self)'
    extern 'void ABI_Knob_setMinimum(Knob::Ptr* self, float minimum)'
    extern 'float ABI_Knob_getMinimum(Knob::Ptr* self)'
    extern 'void ABI_Knob_setMaximum(Knob::Ptr* self, float maximum)'
    extern 'float ABI_Knob_getMaximum(Knob::Ptr* self)'
    extern 'void ABI_Knob_setValue(Knob::Ptr* self, float value)'
    extern 'float ABI_Knob_getValue(Knob::Ptr* self)'
    extern 'void ABI_Knob_setClockwiseTurning(Knob::Ptr* self, int clockwiseTurning)'
    extern 'float ABI_Knob_getClockwiseTurning(Knob::Ptr* self)'
    extern 'void* ABI_Knob_onValueChange(Knob::Ptr* self)'
    extern 'void* ABI_ChatBox_new()'
    extern 'void ABI_ChatBox_addLine(ChatBox::Ptr* self, char* text, Color* color, int style)'
    extern 'void* ABI_ChatBox_getLine(ChatBox::Ptr* self, int lineIndex)'
    extern 'void* ABI_ChatBox_getLineColor(ChatBox::Ptr* self, int lineIndex)'
    extern 'int ABI_ChatBox_getLineTextStyle(ChatBox::Ptr* self, int lineIndex)'
    extern 'int ABI_ChatBox_removeLine(ChatBox::Ptr* self, int lineIndex)'
    extern 'void ABI_ChatBox_removeAllLines(ChatBox::Ptr* self)'
    extern 'int ABI_ChatBox_getLineAmount(ChatBox::Ptr* self)'
    extern 'void ABI_ChatBox_setLineLimit(ChatBox::Ptr* self, int maxLines)'
    extern 'int ABI_ChatBox_getLineLimit(ChatBox::Ptr* self)'
    extern 'void ABI_ChatBox_setTextColor(ChatBox::Ptr* self, Color* color)'
    extern 'void* ABI_ChatBox_getTextColor(ChatBox::Ptr* self)'
    extern 'void ABI_ChatBox_setTextStyle(ChatBox::Ptr* self, int style)'
    extern 'int ABI_ChatBox_getTextStyle(ChatBox::Ptr* self)'
    extern 'void ABI_ChatBox_setLinesStartFromTop(ChatBox::Ptr* self, int startFromTop)'
    extern 'int ABI_ChatBox_getLinesStartFromTop(ChatBox::Ptr* self)'
    extern 'void ABI_ChatBox_setNewLinesBelowOthers(ChatBox::Ptr* self, int newLinesBelowOthers)'
    extern 'int ABI_ChatBox_getNewLinesBelowOthers(ChatBox::Ptr* self)'
    extern 'void ABI_ChatBox_setScrollbarValue(ChatBox::Ptr* self, int value)'
    extern 'int ABI_ChatBox_getScrollbarValue(ChatBox::Ptr* self)'
    extern 'void ABI_Container_get_widgets(Container::Ptr* self, void(*f)(Widget::Ptr* widget, const char32_t* type))'
    extern 'void ABI_Container_add(Container::Ptr* self, Widget::Ptr* widget, char* name)'
    extern 'void* ABI_Container_get(Container::Ptr* self, char* name)'
    extern 'int ABI_Container_remove(Container::Ptr* self, Widget::Ptr* widget)'
    extern 'void ABI_Container_removeAllWidgets(Container::Ptr* self)'
    extern 'void* ABI_Container_getInnerSize(Container::Ptr* self)'
    extern 'void* ABI_Container_getChildWidgetsOffset(Container::Ptr* self)'
    extern 'void ABI_Container_moveWidgetToFront(Container::Ptr* self, Widget::Ptr* widget)'
    extern 'void ABI_Container_moveWidgetToBack(Container::Ptr* self, Widget::Ptr* widget)'
    extern 'int ABI_Container_moveWidgetForward(Container::Ptr* self, Widget::Ptr* widget)'
    extern 'int ABI_Container_moveWidgetBackward(Container::Ptr* self, Widget::Ptr* widget)'
    extern 'int ABI_Container_setWidgetIndex(Container::Ptr* self, Widget::Ptr* widget, int index)'
    extern 'int ABI_Container_getWidgetIndex(Container::Ptr* self, Widget::Ptr* widget)'
    extern 'void* ABI_Container_getFocusedChild(Container::Ptr* self)'
    extern 'void* ABI_Container_getFocusedLeaf(Container::Ptr* self)'
    extern 'void* ABI_Container_getWidgetAtPosition(Container::Ptr* self, float x, float y)'
    extern 'int ABI_Container_focusNextWidget(Container::Ptr* self, int recursive)'
    extern 'int ABI_Container_focusPreviousWidget(Container::Ptr* self, int recursive)'
    extern 'void* ABI_ChildWindow_new()'
    extern 'void ABI_ChildWindow_setClientSize(ChildWindow::Ptr* self, char* width, char* height)'
    extern 'void* ABI_ChildWindow_getClientSize(ChildWindow::Ptr* self)'
    extern 'void ABI_ChildWindow_setMaximumSize(ChildWindow::Ptr* self, float x, float y)'
    extern 'void* ABI_ChildWindow_getMaximumSize(ChildWindow::Ptr* self)'
    extern 'void ABI_ChildWindow_setMinimumSize(ChildWindow::Ptr* self, float x, float y)'
    extern 'void* ABI_ChildWindow_getMinimumSize(ChildWindow::Ptr* self)'
    extern 'void ABI_ChildWindow_setTitle(ChildWindow::Ptr* self, char* title)'
    extern 'void* ABI_ChildWindow_getTitle(ChildWindow::Ptr* self)'
    extern 'void ABI_ChildWindow_setTitleTextSize(ChildWindow::Ptr* self, unsigned int size)'
    extern 'unsigned int ABI_ChildWindow_getTitleTextSize(ChildWindow::Ptr* self)'
    extern 'void ABI_ChildWindow_setTitleAlignment(ChildWindow::Ptr* self, int alignment)'
    extern 'int ABI_ChildWindow_getTitleAlignment(ChildWindow::Ptr* self)'
    extern 'void ABI_ChildWindow_setTitleButtons(ChildWindow::Ptr* self, unsigned int buttons)'
    extern 'unsigned int ABI_ChildWindow_getTitleButtons(ChildWindow::Ptr* self)'
    extern 'void ABI_ChildWindow_close(ChildWindow::Ptr* self)'
    extern 'void ABI_ChildWindow_destroy(ChildWindow::Ptr* self)'
    extern 'void ABI_ChildWindow_setResizable(ChildWindow::Ptr* self, int resizable)'
    extern 'int ABI_ChildWindow_isResizable(ChildWindow::Ptr* self)'
    extern 'void ABI_ChildWindow_setPositionLocked(ChildWindow::Ptr* self, int positionLocked)'
    extern 'int ABI_ChildWindow_isPositionLocked(ChildWindow::Ptr* self)'
    extern 'void ABI_ChildWindow_setKeepInParent(ChildWindow::Ptr* self, int enabled)'
    extern 'int ABI_ChildWindow_isKeptInParent(ChildWindow::Ptr* self)'
    extern 'void* ABI_ChildWindow_onMousePress(ChildWindow::Ptr* self)'
    extern 'void* ABI_ChildWindow_onClose(ChildWindow::Ptr* self)'
    extern 'void* ABI_ChildWindow_onMinimize(ChildWindow::Ptr* self)'
    extern 'void* ABI_ChildWindow_onMaximize(ChildWindow::Ptr* self)'
    extern 'void* ABI_ChildWindow_onEscapeKeyPress(ChildWindow::Ptr* self)'
    extern 'void* ABI_ChildWindow_onClosing(ChildWindow::Ptr* self)'
    extern 'void* ABI_Group_new()'
    extern 'void* ABI_BoxLayout_getByIndex(BoxLayout::Ptr* self, int index)'
    extern 'void ABI_BoxLayout_insert(BoxLayout::Ptr* self, int index, Widget::Ptr* widget, char* name)'
    extern 'int ABI_BoxLayout_removeByIndex(BoxLayout::Ptr* self, int index)'
    extern 'void ABI_BoxLayoutRatios_addSpace(BoxLayoutRatios::Ptr* self, float ratio)'
    extern 'void ABI_BoxLayoutRatios_insertSpace(BoxLayoutRatios::Ptr* self, int index, float ratio)'
    extern 'void ABI_BoxLayoutRatios_setRatio(BoxLayoutRatios::Ptr* self, Widget::Ptr* widget, float ratio)'
    extern 'void ABI_BoxLayoutRatios_setRatioByIndex(BoxLayoutRatios::Ptr* self, int index, float ratio)'
    extern 'float ABI_BoxLayoutRatios_getRatio(BoxLayoutRatios::Ptr* self, Widget::Ptr* widget)'
    extern 'float ABI_BoxLayoutRatios_getRatioByIndex(BoxLayoutRatios::Ptr* self, int index)'
    extern 'void* ABI_HorizontalLayout_new()'
    extern 'void* ABI_VerticalLayout_new()'
    extern 'void* ABI_HorizontalWrap_new()'
    extern 'void* ABI_RadioButtonGroup_new()'
    extern 'void ABI_RadioButtonGroup_uncheckRadioButtons(RadioButtonGroup::Ptr* self)'
    extern 'void* ABI_RadioButtonGroup_getCheckedRadioButton(RadioButtonGroup::Ptr* self)'
    extern 'void* ABI_Panel_new()'
    extern 'void* ABI_Panel_onMousePress(Panel::Ptr* self)'
    extern 'void* ABI_Panel_onMouseRelease(Panel::Ptr* self)'
    extern 'void* ABI_Panel_onClick(Panel::Ptr* self)'
    extern 'void* ABI_Panel_onDoubleClick(Panel::Ptr* self)'
    extern 'void* ABI_Panel_onRightMousePress(Panel::Ptr* self)'
    extern 'void* ABI_Panel_onRightMouseRelease(Panel::Ptr* self)'
    extern 'void* ABI_Panel_onRightClick(Panel::Ptr* self)'
    extern 'void* ABI_ScrollablePanel_new()'
    extern 'void ABI_ScrollablePanel_setContentSize(ScrollablePanel::Ptr* self, float x, float y)'
    extern 'void* ABI_ScrollablePanel_getContentSize(ScrollablePanel::Ptr* self)'
    extern 'void* ABI_ScrollablePanel_getContentOffset(ScrollablePanel::Ptr* self)'
    extern 'float ABI_ScrollablePanel_getScrollbarWidth(ScrollablePanel::Ptr* self)'
    extern 'void ABI_ScrollablePanel_setVerticalScrollbarPolicy(ScrollablePanel::Ptr* self, int policy)'
    extern 'int ABI_ScrollablePanel_getVerticalScrollbarPolicy(ScrollablePanel::Ptr* self)'
    extern 'void ABI_ScrollablePanel_setHorizontalScrollbarPolicy(ScrollablePanel::Ptr* self, int policy)'
    extern 'int ABI_ScrollablePanel_getHorizontalScrollbarPolicy(ScrollablePanel::Ptr* self)'
    extern 'void ABI_ScrollablePanel_setVerticalScrollAmount(ScrollablePanel::Ptr* self, int amount)'
    extern 'int ABI_ScrollablePanel_getVerticalScrollAmount(ScrollablePanel::Ptr* self)'
    extern 'void ABI_ScrollablePanel_setHorizontalScrollAmount(ScrollablePanel::Ptr* self, int amount)'
    extern 'int ABI_ScrollablePanel_getHorizontalScrollAmount(ScrollablePanel::Ptr* self)'
    extern 'void ABI_ScrollablePanel_setVerticalScrollbarValue(ScrollablePanel::Ptr* self, int value)'
    extern 'int ABI_ScrollablePanel_getVerticalScrollbarValue(ScrollablePanel::Ptr* self)'
    extern 'void ABI_ScrollablePanel_setHorizontalScrollbarValue(ScrollablePanel::Ptr* self, int value)'
    extern 'int ABI_ScrollablePanel_getHorizontalScrollbarValue(ScrollablePanel::Ptr* self)'
    extern 'void* ABI_Grid_new()'
    extern 'void ABI_Grid_setAutoSize(Grid::Ptr* self, int autoSize)'
    extern 'int ABI_Grid_isAutoSize(Grid::Ptr* self)'
    extern 'int ABI_Grid_setWidgetCell(Grid::Ptr* self, Widget::Ptr* widget, int row, int column)'
    extern 'void* ABI_Grid_getWidget(Grid::Ptr* self, int row, int column)'
    extern 'void ABI_Grid_setWidgetPadding(Grid::Ptr* self, Widget::Ptr* widget, char* paddingLeft, char* paddingRight, char* paddingTop, char* paddingBottom)'
    extern 'void* ABI_Grid_getWidgetPadding(Grid::Ptr* self, Widget::Ptr* widget)'
    extern 'void ABI_Grid_setWidgetAlignment(Grid::Ptr* self, Widget::Ptr* widget, int alignment)'
    extern 'int ABI_Grid_getWidgetAlignment(Grid::Ptr* self, Widget::Ptr* widget)'
    extern 'void ABI_Grid_getWidgetLocations(Grid::Ptr* self, void(*f)(Widget::Ptr*, const char32_t*, int, int))'
    extern 'void* ABI_ListBox_new()'
    extern 'int ABI_ListBox_addItem(ListBox::Ptr* self, char* itemName, char* id)'
    extern 'int ABI_ListBox_setSelectedItem(ListBox::Ptr* self, char* itemName)'
    extern 'int ABI_ListBox_setSelectedItemById(ListBox::Ptr* self, char* id)'
    extern 'int ABI_ListBox_setSelectedItemByIndex(ListBox::Ptr* self, int index)'
    extern 'void ABI_ListBox_deselectItem(ListBox::Ptr* self)'
    extern 'int ABI_ListBox_removeItem(ListBox::Ptr* self, char* itemName)'
    extern 'int ABI_ListBox_removeItemById(ListBox::Ptr* self, char* id)'
    extern 'int ABI_ListBox_removeItemByIndex(ListBox::Ptr* self, int index)'
    extern 'void ABI_ListBox_removeAllItems(ListBox::Ptr* self)'
    extern 'void* ABI_ListBox_getItemById(ListBox::Ptr* self, char* id)'
    extern 'void* ABI_ListBox_getItemByIndex(ListBox::Ptr* self, int index)'
    extern 'int ABI_ListBox_getIndexById(ListBox::Ptr* self, char* id)'
    extern 'void* ABI_ListBox_getIdByIndex(ListBox::Ptr* self, int index)'
    extern 'void* ABI_ListBox_getSelectedItem(ListBox::Ptr* self)'
    extern 'void* ABI_ListBox_getSelectedItemId(ListBox::Ptr* self)'
    extern 'int ABI_ListBox_getSelectedItemIndex(ListBox::Ptr* self)'
    extern 'int ABI_ListBox_changeItem(ListBox::Ptr* self, char* originalValue, char* newValue)'
    extern 'int ABI_ListBox_changeItemById(ListBox::Ptr* self, char* id, char* newValue)'
    extern 'int ABI_ListBox_changeItemByIndex(ListBox::Ptr* self, int index, char* newValue)'
    extern 'int ABI_ListBox_getItemCount(ListBox::Ptr* self)'
    extern 'void ABI_ListBox_getItems(ListBox::Ptr* self, void(*f)(const char32_t*))'
    extern 'void ABI_ListBox_getItemIds(ListBox::Ptr* self, void(*f)(const char32_t*))'
    extern 'void ABI_ListBox_setItemHeight(ListBox::Ptr* self, int itemHeight)'
    extern 'int ABI_ListBox_getItemHeight(ListBox::Ptr* self)'
    extern 'void ABI_ListBox_setMaximumItems(ListBox::Ptr* self, int maximumItems)'
    extern 'int ABI_ListBox_getMaximumItems(ListBox::Ptr* self)'
    extern 'void ABI_ListBox_setAutoScroll(ListBox::Ptr* self, int autoScroll)'
    extern 'int ABI_ListBox_getAutoScroll(ListBox::Ptr* self)'
    extern 'void ABI_ListBox_setTextAlignment(ListBox::Ptr* self, int alignment)'
    extern 'int ABI_ListBox_getTextAlignment(ListBox::Ptr* self)'
    extern 'int ABI_ListBox_contains(ListBox::Ptr* self, char* item)'
    extern 'int ABI_ListBox_containsId(ListBox::Ptr* self, char* id)'
    extern 'void ABI_ListBox_setScrollbarValue(ListBox::Ptr* self, int value)'
    extern 'int ABI_ListBox_getScrollbarValue(ListBox::Ptr* self)'
    extern 'void* ABI_ListBox_onItemSelect(ListBox::Ptr* self)'
    extern 'void* ABI_ListBox_onMousePress(ListBox::Ptr* self)'
    extern 'void* ABI_ListBox_onMouseRelease(ListBox::Ptr* self)'
    extern 'void* ABI_ListBox_onDoubleClick(ListBox::Ptr* self)'
    extern 'void* ABI_ListBox_onScroll(ListBox::Ptr* self)'
    extern 'void* ABI_ListView_new()'
    extern 'int ABI_ListView_addColumn(ListView::Ptr* self)'
    extern 'void ABI_ListView_setColumnText(ListView::Ptr* self, int index, char* text)'
    extern 'void* ABI_ListView_getColumnText(ListView::Ptr* self, int index)'
    extern 'void ABI_ListView_setColumnWidth(ListView::Ptr* self, int index, float width)'
    extern 'float ABI_ListView_getColumnWidth(ListView::Ptr* self, int index)'
    extern 'void ABI_ListView_setColumnAlignment(ListView::Ptr* self, int index, int columnAlignment)'
    extern 'int ABI_ListView_getColumnAlignment(ListView::Ptr* self, int index)'
    extern 'void ABI_ListView_setColumnAutoResize(ListView::Ptr* self, int index, int autoResize)'
    extern 'int ABI_ListView_getColumnAutoResize(ListView::Ptr* self, int index)'
    extern 'void ABI_ListView_setColumnExpanded(ListView::Ptr* self, int index, int expanded)'
    extern 'int ABI_ListView_getColumnExpanded(ListView::Ptr* self, int index)'
    extern 'void ABI_ListView_removeAllColumns(ListView::Ptr* self)'
    extern 'int ABI_ListView_getColumnCount(ListView::Ptr* self)'
    extern 'void ABI_ListView_setHeaderHeight(ListView::Ptr* self, float height)'
    extern 'float ABI_ListView_getHeaderHeight(ListView::Ptr* self)'
    extern 'float ABI_ListView_getCurrentHeaderHeight(ListView::Ptr* self)'
    extern 'void ABI_ListView_setHeaderVisible(ListView::Ptr* self, int showHeader)'
    extern 'int ABI_ListView_headerVisible(ListView::Ptr* self)'
    extern 'int ABI_ListView_addItem(ListView::Ptr* self, char*(*f)(void))'
    extern 'void ABI_ListView_insertItem(ListView::Ptr* self, int index, char*(*f)(void))'
    extern 'int ABI_ListView_changeItem(ListView::Ptr* self, int index, char*(*f)(void))'
    extern 'int ABI_ListView_changeSubitem(ListView::Ptr* self, int index, int column, char* item)'
    extern 'int ABI_ListView_removeItem(ListView::Ptr* self, int index)'
    extern 'void ABI_ListView_removeAllItems(ListView::Ptr* self)'
    extern 'void ABI_ListView_setSelectedItem(ListView::Ptr* self, int index)'
    extern 'void ABI_ListView_setSelectedItems(ListView::Ptr* self, int size, int(*f)(void))'
    extern 'void ABI_ListView_deselectItems(ListView::Ptr* self)'
    extern 'int ABI_ListView_getSelectedItemIndex(ListView::Ptr* self)'
    extern 'void ABI_ListView_getSelectedItemIndices(ListView::Ptr* self, void(*f)(int))'
    extern 'void ABI_ListView_setMultiSelect(ListView::Ptr* self, int multiSelect)'
    extern 'int ABI_ListView_multiSelect(ListView::Ptr* self)'
    extern 'void ABI_ListView_setItemIcon(ListView::Ptr* self, int index, Texture* texture)'
    extern 'void* ABI_ListView_getItemIcon(ListView::Ptr* self, int index)'
    extern 'int ABI_ListView_getItemCount(ListView::Ptr* self)'
    extern 'void ABI_ListView_getItemRow(ListView::Ptr* self, int index, void(*f)(const char32_t*))'
    extern 'void* ABI_ListView_getItemCell(ListView::Ptr* self, int rowIndex, int columnIndex)'
    extern 'void ABI_ListView_getItemRows(ListView::Ptr* self, void(*f)(const char32_t*, int row))'
    extern 'void ABI_ListView_setItemHeight(ListView::Ptr* self, int itemHeight)'
    extern 'int ABI_ListView_getItemHeight(ListView::Ptr* self)'
    extern 'void ABI_ListView_setHeaderTextSize(ListView::Ptr* self, int textSize)'
    extern 'int ABI_ListView_getHeaderTextSize(ListView::Ptr* self)'
    extern 'void ABI_ListView_setSeparatorWidth(ListView::Ptr* self, int width)'
    extern 'int ABI_ListView_getSeparatorWidth(ListView::Ptr* self)'
    extern 'void ABI_ListView_setHeaderSeparatorHeight(ListView::Ptr* self, int height)'
    extern 'int ABI_ListView_getHeaderSeparatorHeight(ListView::Ptr* self)'
    extern 'void ABI_ListView_setGridLinesWidth(ListView::Ptr* self, int width)'
    extern 'int ABI_ListView_getGridLinesWidth(ListView::Ptr* self)'
    extern 'void ABI_ListView_setAutoScroll(ListView::Ptr* self, int autoScroll)'
    extern 'int ABI_ListView_autoScroll(ListView::Ptr* self)'
    extern 'void ABI_ListView_setShowVerticalGridLines(ListView::Ptr* self, int showGridLines)'
    extern 'int ABI_ListView_showVerticalGridLines(ListView::Ptr* self)'
    extern 'void ABI_ListView_setShowHorizontalGridLines(ListView::Ptr* self, int showGridLines)'
    extern 'int ABI_ListView_showHorizontalGridLines(ListView::Ptr* self)'
    extern 'void ABI_ListView_setVerticalScrollbarPolicy(ListView::Ptr* self, int policy)'
    extern 'int ABI_ListView_getVerticalScrollbarPolicy(ListView::Ptr* self)'
    extern 'void ABI_ListView_setHorizontalScrollbarPolicy(ListView::Ptr* self, int policy)'
    extern 'int ABI_ListView_getHorizontalScrollbarPolicy(ListView::Ptr* self)'
    extern 'void ABI_ListView_setVerticalScrollbarValue(ListView::Ptr* self, int value)'
    extern 'int ABI_ListView_getVerticalScrollbarValue(ListView::Ptr* self)'
    extern 'void ABI_ListView_setHorizontalScrollbarValue(ListView::Ptr* self, int value)'
    extern 'int ABI_ListView_getHorizontalScrollbarValue(ListView::Ptr* self)'
    extern 'void ABI_ListView_setFixedIconSize(ListView::Ptr* self, float width, float height)'
    extern 'void* ABI_ListView_getFixedIconSize(ListView::Ptr* self)'
    extern 'void ABI_ListView_setResizableColumns(ListView::Ptr* self, int resizable)'
    extern 'int ABI_ListView_resizableColumns(ListView::Ptr* self)'
    extern 'void* ABI_ListView_onItemSelect(ListView::Ptr* self)'
    extern 'void* ABI_ListView_onDoubleClick(ListView::Ptr* self)'
    extern 'void* ABI_ListView_onRightClick(ListView::Ptr* self)'
    extern 'void* ABI_ListView_onHeaderClick(ListView::Ptr* self)'
    extern 'void* ABI_ComboBox_new()'
    extern 'void ABI_ComboBox_setItemsToDisplay(ComboBox::Ptr* self, int itemsToDisplay)'
    extern 'int ABI_ComboBox_getItemsToDisplay(ComboBox::Ptr* self)'
    extern 'void ABI_ComboBox_addItem(ComboBox::Ptr* self, char* name, char* id)'
    extern 'int ABI_ComboBox_setSelectedItemById(ComboBox::Ptr* self, char* id)'
    extern 'int ABI_ComboBox_setSelectedItemByIndex(ComboBox::Ptr* self, int index)'
    extern 'void ABI_ComboBox_deselectItem(ComboBox::Ptr* self)'
    extern 'int ABI_ComboBox_removeItemById(ComboBox::Ptr* self, char* id)'
    extern 'int ABI_ComboBox_removeItemByIndex(ComboBox::Ptr* self, int index)'
    extern 'void ABI_ComboBox_removeAllItems(ComboBox::Ptr* self)'
    extern 'void* ABI_ComboBox_getItemById(ComboBox::Ptr* self, char* id)'
    extern 'void* ABI_ComboBox_getSelectedItemId(ComboBox::Ptr* self)'
    extern 'int ABI_ComboBox_changeItemById(ComboBox::Ptr* self, char* id, char* newValue)'
    extern 'int ABI_ComboBox_changeItemByIndex(ComboBox::Ptr* self, int index, char* newValue)'
    extern 'int ABI_ComboBox_getItemCount(ComboBox::Ptr* self)'
    extern 'void ABI_ComboBox_getItemIds(ComboBox::Ptr* self, void(*f)(char32_t*))'
    extern 'void ABI_ComboBox_setMaximumItems(ComboBox::Ptr* self, int maximumItems)'
    extern 'int ABI_ComboBox_getMaximumItems(ComboBox::Ptr* self)'
    extern 'void ABI_ComboBox_setDefaultText(ComboBox::Ptr* self, char* defaultText)'
    extern 'void* ABI_ComboBox_getDefaultText(ComboBox::Ptr* self)'
    extern 'void ABI_ComboBox_setExpandDirection(ComboBox::Ptr* self, int expandDirection)'
    extern 'int ABI_ComboBox_getExpandDirection(ComboBox::Ptr* self)'
    extern 'int ABI_ComboBox_containsId(ComboBox::Ptr* self, char* id)'
    extern 'void ABI_ComboBox_setChangeItemOnScroll(ComboBox::Ptr* self, int changeItemOnScroll)'
    extern 'int ABI_ComboBox_getChangeItemOnScroll(ComboBox::Ptr* self)'
    extern 'void* ABI_ComboBox_onItemSelect(ComboBox::Ptr* self)'
    extern 'void* ABI_ColorPicker_new()'
    extern 'void ABI_ColorPicker_setColor(ColorPicker::Ptr* self, Color* color)'
    extern 'void* ABI_ColorPicker_getColor(ColorPicker::Ptr* self)'
    extern 'void* ABI_ColorPicker_onColorChange(ColorPicker::Ptr* self)'
    extern 'void* ABI_ColorPicker_onOkPress(ColorPicker::Ptr* self)'
    extern 'void* ABI_FileDialog_new()'
    extern 'void ABI_FileDialog_getSelectedPaths(FileDialog::Ptr* self, void(*f)(char32_t*))'
    extern 'void ABI_FileDialog_setPath(FileDialog::Ptr* self, char* path)'
    extern 'void* ABI_FileDialog_getPath(FileDialog::Ptr* self)'
    extern 'void ABI_FileDialog_setFilename(FileDialog::Ptr* self, char* filename)'
    extern 'void* ABI_FileDialog_getFilename(FileDialog::Ptr* self)'
    extern 'void ABI_FileDialog_setFileTypeFilters(FileDialog::Ptr* self, int size, int(*f)(void), char*(*f1)(void), int defaultFilterIndex)'
    extern 'void ABI_FileDialog_getFileTypeFilters(FileDialog::Ptr* self, void(*f)(int, const char32_t*, const char32_t*))'
    extern 'int ABI_FileDialog_getFileTypeFiltersIndex(FileDialog::Ptr* self)'
    extern 'void ABI_FileDialog_setConfirmButtonText(FileDialog::Ptr* self, char* text)'
    extern 'void* ABI_FileDialog_getConfirmButtonText(FileDialog::Ptr* self)'
    extern 'void ABI_FileDialog_setCancelButtonText(FileDialog::Ptr* self, char* text)'
    extern 'void* ABI_FileDialog_getCancelButtonText(FileDialog::Ptr* self)'
    extern 'void ABI_FileDialog_setCreateFolderButtonText(FileDialog::Ptr* self, char* text)'
    extern 'void* ABI_FileDialog_getCreateFolderButtonText(FileDialog::Ptr* self)'
    extern 'void ABI_FileDialog_setAllowCreateFolder(FileDialog::Ptr* self, int allowCreateFolder)'
    extern 'int ABI_FileDialog_getAllowCreateFolder(FileDialog::Ptr* self)'
    extern 'void ABI_FileDialog_setFilenameLabelText(FileDialog::Ptr* self, char* labelText)'
    extern 'void* ABI_FileDialog_getFilenameLabelText(FileDialog::Ptr* self)'
    extern 'void ABI_FileDialog_setListViewColumnCaptions(FileDialog::Ptr* self, char* nameColumnText, char* sizeColumnText, char* modifiedColumnText)'
    extern 'void ABI_FileDialog_getListViewColumnCaptions(FileDialog::Ptr* self, void(*f)(const char32_t*))'
    extern 'void ABI_FileDialog_setFileMustExist(FileDialog::Ptr* self, int enforceExistence)'
    extern 'int ABI_FileDialog_getFileMustExist(FileDialog::Ptr* self)'
    extern 'void ABI_FileDialog_setSelectingDirectory(FileDialog::Ptr* self, int selectDirectories)'
    extern 'int ABI_FileDialog_getSelectingDirectory(FileDialog::Ptr* self)'
    extern 'void ABI_FileDialog_setMultiSelect(FileDialog::Ptr* self, int multiSelect)'
    extern 'int ABI_FileDialog_getMultiSelect(FileDialog::Ptr* self)'
    extern 'void* ABI_FileDialog_onFileSelect(FileDialog::Ptr* self)'
    extern 'void* ABI_FileDialog_onCancel(FileDialog::Ptr* self)'
    extern 'void* ABI_MessageBox_new()'
    extern 'void ABI_MessageBox_setText(MessageBox::Ptr* self, char* text)'
    extern 'void* ABI_MessageBox_getText(MessageBox::Ptr* self)'
    extern 'void ABI_MessageBox_addButton(MessageBox::Ptr* self, char* button)'
    extern 'void ABI_MessageBox_changeButtons(MessageBox::Ptr* self, int size, char*(*f)(void))'
    extern 'void ABI_MessageBox_getButtons(MessageBox::Ptr* self, void(*f)(const char32_t*))'
    extern 'void ABI_MessageBox_setLabelAlignment(MessageBox::Ptr* self, int alignment)'
    extern 'int ABI_MessageBox_getLabelAlignment(MessageBox::Ptr* self)'
    extern 'void ABI_MessageBox_setButtonAlignment(MessageBox::Ptr* self, int alignment)'
    extern 'int ABI_MessageBox_getButtonAlignment(MessageBox::Ptr* self)'
    extern 'void* ABI_MessageBox_onButtonPress(MessageBox::Ptr* self)'
    extern 'void* ABI_Picture_new(Texture* texture, int transparent)'
    extern 'void ABI_Picture_ignoreMouseEvents(Picture::Ptr* self, int ignore)'
    extern 'int ABI_Picture_isIgnoringMouseEvents(Picture::Ptr* self)'
    extern 'void* ABI_Picture_onDoubleClick(Picture::Ptr* self)'
    extern 'void* ABI_MenuBar_new()'
    extern 'void ABI_MenuBar_addMenu(MenuBar::Ptr* self, char* text)'
    extern 'int ABI_MenuBar_connectMenuItem(MenuBar::Ptr* self, int hierarchySize, char*(*hierarchy)(), void(*handler)())'
    extern 'int ABI_MenuBar_addMenuItem(MenuBar::Ptr* self, int hierarchySize, char*(*hierarchy)())'
    extern 'int ABI_MenuBar_changeMenuItem(MenuBar::Ptr* self, int hierarchySize, char*(*hierarchy)(), char* text)'
    extern 'void ABI_MenuBar_removeAllMenus(MenuBar::Ptr* self)'
    extern 'int ABI_MenuBar_removeMenu(MenuBar::Ptr* self, char* menu)'
    extern 'int ABI_MenuBar_removeMenuItem(MenuBar::Ptr* self, int hierarchySize, char*(*hierarchy)())'
    extern 'int ABI_MenuBar_removeSubMenuItems(MenuBar::Ptr* self, int hierarchySize, char*(*hierarchy)())'
    extern 'int ABI_MenuBar_setMenuEnabled(MenuBar::Ptr* self, char* menu, int enabled)'
    extern 'int ABI_MenuBar_getMenuEnabled(MenuBar::Ptr* self, char* menu)'
    extern 'int ABI_MenuBar_setMenuItemEnabled(MenuBar::Ptr* self, int hierarchySize, char*(*hierarchy)(), int enabled)'
    extern 'int ABI_MenuBar_getMenuItemEnabled(MenuBar::Ptr* self, int hierarchySize, char*(*hierarchy)())'
    extern 'void ABI_MenuBar_setMinimumSubMenuWidth(MenuBar::Ptr* self, float minimumWidth)'
    extern 'float ABI_MenuBar_getMinimumSubMenuWidth(MenuBar::Ptr* self)'
    extern 'void ABI_MenuBar_setInvertedMenuDirection(MenuBar::Ptr* self, int invertDirection)'
    extern 'int ABI_MenuBar_getInvertedMenuDirection(MenuBar::Ptr* self)'
    extern 'void ABI_MenuBar_getMenus(MenuBar::Ptr* self, void(*m)(const char32_t*, int), void(*up)())'
    extern 'void ABI_MenuBar_closeMenu(MenuBar::Ptr* self)'
    extern 'void* ABI_MenuBar_onMenuItemClick(MenuBar::Ptr* self)'
    extern 'void* ABI_PanelListBox_new()'
    extern 'void* ABI_PanelListBox_addItem(PanelListBox::Ptr* self, char* id, int index)'
    extern 'void* ABI_PanelListBox_getPanelTemplate(PanelListBox::Ptr* self)'
    extern 'float ABI_PanelListBox_getItemsWidth(PanelListBox::Ptr* self)'
    extern 'void ABI_PanelListBox_setItemsHeight(PanelListBox::Ptr* self, char* height)'
    extern 'float ABI_PanelListBox_getItemsHeight(PanelListBox::Ptr* self)'
    extern 'int ABI_PanelListBox_setSelectedItem(PanelListBox::Ptr* self, Panel::Ptr* panel)'
    extern 'int ABI_PanelListBox_setSelectedItemById(PanelListBox::Ptr* self, char* id)'
    extern 'int ABI_PanelListBox_setSelectedItemByIndex(PanelListBox::Ptr* self, int index)'
    extern 'void ABI_PanelListBox_deselectItem(PanelListBox::Ptr* self)'
    extern 'int ABI_PanelListBox_removeItem(PanelListBox::Ptr* self, Panel::Ptr* panel)'
    extern 'int ABI_PanelListBox_removeItemById(PanelListBox::Ptr* self, char* id)'
    extern 'int ABI_PanelListBox_removeItemByIndex(PanelListBox::Ptr* self, int index)'
    extern 'void ABI_PanelLIstBox_removeAllItems(PanelListBox::Ptr* self)'
    extern 'void* ABI_PanelListBox_getItemById(PanelListBox::Ptr* self, char* id)'
    extern 'void* ABI_PanelListBox_getItemByIndex(PanelListBox::Ptr* self, int index)'
    extern 'int ABI_PanelListBox_getIndexById(PanelListBox::Ptr* self, char* id)'
    extern 'int ABI_PanelListBox_getIndexByItem(PanelListBox::Ptr* self, Panel::Ptr* panel)'
    extern 'void* ABI_PanelListBox_getIdByIndex(PanelListBox::Ptr* self, int index)'
    extern 'void* ABI_PanelListBox_getSelectedItem(PanelListBox::Ptr* self)'
    extern 'void* ABI_PanelListBox_getSelectedItemId(PanelListBox::Ptr* self)'
    extern 'int ABI_PanelListBox_getSelectedItemIndex(PanelListBox::Ptr* self)'
    extern 'int ABI_PanelListBox_getItemCount(PanelListBox::Ptr* self)'
    extern 'void ABI_PanelListBox_getItems(PanelListBox::Ptr* self, void(*f)(Panel::Ptr*))'
    extern 'void ABI_PanelListBox_getItemIds(PanelListBox::Ptr* self, void(*f)(const char32_t*))'
    extern 'void ABI_PanelListBox_setMaximumItems(PanelListBox::Ptr* self, int maximumItems)'
    extern 'int ABI_PanelListBox_getMaximumItems(PanelListBox::Ptr* self)'
    extern 'int ABI_PanelListBox_contains(PanelListBox::Ptr* self, Panel::Ptr* panel)'
    extern 'int ABI_PanelListBox_containsId(PanelListBox::Ptr* self, char* id)'
    extern 'void* ABI_PanelListBox_onItemSelect(PanelListBox::Ptr* self)'
    extern 'void* ABI_ProgressBar_new()'
    extern 'void ABI_ProgressBar_setMinimum(ProgressBar::Ptr* self, int minimum)'
    extern 'int ABI_ProgressBar_getMinimum(ProgressBar::Ptr* self)'
    extern 'void ABI_ProgressBar_setMaximum(ProgressBar::Ptr* self, int maximum)'
    extern 'int ABI_ProgressBar_getMaximum(ProgressBar::Ptr* self)'
    extern 'void ABI_ProgressBar_setValue(ProgressBar::Ptr* self, int value)'
    extern 'int ABI_ProgressBar_getValue(ProgressBar::Ptr* self)'
    extern 'int ABI_ProgressBar_incrementValue(ProgressBar::Ptr* self)'
    extern 'void ABI_ProgressBar_setText(ProgressBar::Ptr* self, char* text)'
    extern 'void* ABI_ProgressBar_getText(ProgressBar::Ptr* self)'
    extern 'void ABI_ProgressBar_setFillDirection(ProgressBar::Ptr* self, int direction)'
    extern 'int ABI_ProgressBar_getFillDirection(ProgressBar::Ptr* self)'
    extern 'void* ABI_ProgressBar_onValueChange(ProgressBar::Ptr* self)'
    extern 'void* ABI_ProgressBar_onFull(ProgressBar::Ptr* self)'
    extern 'void* ABI_RangeSlider_new()'
    extern 'void ABI_RangeSlider_setMinimum(RangeSlider::Ptr* self, float minimum)'
    extern 'float ABI_RangeSlider_getMinimum(RangeSlider::Ptr* self)'
    extern 'void ABI_RangeSlider_setMaximum(RangeSlider::Ptr* self, float maximum)'
    extern 'float ABI_RangeSlider_getMaximum(RangeSlider::Ptr* self)'
    extern 'void ABI_RangeSlider_setSelectionStart(RangeSlider::Ptr* self, float value)'
    extern 'float ABI_RangeSlider_getSelectionStart(RangeSlider::Ptr* self)'
    extern 'void ABI_RangeSlider_setSelectionEnd(RangeSlider::Ptr* self, float value)'
    extern 'float ABI_RangeSlider_getSelectionEnd(RangeSlider::Ptr* self)'
    extern 'void ABI_RangeSlider_setStep(RangeSlider::Ptr* self, float step)'
    extern 'float ABI_RangeSlider_getStep(RangeSlider::Ptr* self)'
    extern 'void* ABI_RangeSlider_onRangeChange(RangeSlider::Ptr* self)'
    extern 'void* ABI_RichTextLabel_new()'
    extern 'void* ABI_SeparatorLine_new()'
    extern 'void* ABI_Slider_new()'
    extern 'void ABI_Slider_setMinimum(Slider::Ptr* self, float minimum)'
    extern 'float ABI_Slider_getMinimum(Slider::Ptr* self)'
    extern 'void ABI_Slider_setMaximum(Slider::Ptr* self, float maximum)'
    extern 'float ABI_Slider_getMaximum(Slider::Ptr* self)'
    extern 'void ABI_Slider_setValue(Slider::Ptr* self, float value)'
    extern 'float ABI_Slider_getValue(Slider::Ptr* self)'
    extern 'void ABI_Slider_setStep(Slider::Ptr* self, float step)'
    extern 'float ABI_Slider_getStep(Slider::Ptr* self)'
    extern 'void ABI_Slider_setVerticalScroll(Slider::Ptr* self, int vertical)'
    extern 'int ABI_Slider_getVerticalScroll(Slider::Ptr* self)'
    extern 'void ABI_Slider_setInvertedDirection(Slider::Ptr* self, int invertedDirection)'
    extern 'int ABI_Slider_getInvertedDirection(Slider::Ptr* self)'
    extern 'void ABI_Slider_setChangeValueOnScroll(Slider::Ptr* self, int changeValueOnScroll)'
    extern 'int ABI_Slider_getChangeValueOnScroll(Slider::Ptr* self)'
    extern 'void* ABI_Slider_onValueChange(Slider::Ptr* self)'
    extern 'void* ABI_SpinButton_new()'
    extern 'void ABI_SpinButton_setMinimum(SpinButton::Ptr* self, float minimum)'
    extern 'float ABI_SpinButton_getMinimum(SpinButton::Ptr* self)'
    extern 'void ABI_SpinButton_setMaximum(SpinButton::Ptr* self, float maximum)'
    extern 'float ABI_SpinButton_getMaximum(SpinButton::Ptr* self)'
    extern 'void ABI_SpinButton_setValue(SpinButton::Ptr* self, float value)'
    extern 'float ABI_SpinButton_getValue(SpinButton::Ptr* self)'
    extern 'void ABI_SpinButton_setStep(SpinButton::Ptr* self, float step)'
    extern 'float ABI_SpinButton_getStep(SpinButton::Ptr* self)'
    extern 'void ABI_SpinButton_setVerticalScroll(SpinButton::Ptr* self, int vertical)'
    extern 'int ABI_SpinButton_getVerticalScroll(SpinButton::Ptr* self)'
    extern 'void* ABI_SpinButton_onValueChange(SpinButton::Ptr* self)'
    extern 'void* ABI_SubwidgetContainer_getContainer(SubwidgetContainer::Ptr* self)'
    extern 'void* ABI_SpinControl_new()'
    extern 'void ABI_SpinControl_setMinimum(SpinControl::Ptr* self, float minimum)'
    extern 'float ABI_SpinControl_getMinimum(SpinControl::Ptr* self)'
    extern 'void ABI_SpinControl_setMaximum(SpinControl::Ptr* self, float maximum)'
    extern 'float ABI_SpinControl_getMaximum(SpinControl::Ptr* self)'
    extern 'void ABI_SpinControl_setValue(SpinControl::Ptr* self, float value)'
    extern 'float ABI_SpinControl_getValue(SpinControl::Ptr* self)'
    extern 'void ABI_SpinControl_setStep(SpinControl::Ptr* self, float step)'
    extern 'float ABI_SpinControl_getStep(SpinControl::Ptr* self)'
    extern 'void ABI_SpinControl_setDecimalPlaces(SpinControl::Ptr* self, int decimalPlaces)'
    extern 'int ABI_SpinControl_getDecimalPlaces(SpinControl::Ptr* self)'
    extern 'void ABI_SpinControl_setUseWideArrows(SpinControl::Ptr* self, int useWideArrows)'
    extern 'int ABI_SpinControl_getUseWideArrows(SpinControl::Ptr* self)'
    extern 'void* ABI_SpinControl_onValueChange(SpinControl::Ptr* self)'
    extern 'void* ABI_Tabs_new()'
    extern 'void ABI_Tabs_setAutoSize(Tabs::Ptr* self, int autoSize)'
    extern 'int ABI_Tabs_getAutoSize(Tabs::Ptr* self)'
    extern 'int ABI_Tabs_add(Tabs::Ptr* self, char* text, int select)'
    extern 'void ABI_Tabs_insert(Tabs::Ptr* self, int index, char* text, int select)'
    extern 'void* ABI_Tabs_getText(Tabs::Ptr* self, int index)'
    extern 'int ABI_Tabs_changeText(Tabs::Ptr* self, int index, char* text)'
    extern 'int ABI_Tabs_select(Tabs::Ptr* self, char* text)'
    extern 'int ABI_Tabs_selectByIndex(Tabs::Ptr* self, int index)'
    extern 'void ABI_Tabs_deselect(Tabs::Ptr* self)'
    extern 'int ABI_Tabs_remove(Tabs::Ptr* self, char* text)'
    extern 'int ABI_Tabs_removeByIndex(Tabs::Ptr* self, int index)'
    extern 'void ABI_Tabs_removeAll(Tabs::Ptr* self)'
    extern 'void* ABI_Tabs_getSelected(Tabs::Ptr* self)'
    extern 'int ABI_Tabs_getSelectedIndex(Tabs::Ptr* self)'
    extern 'void ABI_Tabs_setTabVisible(Tabs::Ptr* self, int index, int visible)'
    extern 'int ABI_Tabs_getTabVisible(Tabs::Ptr* self, int index)'
    extern 'void ABI_Tabs_setTabEnabled(Tabs::Ptr* self, int index, int enabled)'
    extern 'int ABI_Tabs_getTabEnabled(Tabs::Ptr* self, int index)'
    extern 'void ABI_Tabs_setTabHeight(Tabs::Ptr* self, float height)'
    extern 'void ABI_Tabs_setMaximumTabWidth(Tabs::Ptr* self, float maximumWidth)'
    extern 'float ABI_Tabs_getMaximumTabWidth(Tabs::Ptr* self)'
    extern 'void ABI_Tabs_setMinimumTabWidth(Tabs::Ptr* self, float minimumWidth)'
    extern 'float ABI_Tabs_getMinimumTabWidth(Tabs::Ptr* self)'
    extern 'int ABI_Tabs_getTabsCount(Tabs::Ptr* self)'
    extern 'void* ABI_Tabs_onTabSelect(Tabs::Ptr* self)'
    extern 'void* ABI_TabContainer_new()'
    extern 'void ABI_TabContainer_setTabsHeight(TabContainer::Ptr* self, char* height)'
    extern 'void* ABI_TabContainer_addTab(TabContainer::Ptr* self, char* name, int select)'
    extern 'void* ABI_TabContainer_insertTab(TabContainer::Ptr* self, int index, char* name, int select)'
    extern 'int ABI_TabContainer_removeTab(TabContainer::Ptr* self, char* text)'
    extern 'int ABI_TabContainer_removeTabByIndex(TabContainer::Ptr* self, int index)'
    extern 'void ABI_TabContainer_select(TabContainer::Ptr* self, int index)'
    extern 'int ABI_TabContainer_getPanelCount(TabContainer::Ptr* self)'
    extern 'int ABI_TabContainer_getIndex(TabContainer::Ptr* self, Panel::Ptr* ptr)'
    extern 'void* ABI_TabContainer_getSelected(TabContainer::Ptr* self)'
    extern 'int ABI_TabContainer_getSelectedIndex(TabContainer::Ptr* self)'
    extern 'void* ABI_TabContainer_getPanel(TabContainer::Ptr* self, int index)'
    extern 'void* ABI_TabContainer_getTabs(TabContainer::Ptr* self)'
    extern 'void* ABI_TabContainer_getTabText(TabContainer::Ptr* self, int index)'
    extern 'int ABI_TabContainer_changeTabText(TabContainer::Ptr* self, int index, char* text)'
    extern 'void ABI_TabContainer_setTabAlignment(TabContainer::Ptr* self, int align)'
    extern 'int ABI_TabContainer_getTabAlignment(TabContainer::Ptr* self)'
    extern 'void ABI_TabContainer_setTabFixedSize(TabContainer::Ptr* self, float fixedSize)'
    extern 'float ABI_TabContainer_getTabFixedSize(TabContainer::Ptr* self)'
    extern 'void* ABI_TabContainer_onSelectionChange(TabContainer::Ptr* self)'
    extern 'void* ABI_TabContainer_onSelectionChanging(TabContainer::Ptr* self)'
    extern 'void* ABI_TextArea_new()'
    extern 'void ABI_TextArea_setText(TextArea::Ptr* self, char* text)'
    extern 'void ABI_TextArea_addText(TextArea::Ptr* self, char* text)'
    extern 'void* ABI_TextArea_getText(TextArea::Ptr* self)'
    extern 'void ABI_TextArea_setDefaultText(TextArea::Ptr* self, char* text)'
    extern 'void* ABI_TextArea_getDefaultText(TextArea::Ptr* self)'
    extern 'void ABI_TextArea_setSelectedText(TextArea::Ptr* self, int selectionStartIndex, int selectionEndIndex)'
    extern 'void* ABI_TextArea_getSelectedText(TextArea::Ptr* self)'
    extern 'int ABI_TextArea_getSelectionStart(TextArea::Ptr* self)'
    extern 'int ABI_TextArea_getSelectionEnd(TextArea::Ptr* self)'
    extern 'void ABI_TextArea_setMaximumCharacters(TextArea::Ptr* self, int maxChars)'
    extern 'int ABI_TextArea_getMaximumCharacters(TextArea::Ptr* self)'
    extern 'void ABI_TextArea_setTabString(TextArea::Ptr* self, char* tabText)'
    extern 'void* ABI_TextArea_getTabString(TextArea::Ptr* self)'
    extern 'void ABI_TextArea_setCaretPosition(TextArea::Ptr* self, int charactersBeforeCaret)'
    extern 'int ABI_TextArea_getCaretPosition(TextArea::Ptr* self)'
    extern 'int ABI_TextArea_getCaretLine(TextArea::Ptr* self)'
    extern 'int ABI_TextArea_getCaretColumn(TextArea::Ptr* self)'
    extern 'void ABI_TextArea_setReadOnly(TextArea::Ptr* self, int readOnly)'
    extern 'int ABI_TextArea_isReadOnly(TextArea::Ptr* self)'
    extern 'int ABI_TextArea_getLinesCount(TextArea::Ptr* self)'
    extern 'void ABI_TextArea_enableMonospacedFontOptimization(TextArea::Ptr* self, int enable)'
    extern 'void ABI_TextArea_setVerticalScrollbarPolicy(TextArea::Ptr* self, int policy)'
    extern 'int ABI_TextArea_getVerticalScrollbarPolicy(TextArea::Ptr* self)'
    extern 'void ABI_TextArea_setHorizontalScrollbarPolicy(TextArea::Ptr* self, int policy)'
    extern 'int ABI_TextArea_getHorizontalScrollbarPolicy(TextArea::Ptr* self)'
    extern 'void ABI_TextArea_setVerticalScrollbarValue(TextArea::Ptr* self, int value)'
    extern 'int ABI_TextArea_getVerticalScrollbarValue(TextArea::Ptr* self)'
    extern 'void ABI_TextArea_setHorizontalScrollbarValue(TextArea::Ptr* self, int value)'
    extern 'int ABI_TextArea_getHorizontalScrollbarValue(TextArea::Ptr* self)'
    extern 'void* ABI_TextArea_onTextChange(TextArea::Ptr* self)'
    extern 'void* ABI_TextArea_onSelectionChange(TextArea::Ptr* self)'
    extern 'void* ABI_TextArea_onCaretPositionChange(TextArea::Ptr* self)'
    extern 'void* ABI_ToggleButton_new()'
    extern 'void ABI_ToggleButton_setDown(ToggleButton::Ptr* self, int down)'
    extern 'int ABI_ToggleButton_isDown(ToggleButton::Ptr* self)'
    extern 'void* ABI_ToggleButton_onToggle(ToggleButton::Ptr* self)'
    extern 'void ABI_STATIC_ToolTip_setInitialDelay(int delay)'
    extern 'int ABI_STATIC_ToolTip_getInitialDelay()'
    extern 'void ABI_STATIC_ToolTip_setDistanceToMouse(float distanceX, float distanceY)'
    extern 'void* ABI_STATIC_ToolTip_getDistanceToMouse()'
    extern 'void ABI_STATIC_ToolTip_setShowOnDisabledWidget(int show)'
    extern 'int ABI_STATIC_ToolTip_getShowOnDisabledWidget()'
    extern 'void* ABI_TreeView_new()'
    extern 'int ABI_TreeView_addItem(TreeView::Ptr* self, int hierarchySize, char*(*f)(void), int createParents)'
    extern 'void ABI_TreeView_expand(TreeView::Ptr* self, int hierarchySize, char*(*f)(void))'
    extern 'void ABI_TreeView_expandAll(TreeView::Ptr* self)'
    extern 'void ABI_TreeView_collapse(TreeView::Ptr* self, int hierarchySize, char*(*f)(void))'
    extern 'void ABI_TreeView_collapseAll(TreeView::Ptr* self)'
    extern 'int ABI_TreeView_selectItem(TreeView::Ptr* self, int hierarchySize, char*(*f)(void))'
    extern 'void ABI_TreeView_deselectItem(TreeView::Ptr* self)'
    extern 'int ABI_TreeView_removeItem(TreeView::Ptr* self, int hierarchySize, char*(*f)(void), int removeParentsWhenEmpty)'
    extern 'void ABI_TreeView_removeAllItems(TreeView::Ptr* self)'
    extern 'void ABI_TreeView_getSelectedItem(TreeView::Ptr* self, void(*f)(const char32_t*))'
    extern 'void ABI_TreeView_getNodes(TreeView::Ptr* self, void(*m)(const char32_t*, int), void(*up)())'
    extern 'void ABI_TreeView_setItemHeight(TreeView::Ptr* self, int itemHeight)'
    extern 'int ABI_TreeView_getItemHeight(TreeView::Ptr* self)'
    extern 'void ABI_TreeView_setVerticalScrollbarValue(TreeView::Ptr* self, int value)'
    extern 'int ABI_TreeView_getVerticalScrollbarValue(TreeView::Ptr* self)'
    extern 'void ABI_TreeView_setHorizontalScrollbarValue(TreeView::Ptr* self, int value)'
    extern 'int ABI_TreeView_getHorizontalScrollbarValue(TreeView::Ptr* self)'
    extern 'void* ABI_TreeView_onItemSelect(TreeView::Ptr* self)'
    extern 'void* ABI_TreeView_onDoubleClick(TreeView::Ptr* self)'
    extern 'void* ABI_TreeView_onExpand(TreeView::Ptr* self)'
    extern 'void* ABI_TreeView_onCollapse(TreeView::Ptr* self)'
    extern 'void* ABI_TreeView_onRightClick(TreeView::Ptr* self)'
    extern 'void* ABI_Scrollbar_new()'
    extern 'void ABI_Scrollbar_setMaximum(Scrollbar::Ptr* self, int maximum)'
    extern 'int ABI_Scrollbar_getMaximum(Scrollbar::Ptr* self)'
    extern 'void ABI_Scrollbar_setValue(Scrollbar::Ptr* self, int value)'
    extern 'int ABI_Scrollbar_getValue(Scrollbar::Ptr* self)'
    extern 'void ABI_Scrollbar_setViewportSize(Scrollbar::Ptr* self, int viewport)'
    extern 'int ABI_Scrollbar_getViewportSize(Scrollbar::Ptr* self)'
    extern 'void ABI_Scrollbar_setScrollAmount(Scrollbar::Ptr* self, int scrollAmount)'
    extern 'int ABI_Scrollbar_getScrollAmount(Scrollbar::Ptr* self)'
    extern 'void ABI_Scrollbar_setAutoHide(Scrollbar::Ptr* self, int autoHide)'
    extern 'int ABI_Scrollbar_getAutoHide(Scrollbar::Ptr* self)'
    extern 'void ABI_Scrollbar_setVerticalScroll(Scrollbar::Ptr* self, int vertical)'
    extern 'int ABI_Scrollbar_getVerticalScroll(Scrollbar::Ptr* self)'
    extern 'float ABI_Scrollbar_getDefaultWidth(Scrollbar::Ptr* self)'
    extern 'void* ABI_Scrollbar_onValueChange(Scrollbar::Ptr* self)'
  end

  class Util
    def self._abi_free(*a);    Abi.call_arg_map! a; Abi.ABI_STATIC_Util_free(*a); end
  end

  class Color
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_Color_new(*a)); initialized(); end
    def _abi_get_red(*a);    Abi.call_arg_map! a; Abi.ABI_Color_get_red(@pointer, *a); end
    def _abi_get_green(*a);    Abi.call_arg_map! a; Abi.ABI_Color_get_green(@pointer, *a); end
    def _abi_get_blue(*a);    Abi.call_arg_map! a; Abi.ABI_Color_get_blue(@pointer, *a); end
    def _abi_get_alpha(*a);    Abi.call_arg_map! a; Abi.ABI_Color_get_alpha(@pointer, *a); end
    def _abi_apply_opacity(*a);    Abi.call_arg_map! a; Abi.ABI_Color_applyOpacity(@pointer, *a); end
  end

  class Outline
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_Outline_new(*a)); initialized(); end
    def _abi_get_left(*a);    Abi.call_arg_map! a; Abi.ABI_Outline_getLeft(@pointer, *a); end
    def _abi_get_right(*a);    Abi.call_arg_map! a; Abi.ABI_Outline_getRight(@pointer, *a); end
    def _abi_get_top(*a);    Abi.call_arg_map! a; Abi.ABI_Outline_getTop(@pointer, *a); end
    def _abi_get_bottom(*a);    Abi.call_arg_map! a; Abi.ABI_Outline_getBottom(@pointer, *a); end
  end

  class Signal
    def _abi_connect(*a);    Abi.call_arg_map! a; Abi.ABI_Signal_connect(@pointer, *a); end
    def _abi_disconnect(*a);    Abi.call_arg_map! a; Abi.ABI_Signal_disconnect(@pointer, *a); end
    def _abi_set_enabled(*a);    Abi.call_arg_map! a; Abi.ABI_Signal_setEnabled(@pointer, *a); end
    def _abi_is_enabled(*a);    Abi.call_arg_map! a; Abi.ABI_Signal_isEnabled(@pointer, *a); end
  end

  class SignalString
    def _abi_connect(*a);    Abi.call_arg_map! a; Abi.ABI_SignalString_connect(@pointer, *a); end
  end

  class SignalBool
    def _abi_connect(*a);    Abi.call_arg_map! a; Abi.ABI_SignalBool_connect(@pointer, *a); end
  end

  class SignalInt
    def _abi_connect(*a);    Abi.call_arg_map! a; Abi.ABI_SignalInt_connect(@pointer, *a); end
  end

  class SignalUInt
    def _abi_connect(*a);    Abi.call_arg_map! a; Abi.ABI_SignalUInt_connect(@pointer, *a); end
  end

  class SignalFloat
    def _abi_connect(*a);    Abi.call_arg_map! a; Abi.ABI_SignalFloat_connect(@pointer, *a); end
  end

  class SignalRange
    def _abi_connect(*a);    Abi.call_arg_map! a; Abi.ABI_SignalRange_connect(@pointer, *a); end
  end

  class SignalPointer
    def _abi_connect(*a);    Abi.call_arg_map! a; Abi.ABI_SignalPointer_connect(@pointer, *a); end
  end

  class SignalColor
    def _abi_connect(*a);    Abi.call_arg_map! a; Abi.ABI_SignalColor_connect(@pointer, *a); end
  end

  class SignalVector2f
    def _abi_connect(*a);    Abi.call_arg_map! a; Abi.ABI_SignalVector2f_connect(@pointer, *a); end
  end

  class SignalShowEffect
    def _abi_connect(*a);    Abi.call_arg_map! a; Abi.ABI_SignalShowEffect_connect(@pointer, *a); end
  end

  class SignalAnimationType
    def _abi_connect(*a);    Abi.call_arg_map! a; Abi.ABI_SignalAnimationType_connect(@pointer, *a); end
  end

  class SignalItem
    def _abi_connect(*a);    Abi.call_arg_map! a; Abi.ABI_SignalItem_connect(@pointer, *a); end
  end

  class SignalItemHierarchy
    def _abi_connect(*a);    Abi.call_arg_map! a; Abi.ABI_SignalItemHierarchy_connect(@pointer, *a); end
    def self._abi_fetch_path(*a);    Abi.call_arg_map! a; Abi.ABI_STATIC_SignalItemHierarchy_fetchPath(*a); end
  end

  class SignalTypedIntBoolPtr
    def _abi_connect(*a);    Abi.call_arg_map! a; Abi.ABI_SignalTypedIntBoolPtr_connect(@pointer, *a); end
  end

  class SignalTypedSizeT
    def _abi_connect(*a);    Abi.call_arg_map! a; Abi.ABI_SignalTypedSizeT_connect(@pointer, *a); end
  end

  class SignalPanelListBoxItem
    def _abi_connect(*a);    Abi.call_arg_map! a; Abi.ABI_SignalPanelListBoxItem_connect(@pointer, *a); end
  end

  class Window
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_Window_new(*a)); initialized(); end
    def _abi_close(*a);    Abi.call_arg_map! a; Abi.ABI_Window_close(@pointer, *a); end
    def _abi_is_open(*a);    Abi.call_arg_map! a; Abi.ABI_Window_isOpen(@pointer, *a); end
    def _abi_set_title(*a);    Abi.call_arg_map! a; Abi.ABI_Window_setTitle(@pointer, *a); end
  end

  class BackendGui
    def _abi_set_text_size(*a);    Abi.call_arg_map! a; Abi.ABI_BackendGui_setTextSize(@pointer, *a); end
    def _abi_get_text_size(*a);    Abi.call_arg_map! a; Abi.ABI_BackendGui_getTextSize(@pointer, *a); end
    def _abi_set_absolute_view(*a);    Abi.call_arg_map! a; Abi.ABI_BackendGui_setAbsoluteView(@pointer, *a); end
    def _abi_set_relative_view(*a);    Abi.call_arg_map! a; Abi.ABI_BackendGui_setRelativeView(@pointer, *a); end
    def _abi_get_view(*a);    Abi.call_arg_map! a; Abi.ABI_BackendGui_getView(@pointer, *a); end
    def _abi_set_absolute_viewport(*a);    Abi.call_arg_map! a; Abi.ABI_BackendGui_setAbsoluteViewport(@pointer, *a); end
    def _abi_set_relative_viewport(*a);    Abi.call_arg_map! a; Abi.ABI_BackendGui_setRelativeViewport(@pointer, *a); end
    def _abi_get_viewport(*a);    Abi.call_arg_map! a; Abi.ABI_BackendGui_getViewport(@pointer, *a); end
    def _abi_set_tab_key_usage_enabled(*a);    Abi.call_arg_map! a; Abi.ABI_BackendGui_setTabKeyUsageEnabled(@pointer, *a); end
    def _abi_is_tab_key_usage_enabled(*a);    Abi.call_arg_map! a; Abi.ABI_BackendGui_isTabKeyUsageEnabled(@pointer, *a); end
    def _abi_set_font(*a);    Abi.call_arg_map! a; Abi.ABI_BackendGui_setFont(@pointer, *a); end
    def _abi_get_font(*a);    Abi.call_arg_map! a; Abi.ABI_BackendGui_getFont(@pointer, *a); end
    def _abi_unfocus_all_widgets(*a);    Abi.call_arg_map! a; Abi.ABI_BackendGui_unfocusAllWidgets(@pointer, *a); end
    def _abi_set_opacity(*a);    Abi.call_arg_map! a; Abi.ABI_BackendGui_setOpacity(@pointer, *a); end
    def _abi_get_opacity(*a);    Abi.call_arg_map! a; Abi.ABI_BackendGui_getOpacity(@pointer, *a); end
    def _abi_set_override_mouse_cursor(*a);    Abi.call_arg_map! a; Abi.ABI_BackendGui_setOverrideMouseCursor(@pointer, *a); end
    def _abi_restore_override_mouse_cursor(*a);    Abi.call_arg_map! a; Abi.ABI_BackendGui_restoreOverrideMouseCursor(@pointer, *a); end
    def _abi_map_pixel_to_coords(*a);    Abi.call_arg_map! a; Abi.ABI_BackendGui_mapPixelToCoords(@pointer, *a); end
    def _abi_map_coords_to_pixel(*a);    Abi.call_arg_map! a; Abi.ABI_BackendGui_mapCoordsToPixel(@pointer, *a); end
    def _abi_on_view_change(*a);    Abi.call_arg_map! a; Abi.ABI_BackendGui_onViewChange(@pointer, *a); end
  end

  class Font
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_Font_new(*a)); initialized(); end
  end

  class Gui
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_Gui_new(*a)); initialized(); end
    def _abi_is_active(*a);    Abi.call_arg_map! a; Abi.ABI_Gui_isActive(@pointer, *a); end
    def _abi_poll_events(*a);    Abi.call_arg_map! a; Abi.ABI_Gui_pollEvents(@pointer, *a); end
    def _abi_draw(*a);    Abi.call_arg_map! a; Abi.ABI_Gui_draw(@pointer, *a); end
    def _abi_add(*a);    Abi.call_arg_map! a; Abi.ABI_Gui_add(@pointer, *a); end
    def _abi_remove(*a);    Abi.call_arg_map! a; Abi.ABI_Gui_remove(@pointer, *a); end
    def _abi_remove_all(*a);    Abi.call_arg_map! a; Abi.ABI_Gui_removeAll(@pointer, *a); end
    def _abi_main_loop(*a);    Abi.call_arg_map! a; Abi.ABI_Gui_mainLoop(@pointer, *a); end
    def _abi_get_widget(*a);    Abi.call_arg_map! a; Abi.ABI_Gui_getWidget(@pointer, *a); end
    def _abi_set_clear_color(*a);    Abi.call_arg_map! a; Abi.ABI_Gui_setClearColor(@pointer, *a); end
    def _abi_set_clipboard(*a);    Abi.call_arg_map! a; Abi.ABI_Gui_setClipboard(@pointer, *a); end
    def _abi_get_clipboard(*a);    Abi.call_arg_map! a; Abi.ABI_Gui_getClipboard(@pointer, *a); end
  end

  class Theme
    def self._abi_set_default(*a);    Abi.call_arg_map! a; Abi.ABI_STATIC_Theme_setDefault(*a); end
    def self._abi_get_default(*a);    Abi.call_arg_map! a; Abi.ABI_STATIC_Theme_getDefault(*a); end
    def self._abi_finalizer(*a);    Abi.call_arg_map! a; Abi.ABI_STATIC_Theme_finalizer(*a); end
    def _abi_load(*a);    Abi.call_arg_map! a; Abi.ABI_Theme_load(@pointer, *a); end
  end

  class Texture
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_Texture_new(*a)); initialized(); end
    def _abi_get_id(*a);    Abi.call_arg_map! a; Abi.ABI_Texture_getId(@pointer, *a); end
    def _abi_get_image_size(*a);    Abi.call_arg_map! a; Abi.ABI_Texture_getImageSize(@pointer, *a); end
    def _abi_get_part_rect(*a);    Abi.call_arg_map! a; Abi.ABI_Texture_getPartRect(@pointer, *a); end
    def _abi_set_color(*a);    Abi.call_arg_map! a; Abi.ABI_Texture_setColor(@pointer, *a); end
    def _abi_get_color(*a);    Abi.call_arg_map! a; Abi.ABI_Texture_getColor(@pointer, *a); end
    def _abi_is_smooth(*a);    Abi.call_arg_map! a; Abi.ABI_Texture_isSmooth(@pointer, *a); end
    def self._abi_set_default_smooth(*a);    Abi.call_arg_map! a; Abi.ABI_STATIC_Texture_setDefaultSmooth(*a); end
    def self._abi_get_default_smooth(*a);    Abi.call_arg_map! a; Abi.ABI_STATIC_Texture_getDefaultSmooth(*a); end
  end

  class Widget
    def self._abi_finalizer(*a);    Abi.call_arg_map! a; Abi.ABI_STATIC_Widget_finalizer(*a); end
    def self._abi_get_unshared(*a);    Abi.call_arg_map! a; Abi.ABI_STATIC_Widget_getUnshared(*a); end
    def self._abi_get_type(*a);    Abi.call_arg_map! a; Abi.ABI_STATIC_Widget_getType(*a); end
    def _abi_get_name(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_getName(@pointer, *a); end
    def _abi_set_size(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_setSize(@pointer, *a); end
    def _abi_get_size(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_getSize(@pointer, *a); end
    def _abi_get_full_size(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_getFullSize(@pointer, *a); end
    def _abi_set_position(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_setPosition(@pointer, *a); end
    def _abi_get_position(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_getPosition(@pointer, *a); end
    def _abi_get_absolute_position(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_getAbsolutePosition(@pointer, *a); end
    def _abi_set_text_size(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_setTextSize(@pointer, *a); end
    def _abi_get_text_size(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_getTextSize(@pointer, *a); end
    def _abi_set_width(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_setWidth(@pointer, *a); end
    def _abi_set_height(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_setHeight(@pointer, *a); end
    def _abi_set_visible(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_setVisible(@pointer, *a); end
    def _abi_is_visible(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_isVisible(@pointer, *a); end
    def _abi_set_enabled(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_setEnabled(@pointer, *a); end
    def _abi_is_enabled(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_isEnabled(@pointer, *a); end
    def _abi_set_focused(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_setFocused(@pointer, *a); end
    def _abi_is_focused(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_isFocused(@pointer, *a); end
    def _abi_set_focusable(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_setFocusable(@pointer, *a); end
    def _abi_is_focusable(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_isFocusable(@pointer, *a); end
    def _abi_can_gain_focus(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_canGainFocus(@pointer, *a); end
    def _abi_is_container(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_isContainer(@pointer, *a); end
    def _abi_set_tool_tip(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_setToolTip(@pointer, *a); end
    def _abi_get_tool_tip(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_getToolTip(@pointer, *a); end
    def _abi_set_mouse_cursor(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_setMouseCursor(@pointer, *a); end
    def _abi_get_mouse_cursor(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_getMouseCursor(@pointer, *a); end
    def _abi_is_mouse_down(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_isMouseDown(@pointer, *a); end
    def _abi_show_with_effect(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_showWithEffect(@pointer, *a); end
    def _abi_hide_with_effect(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_hideWithEffect(@pointer, *a); end
    def _abi_move_with_animation(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_moveWithAnimation(@pointer, *a); end
    def _abi_resize_with_animation(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_resizeWithAnimation(@pointer, *a); end
    def _abi_is_animation_playing(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_isAnimationPlaying(@pointer, *a); end
    def _abi_move_to_front(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_moveToFront(@pointer, *a); end
    def _abi_move_to_back(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_moveToBack(@pointer, *a); end
    def _abi_finish_all_animations(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_finishAllAnimations(@pointer, *a); end
    def _abi_left_mouse_pressed(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_leftMousePressed(@pointer, *a); end
    def _abi_left_mouse_released(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_leftMouseReleased(@pointer, *a); end
    def _abi_right_mouse_pressed(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_rightMousePressed(@pointer, *a); end
    def _abi_right_mouse_released(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_rightMouseReleased(@pointer, *a); end
    def _abi_mouse_moved(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_mouseMoved(@pointer, *a); end
    def _abi_key_pressed(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_keyPressed(@pointer, *a); end
    def _abi_text_entered(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_textEntered(@pointer, *a); end
    def _abi_scrolled(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_scrolled(@pointer, *a); end
    def _abi_ask_tool_tip(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_askToolTip(@pointer, *a); end
    def _abi_set_widget_name(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_setWidgetName(@pointer, *a); end
    def _abi_get_widget_name(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_getWidgetName(@pointer, *a); end
    def _abi_on_position_change(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_onPositionChange(@pointer, *a); end
    def _abi_on_size_change(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_onSizeChange(@pointer, *a); end
    def _abi_set_color_renderer_property(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_setColorRendererProperty(@pointer, *a); end
    def _abi_get_color_renderer_property(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_getColorRendererProperty(@pointer, *a); end
    def _abi_set_string_renderer_property(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_setStringRendererProperty(@pointer, *a); end
    def _abi_get_string_renderer_property(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_getStringRendererProperty(@pointer, *a); end
    def _abi_set_font_renderer_property(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_setFontRendererProperty(@pointer, *a); end
    def _abi_get_font_renderer_property(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_getFontRendererProperty(@pointer, *a); end
    def _abi_set_boolean_renderer_property(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_setBooleanRendererProperty(@pointer, *a); end
    def _abi_get_boolean_renderer_property(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_getBooleanRendererProperty(@pointer, *a); end
    def _abi_set_float_renderer_property(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_setFloatRendererProperty(@pointer, *a); end
    def _abi_get_float_renderer_property(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_getFloatRendererProperty(@pointer, *a); end
    def _abi_set_outline_renderer_property(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_setOutlineRendererProperty(@pointer, *a); end
    def _abi_get_outline_renderer_property(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_getOutlineRendererProperty(@pointer, *a); end
    def _abi_set_texture_renderer_property(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_setTextureRendererProperty(@pointer, *a); end
    def _abi_get_texture_renderer_property(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_getTextureRendererProperty(@pointer, *a); end
    def _abi_set_text_styles_renderer_property(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_setTextStylesRendererProperty(@pointer, *a); end
    def _abi_get_text_styles_renderer_property(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_getTextStylesRendererProperty(@pointer, *a); end
    def _abi_on_focus(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_onFocus(@pointer, *a); end
    def _abi_on_unfocus(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_onUnfocus(@pointer, *a); end
    def _abi_on_mouse_enter(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_onMouseEnter(@pointer, *a); end
    def _abi_on_mouse_leave(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_onMouseLeave(@pointer, *a); end
    def _abi_on_show_effect_finish(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_onShowEffectFinish(@pointer, *a); end
    def _abi_on_animation_finish(*a);    Abi.call_arg_map! a; Abi.ABI_Widget_onAnimationFinish(@pointer, *a); end
  end

  class ClickableWidget
    def _abi_on_mouse_press(*a);    Abi.call_arg_map! a; Abi.ABI_ClickableWidget_onMousePress(@pointer, *a); end
    def _abi_on_mouse_release(*a);    Abi.call_arg_map! a; Abi.ABI_ClickableWidget_onMouseRelease(@pointer, *a); end
    def _abi_on_click(*a);    Abi.call_arg_map! a; Abi.ABI_ClickableWidget_onClick(@pointer, *a); end
    def _abi_on_right_mouse_press(*a);    Abi.call_arg_map! a; Abi.ABI_ClickableWidget_onRightMousePress(@pointer, *a); end
    def _abi_on_right_mouse_release(*a);    Abi.call_arg_map! a; Abi.ABI_ClickableWidget_onRightMouseRelease(@pointer, *a); end
    def _abi_on_right_click(*a);    Abi.call_arg_map! a; Abi.ABI_ClickableWidget_onRightClick(@pointer, *a); end
  end

  class ButtonBase
    def _abi_set_text_position(*a);    Abi.call_arg_map! a; Abi.ABI_ButtonBase_setTextPosition(@pointer, *a); end
    def _abi_set_text(*a);    Abi.call_arg_map! a; Abi.ABI_ButtonBase_setText(@pointer, *a); end
    def _abi_get_text(*a);    Abi.call_arg_map! a; Abi.ABI_ButtonBase_getText(@pointer, *a); end
  end

  class Button
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_Button_new(*a)); initialized(); end
    def _abi_on_press(*a);    Abi.call_arg_map! a; Abi.ABI_Button_onPress(@pointer, *a); end
  end

  class BitmapButton
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_BitmapButton_new(*a)); initialized(); end
    def _abi_set_image(*a);    Abi.call_arg_map! a; Abi.ABI_BitmapButton_setImage(@pointer, *a); end
    def _abi_get_image(*a);    Abi.call_arg_map! a; Abi.ABI_BitmapButton_getImage(@pointer, *a); end
    def _abi_set_image_scaling(*a);    Abi.call_arg_map! a; Abi.ABI_BitmapButton_setImageScaling(@pointer, *a); end
    def _abi_get_image_scaling(*a);    Abi.call_arg_map! a; Abi.ABI_BitmapButton_getImageScaling(@pointer, *a); end
  end

  class EditBox
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_EditBox_new(*a)); initialized(); end
    def _abi_set_text(*a);    Abi.call_arg_map! a; Abi.ABI_EditBox_setText(@pointer, *a); end
    def _abi_get_text(*a);    Abi.call_arg_map! a; Abi.ABI_EditBox_getText(@pointer, *a); end
    def _abi_set_default_text(*a);    Abi.call_arg_map! a; Abi.ABI_EditBox_setDefaultText(@pointer, *a); end
    def _abi_get_default_text(*a);    Abi.call_arg_map! a; Abi.ABI_EditBox_getDefaultText(@pointer, *a); end
    def _abi_select_text(*a);    Abi.call_arg_map! a; Abi.ABI_EditBox_selectText(@pointer, *a); end
    def _abi_get_selected_text(*a);    Abi.call_arg_map! a; Abi.ABI_EditBox_getSelectedText(@pointer, *a); end
    def _abi_set_password_character(*a);    Abi.call_arg_map! a; Abi.ABI_EditBox_setPasswordCharacter(@pointer, *a); end
    def _abi_get_password_character(*a);    Abi.call_arg_map! a; Abi.ABI_EditBox_getPasswordCharacter(@pointer, *a); end
    def _abi_set_maximum_characters(*a);    Abi.call_arg_map! a; Abi.ABI_EditBox_setMaximumCharacters(@pointer, *a); end
    def _abi_get_maximum_characters(*a);    Abi.call_arg_map! a; Abi.ABI_EditBox_getMaximumCharacters(@pointer, *a); end
    def _abi_set_alignment(*a);    Abi.call_arg_map! a; Abi.ABI_EditBox_setAlignment(@pointer, *a); end
    def _abi_get_alignment(*a);    Abi.call_arg_map! a; Abi.ABI_EditBox_getAlignment(@pointer, *a); end
    def _abi_limit_text_width(*a);    Abi.call_arg_map! a; Abi.ABI_EditBox_limitTextWidth(@pointer, *a); end
    def _abi_is_text_width_limited(*a);    Abi.call_arg_map! a; Abi.ABI_EditBox_isTextWidthLimited(@pointer, *a); end
    def _abi_set_read_only(*a);    Abi.call_arg_map! a; Abi.ABI_EditBox_setReadOnly(@pointer, *a); end
    def _abi_is_read_only(*a);    Abi.call_arg_map! a; Abi.ABI_EditBox_isReadOnly(@pointer, *a); end
    def _abi_set_caret_position(*a);    Abi.call_arg_map! a; Abi.ABI_EditBox_setCaretPosition(@pointer, *a); end
    def _abi_get_caret_position(*a);    Abi.call_arg_map! a; Abi.ABI_EditBox_getCaretPosition(@pointer, *a); end
    def _abi_set_suffix(*a);    Abi.call_arg_map! a; Abi.ABI_EditBox_setSuffix(@pointer, *a); end
    def _abi_get_suffix(*a);    Abi.call_arg_map! a; Abi.ABI_EditBox_getSuffix(@pointer, *a); end
    def _abi_on_text_change(*a);    Abi.call_arg_map! a; Abi.ABI_EditBox_onTextChange(@pointer, *a); end
    def _abi_on_return_key_press(*a);    Abi.call_arg_map! a; Abi.ABI_EditBox_onReturnKeyPress(@pointer, *a); end
    def _abi_on_return_or_unfocus(*a);    Abi.call_arg_map! a; Abi.ABI_EditBox_onReturnOrUnfocus(@pointer, *a); end
    def _abi_on_caret_position_change(*a);    Abi.call_arg_map! a; Abi.ABI_EditBox_onCaretPositionChange(@pointer, *a); end
  end

  class Label
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_Label_new(*a)); initialized(); end
    def _abi_set_text(*a);    Abi.call_arg_map! a; Abi.ABI_Label_setText(@pointer, *a); end
    def _abi_get_text(*a);    Abi.call_arg_map! a; Abi.ABI_Label_getText(@pointer, *a); end
    def _abi_set_horizontal_alignment(*a);    Abi.call_arg_map! a; Abi.ABI_Label_setHorizontalAlignment(@pointer, *a); end
    def _abi_get_horizontal_alignment(*a);    Abi.call_arg_map! a; Abi.ABI_Label_getHorizontalAlignment(@pointer, *a); end
    def _abi_set_vertical_alignment(*a);    Abi.call_arg_map! a; Abi.ABI_Label_setVerticalAlignment(@pointer, *a); end
    def _abi_get_vertical_alignment(*a);    Abi.call_arg_map! a; Abi.ABI_Label_getVerticalAlignment(@pointer, *a); end
    def _abi_set_scrollbar_policy(*a);    Abi.call_arg_map! a; Abi.ABI_Label_setScrollbarPolicy(@pointer, *a); end
    def _abi_get_scrollbar_policy(*a);    Abi.call_arg_map! a; Abi.ABI_Label_getScrollbarPolicy(@pointer, *a); end
    def _abi_set_scrollbar_value(*a);    Abi.call_arg_map! a; Abi.ABI_Label_setScrollbarValue(@pointer, *a); end
    def _abi_get_scrollbar_value(*a);    Abi.call_arg_map! a; Abi.ABI_Label_getScrollbarValue(@pointer, *a); end
    def _abi_set_auto_size(*a);    Abi.call_arg_map! a; Abi.ABI_Label_setAutoSize(@pointer, *a); end
    def _abi_get_auto_size(*a);    Abi.call_arg_map! a; Abi.ABI_Label_getAutoSize(@pointer, *a); end
    def _abi_set_maximum_text_width(*a);    Abi.call_arg_map! a; Abi.ABI_Label_setMaximumTextWidth(@pointer, *a); end
    def _abi_get_maximum_text_width(*a);    Abi.call_arg_map! a; Abi.ABI_Label_getMaximumTextWidth(@pointer, *a); end
    def _abi_ignore_mouse_events(*a);    Abi.call_arg_map! a; Abi.ABI_Label_ignoreMouseEvents(@pointer, *a); end
    def _abi_ignoring_mouse_events(*a);    Abi.call_arg_map! a; Abi.ABI_Label_ignoringMouseEvents(@pointer, *a); end
  end

  class RadioButton
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_RadioButton_new(*a)); initialized(); end
    def _abi_set_text(*a);    Abi.call_arg_map! a; Abi.ABI_RadioButton_setText(@pointer, *a); end
    def _abi_get_text(*a);    Abi.call_arg_map! a; Abi.ABI_RadioButton_getText(@pointer, *a); end
    def _abi_set_checked(*a);    Abi.call_arg_map! a; Abi.ABI_RadioButton_setChecked(@pointer, *a); end
    def _abi_is_checked(*a);    Abi.call_arg_map! a; Abi.ABI_RadioButton_isChecked(@pointer, *a); end
    def _abi_set_text_clickable(*a);    Abi.call_arg_map! a; Abi.ABI_RadioButton_setTextClickable(@pointer, *a); end
    def _abi_is_text_clickable(*a);    Abi.call_arg_map! a; Abi.ABI_RadioButton_isTextClickable(@pointer, *a); end
    def _abi_on_check(*a);    Abi.call_arg_map! a; Abi.ABI_RadioButton_onCheck(@pointer, *a); end
    def _abi_on_uncheck(*a);    Abi.call_arg_map! a; Abi.ABI_RadioButton_onUncheck(@pointer, *a); end
    def _abi_on_change(*a);    Abi.call_arg_map! a; Abi.ABI_RadioButton_onChange(@pointer, *a); end
  end

  class CheckBox
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_CheckBox_new(*a)); initialized(); end
  end

  class Knob
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_Knob_new(*a)); initialized(); end
    def _abi_set_start_rotation(*a);    Abi.call_arg_map! a; Abi.ABI_Knob_setStartRotation(@pointer, *a); end
    def _abi_get_start_rotation(*a);    Abi.call_arg_map! a; Abi.ABI_Knob_getStartRotation(@pointer, *a); end
    def _abi_set_end_rotation(*a);    Abi.call_arg_map! a; Abi.ABI_Knob_setEndRotation(@pointer, *a); end
    def _abi_get_end_rotation(*a);    Abi.call_arg_map! a; Abi.ABI_Knob_getEndRotation(@pointer, *a); end
    def _abi_set_minimum(*a);    Abi.call_arg_map! a; Abi.ABI_Knob_setMinimum(@pointer, *a); end
    def _abi_get_minimum(*a);    Abi.call_arg_map! a; Abi.ABI_Knob_getMinimum(@pointer, *a); end
    def _abi_set_maximum(*a);    Abi.call_arg_map! a; Abi.ABI_Knob_setMaximum(@pointer, *a); end
    def _abi_get_maximum(*a);    Abi.call_arg_map! a; Abi.ABI_Knob_getMaximum(@pointer, *a); end
    def _abi_set_value(*a);    Abi.call_arg_map! a; Abi.ABI_Knob_setValue(@pointer, *a); end
    def _abi_get_value(*a);    Abi.call_arg_map! a; Abi.ABI_Knob_getValue(@pointer, *a); end
    def _abi_set_clockwise_turning(*a);    Abi.call_arg_map! a; Abi.ABI_Knob_setClockwiseTurning(@pointer, *a); end
    def _abi_get_clockwise_turning(*a);    Abi.call_arg_map! a; Abi.ABI_Knob_getClockwiseTurning(@pointer, *a); end
    def _abi_on_value_change(*a);    Abi.call_arg_map! a; Abi.ABI_Knob_onValueChange(@pointer, *a); end
  end

  class ChatBox
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_ChatBox_new(*a)); initialized(); end
    def _abi_add_line(*a);    Abi.call_arg_map! a; Abi.ABI_ChatBox_addLine(@pointer, *a); end
    def _abi_get_line(*a);    Abi.call_arg_map! a; Abi.ABI_ChatBox_getLine(@pointer, *a); end
    def _abi_get_line_color(*a);    Abi.call_arg_map! a; Abi.ABI_ChatBox_getLineColor(@pointer, *a); end
    def _abi_get_line_text_style(*a);    Abi.call_arg_map! a; Abi.ABI_ChatBox_getLineTextStyle(@pointer, *a); end
    def _abi_remove_line(*a);    Abi.call_arg_map! a; Abi.ABI_ChatBox_removeLine(@pointer, *a); end
    def _abi_remove_all_lines(*a);    Abi.call_arg_map! a; Abi.ABI_ChatBox_removeAllLines(@pointer, *a); end
    def _abi_get_line_amount(*a);    Abi.call_arg_map! a; Abi.ABI_ChatBox_getLineAmount(@pointer, *a); end
    def _abi_set_line_limit(*a);    Abi.call_arg_map! a; Abi.ABI_ChatBox_setLineLimit(@pointer, *a); end
    def _abi_get_line_limit(*a);    Abi.call_arg_map! a; Abi.ABI_ChatBox_getLineLimit(@pointer, *a); end
    def _abi_set_text_color(*a);    Abi.call_arg_map! a; Abi.ABI_ChatBox_setTextColor(@pointer, *a); end
    def _abi_get_text_color(*a);    Abi.call_arg_map! a; Abi.ABI_ChatBox_getTextColor(@pointer, *a); end
    def _abi_set_text_style(*a);    Abi.call_arg_map! a; Abi.ABI_ChatBox_setTextStyle(@pointer, *a); end
    def _abi_get_text_style(*a);    Abi.call_arg_map! a; Abi.ABI_ChatBox_getTextStyle(@pointer, *a); end
    def _abi_set_lines_start_from_top(*a);    Abi.call_arg_map! a; Abi.ABI_ChatBox_setLinesStartFromTop(@pointer, *a); end
    def _abi_get_lines_start_from_top(*a);    Abi.call_arg_map! a; Abi.ABI_ChatBox_getLinesStartFromTop(@pointer, *a); end
    def _abi_set_new_lines_below_others(*a);    Abi.call_arg_map! a; Abi.ABI_ChatBox_setNewLinesBelowOthers(@pointer, *a); end
    def _abi_get_new_lines_below_others(*a);    Abi.call_arg_map! a; Abi.ABI_ChatBox_getNewLinesBelowOthers(@pointer, *a); end
    def _abi_set_scrollbar_value(*a);    Abi.call_arg_map! a; Abi.ABI_ChatBox_setScrollbarValue(@pointer, *a); end
    def _abi_get_scrollbar_value(*a);    Abi.call_arg_map! a; Abi.ABI_ChatBox_getScrollbarValue(@pointer, *a); end
  end

  class Container
    def _abi_get_widgets(*a);    Abi.call_arg_map! a; Abi.ABI_Container_get_widgets(@pointer, *a); end
    def _abi_add(*a);    Abi.call_arg_map! a; Abi.ABI_Container_add(@pointer, *a); end
    def _abi_get(*a);    Abi.call_arg_map! a; Abi.ABI_Container_get(@pointer, *a); end
    def _abi_remove(*a);    Abi.call_arg_map! a; Abi.ABI_Container_remove(@pointer, *a); end
    def _abi_remove_all_widgets(*a);    Abi.call_arg_map! a; Abi.ABI_Container_removeAllWidgets(@pointer, *a); end
    def _abi_get_inner_size(*a);    Abi.call_arg_map! a; Abi.ABI_Container_getInnerSize(@pointer, *a); end
    def _abi_get_child_widgets_offset(*a);    Abi.call_arg_map! a; Abi.ABI_Container_getChildWidgetsOffset(@pointer, *a); end
    def _abi_move_widget_to_front(*a);    Abi.call_arg_map! a; Abi.ABI_Container_moveWidgetToFront(@pointer, *a); end
    def _abi_move_widget_to_back(*a);    Abi.call_arg_map! a; Abi.ABI_Container_moveWidgetToBack(@pointer, *a); end
    def _abi_move_widget_forward(*a);    Abi.call_arg_map! a; Abi.ABI_Container_moveWidgetForward(@pointer, *a); end
    def _abi_move_widget_backward(*a);    Abi.call_arg_map! a; Abi.ABI_Container_moveWidgetBackward(@pointer, *a); end
    def _abi_set_widget_index(*a);    Abi.call_arg_map! a; Abi.ABI_Container_setWidgetIndex(@pointer, *a); end
    def _abi_get_widget_index(*a);    Abi.call_arg_map! a; Abi.ABI_Container_getWidgetIndex(@pointer, *a); end
    def _abi_get_focused_child(*a);    Abi.call_arg_map! a; Abi.ABI_Container_getFocusedChild(@pointer, *a); end
    def _abi_get_focused_leaf(*a);    Abi.call_arg_map! a; Abi.ABI_Container_getFocusedLeaf(@pointer, *a); end
    def _abi_get_widget_at_position(*a);    Abi.call_arg_map! a; Abi.ABI_Container_getWidgetAtPosition(@pointer, *a); end
    def _abi_focus_next_widget(*a);    Abi.call_arg_map! a; Abi.ABI_Container_focusNextWidget(@pointer, *a); end
    def _abi_focus_previous_widget(*a);    Abi.call_arg_map! a; Abi.ABI_Container_focusPreviousWidget(@pointer, *a); end
  end

  class ChildWindow
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_ChildWindow_new(*a)); initialized(); end
    def _abi_set_client_size(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_setClientSize(@pointer, *a); end
    def _abi_get_client_size(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_getClientSize(@pointer, *a); end
    def _abi_set_maximum_size(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_setMaximumSize(@pointer, *a); end
    def _abi_get_maximum_size(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_getMaximumSize(@pointer, *a); end
    def _abi_set_minimum_size(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_setMinimumSize(@pointer, *a); end
    def _abi_get_minimum_size(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_getMinimumSize(@pointer, *a); end
    def _abi_set_title(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_setTitle(@pointer, *a); end
    def _abi_get_title(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_getTitle(@pointer, *a); end
    def _abi_set_title_text_size(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_setTitleTextSize(@pointer, *a); end
    def _abi_get_title_text_size(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_getTitleTextSize(@pointer, *a); end
    def _abi_set_title_alignment(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_setTitleAlignment(@pointer, *a); end
    def _abi_get_title_alignment(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_getTitleAlignment(@pointer, *a); end
    def _abi_set_title_buttons(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_setTitleButtons(@pointer, *a); end
    def _abi_get_title_buttons(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_getTitleButtons(@pointer, *a); end
    def _abi_close(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_close(@pointer, *a); end
    def _abi_destroy(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_destroy(@pointer, *a); end
    def _abi_set_resizable(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_setResizable(@pointer, *a); end
    def _abi_is_resizable(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_isResizable(@pointer, *a); end
    def _abi_set_position_locked(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_setPositionLocked(@pointer, *a); end
    def _abi_is_position_locked(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_isPositionLocked(@pointer, *a); end
    def _abi_set_keep_in_parent(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_setKeepInParent(@pointer, *a); end
    def _abi_is_kept_in_parent(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_isKeptInParent(@pointer, *a); end
    def _abi_on_mouse_press(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_onMousePress(@pointer, *a); end
    def _abi_on_close(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_onClose(@pointer, *a); end
    def _abi_on_minimize(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_onMinimize(@pointer, *a); end
    def _abi_on_maximize(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_onMaximize(@pointer, *a); end
    def _abi_on_escape_key_press(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_onEscapeKeyPress(@pointer, *a); end
    def _abi_on_closing(*a);    Abi.call_arg_map! a; Abi.ABI_ChildWindow_onClosing(@pointer, *a); end
  end

  class Group
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_Group_new(*a)); initialized(); end
  end

  class BoxLayout
    def _abi_get_by_index(*a);    Abi.call_arg_map! a; Abi.ABI_BoxLayout_getByIndex(@pointer, *a); end
    def _abi_insert(*a);    Abi.call_arg_map! a; Abi.ABI_BoxLayout_insert(@pointer, *a); end
    def _abi_remove_by_index(*a);    Abi.call_arg_map! a; Abi.ABI_BoxLayout_removeByIndex(@pointer, *a); end
  end

  class BoxLayoutRatios
    def _abi_add_space(*a);    Abi.call_arg_map! a; Abi.ABI_BoxLayoutRatios_addSpace(@pointer, *a); end
    def _abi_insert_space(*a);    Abi.call_arg_map! a; Abi.ABI_BoxLayoutRatios_insertSpace(@pointer, *a); end
    def _abi_set_ratio(*a);    Abi.call_arg_map! a; Abi.ABI_BoxLayoutRatios_setRatio(@pointer, *a); end
    def _abi_set_ratio_by_index(*a);    Abi.call_arg_map! a; Abi.ABI_BoxLayoutRatios_setRatioByIndex(@pointer, *a); end
    def _abi_get_ratio(*a);    Abi.call_arg_map! a; Abi.ABI_BoxLayoutRatios_getRatio(@pointer, *a); end
    def _abi_get_ratio_by_index(*a);    Abi.call_arg_map! a; Abi.ABI_BoxLayoutRatios_getRatioByIndex(@pointer, *a); end
  end

  class HorizontalLayout
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_HorizontalLayout_new(*a)); initialized(); end
  end

  class VerticalLayout
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_VerticalLayout_new(*a)); initialized(); end
  end

  class HorizontalWrap
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_HorizontalWrap_new(*a)); initialized(); end
  end

  class RadioButtonGroup
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_RadioButtonGroup_new(*a)); initialized(); end
    def _abi_uncheck_radio_buttons(*a);    Abi.call_arg_map! a; Abi.ABI_RadioButtonGroup_uncheckRadioButtons(@pointer, *a); end
    def _abi_get_checked_radio_button(*a);    Abi.call_arg_map! a; Abi.ABI_RadioButtonGroup_getCheckedRadioButton(@pointer, *a); end
  end

  class Panel
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_Panel_new(*a)); initialized(); end
    def _abi_on_mouse_press(*a);    Abi.call_arg_map! a; Abi.ABI_Panel_onMousePress(@pointer, *a); end
    def _abi_on_mouse_release(*a);    Abi.call_arg_map! a; Abi.ABI_Panel_onMouseRelease(@pointer, *a); end
    def _abi_on_click(*a);    Abi.call_arg_map! a; Abi.ABI_Panel_onClick(@pointer, *a); end
    def _abi_on_double_click(*a);    Abi.call_arg_map! a; Abi.ABI_Panel_onDoubleClick(@pointer, *a); end
    def _abi_on_right_mouse_press(*a);    Abi.call_arg_map! a; Abi.ABI_Panel_onRightMousePress(@pointer, *a); end
    def _abi_on_right_mouse_release(*a);    Abi.call_arg_map! a; Abi.ABI_Panel_onRightMouseRelease(@pointer, *a); end
    def _abi_on_right_click(*a);    Abi.call_arg_map! a; Abi.ABI_Panel_onRightClick(@pointer, *a); end
  end

  class ScrollablePanel
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_ScrollablePanel_new(*a)); initialized(); end
    def _abi_set_content_size(*a);    Abi.call_arg_map! a; Abi.ABI_ScrollablePanel_setContentSize(@pointer, *a); end
    def _abi_get_content_size(*a);    Abi.call_arg_map! a; Abi.ABI_ScrollablePanel_getContentSize(@pointer, *a); end
    def _abi_get_content_offset(*a);    Abi.call_arg_map! a; Abi.ABI_ScrollablePanel_getContentOffset(@pointer, *a); end
    def _abi_get_scrollbar_width(*a);    Abi.call_arg_map! a; Abi.ABI_ScrollablePanel_getScrollbarWidth(@pointer, *a); end
    def _abi_set_vertical_scrollbar_policy(*a);    Abi.call_arg_map! a; Abi.ABI_ScrollablePanel_setVerticalScrollbarPolicy(@pointer, *a); end
    def _abi_get_vertical_scrollbar_policy(*a);    Abi.call_arg_map! a; Abi.ABI_ScrollablePanel_getVerticalScrollbarPolicy(@pointer, *a); end
    def _abi_set_horizontal_scrollbar_policy(*a);    Abi.call_arg_map! a; Abi.ABI_ScrollablePanel_setHorizontalScrollbarPolicy(@pointer, *a); end
    def _abi_get_horizontal_scrollbar_policy(*a);    Abi.call_arg_map! a; Abi.ABI_ScrollablePanel_getHorizontalScrollbarPolicy(@pointer, *a); end
    def _abi_set_vertical_scroll_amount(*a);    Abi.call_arg_map! a; Abi.ABI_ScrollablePanel_setVerticalScrollAmount(@pointer, *a); end
    def _abi_get_vertical_scroll_amount(*a);    Abi.call_arg_map! a; Abi.ABI_ScrollablePanel_getVerticalScrollAmount(@pointer, *a); end
    def _abi_set_horizontal_scroll_amount(*a);    Abi.call_arg_map! a; Abi.ABI_ScrollablePanel_setHorizontalScrollAmount(@pointer, *a); end
    def _abi_get_horizontal_scroll_amount(*a);    Abi.call_arg_map! a; Abi.ABI_ScrollablePanel_getHorizontalScrollAmount(@pointer, *a); end
    def _abi_set_vertical_scrollbar_value(*a);    Abi.call_arg_map! a; Abi.ABI_ScrollablePanel_setVerticalScrollbarValue(@pointer, *a); end
    def _abi_get_vertical_scrollbar_value(*a);    Abi.call_arg_map! a; Abi.ABI_ScrollablePanel_getVerticalScrollbarValue(@pointer, *a); end
    def _abi_set_horizontal_scrollbar_value(*a);    Abi.call_arg_map! a; Abi.ABI_ScrollablePanel_setHorizontalScrollbarValue(@pointer, *a); end
    def _abi_get_horizontal_scrollbar_value(*a);    Abi.call_arg_map! a; Abi.ABI_ScrollablePanel_getHorizontalScrollbarValue(@pointer, *a); end
  end

  class Grid
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_Grid_new(*a)); initialized(); end
    def _abi_set_auto_size(*a);    Abi.call_arg_map! a; Abi.ABI_Grid_setAutoSize(@pointer, *a); end
    def _abi_is_auto_size(*a);    Abi.call_arg_map! a; Abi.ABI_Grid_isAutoSize(@pointer, *a); end
    def _abi_set_widget_cell(*a);    Abi.call_arg_map! a; Abi.ABI_Grid_setWidgetCell(@pointer, *a); end
    def _abi_get_widget(*a);    Abi.call_arg_map! a; Abi.ABI_Grid_getWidget(@pointer, *a); end
    def _abi_set_widget_padding(*a);    Abi.call_arg_map! a; Abi.ABI_Grid_setWidgetPadding(@pointer, *a); end
    def _abi_get_widget_padding(*a);    Abi.call_arg_map! a; Abi.ABI_Grid_getWidgetPadding(@pointer, *a); end
    def _abi_set_widget_alignment(*a);    Abi.call_arg_map! a; Abi.ABI_Grid_setWidgetAlignment(@pointer, *a); end
    def _abi_get_widget_alignment(*a);    Abi.call_arg_map! a; Abi.ABI_Grid_getWidgetAlignment(@pointer, *a); end
    def _abi_get_widget_locations(*a);    Abi.call_arg_map! a; Abi.ABI_Grid_getWidgetLocations(@pointer, *a); end
  end

  class ListBox
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_ListBox_new(*a)); initialized(); end
    def _abi_add_item(*a);    Abi.call_arg_map! a; Abi.ABI_ListBox_addItem(@pointer, *a); end
    def _abi_set_selected_item(*a);    Abi.call_arg_map! a; Abi.ABI_ListBox_setSelectedItem(@pointer, *a); end
    def _abi_set_selected_item_by_id(*a);    Abi.call_arg_map! a; Abi.ABI_ListBox_setSelectedItemById(@pointer, *a); end
    def _abi_set_selected_item_by_index(*a);    Abi.call_arg_map! a; Abi.ABI_ListBox_setSelectedItemByIndex(@pointer, *a); end
    def _abi_deselect_item(*a);    Abi.call_arg_map! a; Abi.ABI_ListBox_deselectItem(@pointer, *a); end
    def _abi_remove_item(*a);    Abi.call_arg_map! a; Abi.ABI_ListBox_removeItem(@pointer, *a); end
    def _abi_remove_item_by_id(*a);    Abi.call_arg_map! a; Abi.ABI_ListBox_removeItemById(@pointer, *a); end
    def _abi_remove_item_by_index(*a);    Abi.call_arg_map! a; Abi.ABI_ListBox_removeItemByIndex(@pointer, *a); end
    def _abi_remove_all_items(*a);    Abi.call_arg_map! a; Abi.ABI_ListBox_removeAllItems(@pointer, *a); end
    def _abi_get_item_by_id(*a);    Abi.call_arg_map! a; Abi.ABI_ListBox_getItemById(@pointer, *a); end
    def _abi_get_item_by_index(*a);    Abi.call_arg_map! a; Abi.ABI_ListBox_getItemByIndex(@pointer, *a); end
    def _abi_get_index_by_id(*a);    Abi.call_arg_map! a; Abi.ABI_ListBox_getIndexById(@pointer, *a); end
    def _abi_get_id_by_index(*a);    Abi.call_arg_map! a; Abi.ABI_ListBox_getIdByIndex(@pointer, *a); end
    def _abi_get_selected_item(*a);    Abi.call_arg_map! a; Abi.ABI_ListBox_getSelectedItem(@pointer, *a); end
    def _abi_get_selected_item_id(*a);    Abi.call_arg_map! a; Abi.ABI_ListBox_getSelectedItemId(@pointer, *a); end
    def _abi_get_selected_item_index(*a);    Abi.call_arg_map! a; Abi.ABI_ListBox_getSelectedItemIndex(@pointer, *a); end
    def _abi_change_item(*a);    Abi.call_arg_map! a; Abi.ABI_ListBox_changeItem(@pointer, *a); end
    def _abi_change_item_by_id(*a);    Abi.call_arg_map! a; Abi.ABI_ListBox_changeItemById(@pointer, *a); end
    def _abi_change_item_by_index(*a);    Abi.call_arg_map! a; Abi.ABI_ListBox_changeItemByIndex(@pointer, *a); end
    def _abi_get_item_count(*a);    Abi.call_arg_map! a; Abi.ABI_ListBox_getItemCount(@pointer, *a); end
    def _abi_get_items(*a);    Abi.call_arg_map! a; Abi.ABI_ListBox_getItems(@pointer, *a); end
    def _abi_get_item_ids(*a);    Abi.call_arg_map! a; Abi.ABI_ListBox_getItemIds(@pointer, *a); end
    def _abi_set_item_height(*a);    Abi.call_arg_map! a; Abi.ABI_ListBox_setItemHeight(@pointer, *a); end
    def _abi_get_item_height(*a);    Abi.call_arg_map! a; Abi.ABI_ListBox_getItemHeight(@pointer, *a); end
    def _abi_set_maximum_items(*a);    Abi.call_arg_map! a; Abi.ABI_ListBox_setMaximumItems(@pointer, *a); end
    def _abi_get_maximum_items(*a);    Abi.call_arg_map! a; Abi.ABI_ListBox_getMaximumItems(@pointer, *a); end
    def _abi_set_auto_scroll(*a);    Abi.call_arg_map! a; Abi.ABI_ListBox_setAutoScroll(@pointer, *a); end
    def _abi_get_auto_scroll(*a);    Abi.call_arg_map! a; Abi.ABI_ListBox_getAutoScroll(@pointer, *a); end
    def _abi_set_text_alignment(*a);    Abi.call_arg_map! a; Abi.ABI_ListBox_setTextAlignment(@pointer, *a); end
    def _abi_get_text_alignment(*a);    Abi.call_arg_map! a; Abi.ABI_ListBox_getTextAlignment(@pointer, *a); end
    def _abi_contains(*a);    Abi.call_arg_map! a; Abi.ABI_ListBox_contains(@pointer, *a); end
    def _abi_contains_id(*a);    Abi.call_arg_map! a; Abi.ABI_ListBox_containsId(@pointer, *a); end
    def _abi_set_scrollbar_value(*a);    Abi.call_arg_map! a; Abi.ABI_ListBox_setScrollbarValue(@pointer, *a); end
    def _abi_get_scrollbar_value(*a);    Abi.call_arg_map! a; Abi.ABI_ListBox_getScrollbarValue(@pointer, *a); end
    def _abi_on_item_select(*a);    Abi.call_arg_map! a; Abi.ABI_ListBox_onItemSelect(@pointer, *a); end
    def _abi_on_mouse_press(*a);    Abi.call_arg_map! a; Abi.ABI_ListBox_onMousePress(@pointer, *a); end
    def _abi_on_mouse_release(*a);    Abi.call_arg_map! a; Abi.ABI_ListBox_onMouseRelease(@pointer, *a); end
    def _abi_on_double_click(*a);    Abi.call_arg_map! a; Abi.ABI_ListBox_onDoubleClick(@pointer, *a); end
    def _abi_on_scroll(*a);    Abi.call_arg_map! a; Abi.ABI_ListBox_onScroll(@pointer, *a); end
  end

  class ListView
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_ListView_new(*a)); initialized(); end
    def _abi_add_column(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_addColumn(@pointer, *a); end
    def _abi_set_column_text(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_setColumnText(@pointer, *a); end
    def _abi_get_column_text(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getColumnText(@pointer, *a); end
    def _abi_set_column_width(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_setColumnWidth(@pointer, *a); end
    def _abi_get_column_width(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getColumnWidth(@pointer, *a); end
    def _abi_set_column_alignment(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_setColumnAlignment(@pointer, *a); end
    def _abi_get_column_alignment(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getColumnAlignment(@pointer, *a); end
    def _abi_set_column_auto_resize(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_setColumnAutoResize(@pointer, *a); end
    def _abi_get_column_auto_resize(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getColumnAutoResize(@pointer, *a); end
    def _abi_set_column_expanded(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_setColumnExpanded(@pointer, *a); end
    def _abi_get_column_expanded(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getColumnExpanded(@pointer, *a); end
    def _abi_remove_all_columns(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_removeAllColumns(@pointer, *a); end
    def _abi_get_column_count(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getColumnCount(@pointer, *a); end
    def _abi_set_header_height(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_setHeaderHeight(@pointer, *a); end
    def _abi_get_header_height(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getHeaderHeight(@pointer, *a); end
    def _abi_get_current_header_height(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getCurrentHeaderHeight(@pointer, *a); end
    def _abi_set_header_visible(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_setHeaderVisible(@pointer, *a); end
    def _abi_header_visible(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_headerVisible(@pointer, *a); end
    def _abi_add_item(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_addItem(@pointer, *a); end
    def _abi_insert_item(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_insertItem(@pointer, *a); end
    def _abi_change_item(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_changeItem(@pointer, *a); end
    def _abi_change_subitem(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_changeSubitem(@pointer, *a); end
    def _abi_remove_item(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_removeItem(@pointer, *a); end
    def _abi_remove_all_items(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_removeAllItems(@pointer, *a); end
    def _abi_set_selected_item(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_setSelectedItem(@pointer, *a); end
    def _abi_set_selected_items(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_setSelectedItems(@pointer, *a); end
    def _abi_deselect_items(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_deselectItems(@pointer, *a); end
    def _abi_get_selected_item_index(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getSelectedItemIndex(@pointer, *a); end
    def _abi_get_selected_item_indices(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getSelectedItemIndices(@pointer, *a); end
    def _abi_set_multi_select(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_setMultiSelect(@pointer, *a); end
    def _abi_multi_select(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_multiSelect(@pointer, *a); end
    def _abi_set_item_icon(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_setItemIcon(@pointer, *a); end
    def _abi_get_item_icon(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getItemIcon(@pointer, *a); end
    def _abi_get_item_count(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getItemCount(@pointer, *a); end
    def _abi_get_item_row(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getItemRow(@pointer, *a); end
    def _abi_get_item_cell(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getItemCell(@pointer, *a); end
    def _abi_get_item_rows(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getItemRows(@pointer, *a); end
    def _abi_set_item_height(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_setItemHeight(@pointer, *a); end
    def _abi_get_item_height(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getItemHeight(@pointer, *a); end
    def _abi_set_header_text_size(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_setHeaderTextSize(@pointer, *a); end
    def _abi_get_header_text_size(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getHeaderTextSize(@pointer, *a); end
    def _abi_set_separator_width(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_setSeparatorWidth(@pointer, *a); end
    def _abi_get_separator_width(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getSeparatorWidth(@pointer, *a); end
    def _abi_set_header_separator_height(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_setHeaderSeparatorHeight(@pointer, *a); end
    def _abi_get_header_separator_height(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getHeaderSeparatorHeight(@pointer, *a); end
    def _abi_set_grid_lines_width(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_setGridLinesWidth(@pointer, *a); end
    def _abi_get_grid_lines_width(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getGridLinesWidth(@pointer, *a); end
    def _abi_set_auto_scroll(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_setAutoScroll(@pointer, *a); end
    def _abi_auto_scroll(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_autoScroll(@pointer, *a); end
    def _abi_set_show_vertical_grid_lines(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_setShowVerticalGridLines(@pointer, *a); end
    def _abi_show_vertical_grid_lines(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_showVerticalGridLines(@pointer, *a); end
    def _abi_set_show_horizontal_grid_lines(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_setShowHorizontalGridLines(@pointer, *a); end
    def _abi_show_horizontal_grid_lines(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_showHorizontalGridLines(@pointer, *a); end
    def _abi_set_vertical_scrollbar_policy(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_setVerticalScrollbarPolicy(@pointer, *a); end
    def _abi_get_vertical_scrollbar_policy(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getVerticalScrollbarPolicy(@pointer, *a); end
    def _abi_set_horizontal_scrollbar_policy(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_setHorizontalScrollbarPolicy(@pointer, *a); end
    def _abi_get_horizontal_scrollbar_policy(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getHorizontalScrollbarPolicy(@pointer, *a); end
    def _abi_set_vertical_scrollbar_value(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_setVerticalScrollbarValue(@pointer, *a); end
    def _abi_get_vertical_scrollbar_value(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getVerticalScrollbarValue(@pointer, *a); end
    def _abi_set_horizontal_scrollbar_value(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_setHorizontalScrollbarValue(@pointer, *a); end
    def _abi_get_horizontal_scrollbar_value(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getHorizontalScrollbarValue(@pointer, *a); end
    def _abi_set_fixed_icon_size(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_setFixedIconSize(@pointer, *a); end
    def _abi_get_fixed_icon_size(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_getFixedIconSize(@pointer, *a); end
    def _abi_set_resizable_columns(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_setResizableColumns(@pointer, *a); end
    def _abi_resizable_columns(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_resizableColumns(@pointer, *a); end
    def _abi_on_item_select(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_onItemSelect(@pointer, *a); end
    def _abi_on_double_click(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_onDoubleClick(@pointer, *a); end
    def _abi_on_right_click(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_onRightClick(@pointer, *a); end
    def _abi_on_header_click(*a);    Abi.call_arg_map! a; Abi.ABI_ListView_onHeaderClick(@pointer, *a); end
  end

  class ComboBox
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_ComboBox_new(*a)); initialized(); end
    def _abi_set_items_to_display(*a);    Abi.call_arg_map! a; Abi.ABI_ComboBox_setItemsToDisplay(@pointer, *a); end
    def _abi_get_items_to_display(*a);    Abi.call_arg_map! a; Abi.ABI_ComboBox_getItemsToDisplay(@pointer, *a); end
    def _abi_add_item(*a);    Abi.call_arg_map! a; Abi.ABI_ComboBox_addItem(@pointer, *a); end
    def _abi_set_selected_item_by_id(*a);    Abi.call_arg_map! a; Abi.ABI_ComboBox_setSelectedItemById(@pointer, *a); end
    def _abi_set_selected_item_by_index(*a);    Abi.call_arg_map! a; Abi.ABI_ComboBox_setSelectedItemByIndex(@pointer, *a); end
    def _abi_deselect_item(*a);    Abi.call_arg_map! a; Abi.ABI_ComboBox_deselectItem(@pointer, *a); end
    def _abi_remove_item_by_id(*a);    Abi.call_arg_map! a; Abi.ABI_ComboBox_removeItemById(@pointer, *a); end
    def _abi_remove_item_by_index(*a);    Abi.call_arg_map! a; Abi.ABI_ComboBox_removeItemByIndex(@pointer, *a); end
    def _abi_remove_all_items(*a);    Abi.call_arg_map! a; Abi.ABI_ComboBox_removeAllItems(@pointer, *a); end
    def _abi_get_item_by_id(*a);    Abi.call_arg_map! a; Abi.ABI_ComboBox_getItemById(@pointer, *a); end
    def _abi_get_selected_item_id(*a);    Abi.call_arg_map! a; Abi.ABI_ComboBox_getSelectedItemId(@pointer, *a); end
    def _abi_change_item_by_id(*a);    Abi.call_arg_map! a; Abi.ABI_ComboBox_changeItemById(@pointer, *a); end
    def _abi_change_item_by_index(*a);    Abi.call_arg_map! a; Abi.ABI_ComboBox_changeItemByIndex(@pointer, *a); end
    def _abi_get_item_count(*a);    Abi.call_arg_map! a; Abi.ABI_ComboBox_getItemCount(@pointer, *a); end
    def _abi_get_item_ids(*a);    Abi.call_arg_map! a; Abi.ABI_ComboBox_getItemIds(@pointer, *a); end
    def _abi_set_maximum_items(*a);    Abi.call_arg_map! a; Abi.ABI_ComboBox_setMaximumItems(@pointer, *a); end
    def _abi_get_maximum_items(*a);    Abi.call_arg_map! a; Abi.ABI_ComboBox_getMaximumItems(@pointer, *a); end
    def _abi_set_default_text(*a);    Abi.call_arg_map! a; Abi.ABI_ComboBox_setDefaultText(@pointer, *a); end
    def _abi_get_default_text(*a);    Abi.call_arg_map! a; Abi.ABI_ComboBox_getDefaultText(@pointer, *a); end
    def _abi_set_expand_direction(*a);    Abi.call_arg_map! a; Abi.ABI_ComboBox_setExpandDirection(@pointer, *a); end
    def _abi_get_expand_direction(*a);    Abi.call_arg_map! a; Abi.ABI_ComboBox_getExpandDirection(@pointer, *a); end
    def _abi_contains_id(*a);    Abi.call_arg_map! a; Abi.ABI_ComboBox_containsId(@pointer, *a); end
    def _abi_set_change_item_on_scroll(*a);    Abi.call_arg_map! a; Abi.ABI_ComboBox_setChangeItemOnScroll(@pointer, *a); end
    def _abi_get_change_item_on_scroll(*a);    Abi.call_arg_map! a; Abi.ABI_ComboBox_getChangeItemOnScroll(@pointer, *a); end
    def _abi_on_item_select(*a);    Abi.call_arg_map! a; Abi.ABI_ComboBox_onItemSelect(@pointer, *a); end
  end

  class ColorPicker
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_ColorPicker_new(*a)); initialized(); end
    def _abi_set_color(*a);    Abi.call_arg_map! a; Abi.ABI_ColorPicker_setColor(@pointer, *a); end
    def _abi_get_color(*a);    Abi.call_arg_map! a; Abi.ABI_ColorPicker_getColor(@pointer, *a); end
    def _abi_on_color_change(*a);    Abi.call_arg_map! a; Abi.ABI_ColorPicker_onColorChange(@pointer, *a); end
    def _abi_on_ok_press(*a);    Abi.call_arg_map! a; Abi.ABI_ColorPicker_onOkPress(@pointer, *a); end
  end

  class FileDialog
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_FileDialog_new(*a)); initialized(); end
    def _abi_get_selected_paths(*a);    Abi.call_arg_map! a; Abi.ABI_FileDialog_getSelectedPaths(@pointer, *a); end
    def _abi_set_path(*a);    Abi.call_arg_map! a; Abi.ABI_FileDialog_setPath(@pointer, *a); end
    def _abi_get_path(*a);    Abi.call_arg_map! a; Abi.ABI_FileDialog_getPath(@pointer, *a); end
    def _abi_set_filename(*a);    Abi.call_arg_map! a; Abi.ABI_FileDialog_setFilename(@pointer, *a); end
    def _abi_get_filename(*a);    Abi.call_arg_map! a; Abi.ABI_FileDialog_getFilename(@pointer, *a); end
    def _abi_set_file_type_filters(*a);    Abi.call_arg_map! a; Abi.ABI_FileDialog_setFileTypeFilters(@pointer, *a); end
    def _abi_get_file_type_filters(*a);    Abi.call_arg_map! a; Abi.ABI_FileDialog_getFileTypeFilters(@pointer, *a); end
    def _abi_get_file_type_filters_index(*a);    Abi.call_arg_map! a; Abi.ABI_FileDialog_getFileTypeFiltersIndex(@pointer, *a); end
    def _abi_set_confirm_button_text(*a);    Abi.call_arg_map! a; Abi.ABI_FileDialog_setConfirmButtonText(@pointer, *a); end
    def _abi_get_confirm_button_text(*a);    Abi.call_arg_map! a; Abi.ABI_FileDialog_getConfirmButtonText(@pointer, *a); end
    def _abi_set_cancel_button_text(*a);    Abi.call_arg_map! a; Abi.ABI_FileDialog_setCancelButtonText(@pointer, *a); end
    def _abi_get_cancel_button_text(*a);    Abi.call_arg_map! a; Abi.ABI_FileDialog_getCancelButtonText(@pointer, *a); end
    def _abi_set_create_folder_button_text(*a);    Abi.call_arg_map! a; Abi.ABI_FileDialog_setCreateFolderButtonText(@pointer, *a); end
    def _abi_get_create_folder_button_text(*a);    Abi.call_arg_map! a; Abi.ABI_FileDialog_getCreateFolderButtonText(@pointer, *a); end
    def _abi_set_allow_create_folder(*a);    Abi.call_arg_map! a; Abi.ABI_FileDialog_setAllowCreateFolder(@pointer, *a); end
    def _abi_get_allow_create_folder(*a);    Abi.call_arg_map! a; Abi.ABI_FileDialog_getAllowCreateFolder(@pointer, *a); end
    def _abi_set_filename_label_text(*a);    Abi.call_arg_map! a; Abi.ABI_FileDialog_setFilenameLabelText(@pointer, *a); end
    def _abi_get_filename_label_text(*a);    Abi.call_arg_map! a; Abi.ABI_FileDialog_getFilenameLabelText(@pointer, *a); end
    def _abi_set_list_view_column_captions(*a);    Abi.call_arg_map! a; Abi.ABI_FileDialog_setListViewColumnCaptions(@pointer, *a); end
    def _abi_get_list_view_column_captions(*a);    Abi.call_arg_map! a; Abi.ABI_FileDialog_getListViewColumnCaptions(@pointer, *a); end
    def _abi_set_file_must_exist(*a);    Abi.call_arg_map! a; Abi.ABI_FileDialog_setFileMustExist(@pointer, *a); end
    def _abi_get_file_must_exist(*a);    Abi.call_arg_map! a; Abi.ABI_FileDialog_getFileMustExist(@pointer, *a); end
    def _abi_set_selecting_directory(*a);    Abi.call_arg_map! a; Abi.ABI_FileDialog_setSelectingDirectory(@pointer, *a); end
    def _abi_get_selecting_directory(*a);    Abi.call_arg_map! a; Abi.ABI_FileDialog_getSelectingDirectory(@pointer, *a); end
    def _abi_set_multi_select(*a);    Abi.call_arg_map! a; Abi.ABI_FileDialog_setMultiSelect(@pointer, *a); end
    def _abi_get_multi_select(*a);    Abi.call_arg_map! a; Abi.ABI_FileDialog_getMultiSelect(@pointer, *a); end
    def _abi_on_file_select(*a);    Abi.call_arg_map! a; Abi.ABI_FileDialog_onFileSelect(@pointer, *a); end
    def _abi_on_cancel(*a);    Abi.call_arg_map! a; Abi.ABI_FileDialog_onCancel(@pointer, *a); end
  end

  class MessageBox
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_MessageBox_new(*a)); initialized(); end
    def _abi_set_text(*a);    Abi.call_arg_map! a; Abi.ABI_MessageBox_setText(@pointer, *a); end
    def _abi_get_text(*a);    Abi.call_arg_map! a; Abi.ABI_MessageBox_getText(@pointer, *a); end
    def _abi_add_button(*a);    Abi.call_arg_map! a; Abi.ABI_MessageBox_addButton(@pointer, *a); end
    def _abi_change_buttons(*a);    Abi.call_arg_map! a; Abi.ABI_MessageBox_changeButtons(@pointer, *a); end
    def _abi_get_buttons(*a);    Abi.call_arg_map! a; Abi.ABI_MessageBox_getButtons(@pointer, *a); end
    def _abi_set_label_alignment(*a);    Abi.call_arg_map! a; Abi.ABI_MessageBox_setLabelAlignment(@pointer, *a); end
    def _abi_get_label_alignment(*a);    Abi.call_arg_map! a; Abi.ABI_MessageBox_getLabelAlignment(@pointer, *a); end
    def _abi_set_button_alignment(*a);    Abi.call_arg_map! a; Abi.ABI_MessageBox_setButtonAlignment(@pointer, *a); end
    def _abi_get_button_alignment(*a);    Abi.call_arg_map! a; Abi.ABI_MessageBox_getButtonAlignment(@pointer, *a); end
    def _abi_on_button_press(*a);    Abi.call_arg_map! a; Abi.ABI_MessageBox_onButtonPress(@pointer, *a); end
  end

  class Picture
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_Picture_new(*a)); initialized(); end
    def _abi_ignore_mouse_events(*a);    Abi.call_arg_map! a; Abi.ABI_Picture_ignoreMouseEvents(@pointer, *a); end
    def _abi_is_ignoring_mouse_events(*a);    Abi.call_arg_map! a; Abi.ABI_Picture_isIgnoringMouseEvents(@pointer, *a); end
    def _abi_on_double_click(*a);    Abi.call_arg_map! a; Abi.ABI_Picture_onDoubleClick(@pointer, *a); end
  end

  class MenuBar
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_MenuBar_new(*a)); initialized(); end
    def _abi_add_menu(*a);    Abi.call_arg_map! a; Abi.ABI_MenuBar_addMenu(@pointer, *a); end
    def _abi_connect_menu_item(*a);    Abi.call_arg_map! a; Abi.ABI_MenuBar_connectMenuItem(@pointer, *a); end
    def _abi_add_menu_item(*a);    Abi.call_arg_map! a; Abi.ABI_MenuBar_addMenuItem(@pointer, *a); end
    def _abi_change_menu_item(*a);    Abi.call_arg_map! a; Abi.ABI_MenuBar_changeMenuItem(@pointer, *a); end
    def _abi_remove_all_menus(*a);    Abi.call_arg_map! a; Abi.ABI_MenuBar_removeAllMenus(@pointer, *a); end
    def _abi_remove_menu(*a);    Abi.call_arg_map! a; Abi.ABI_MenuBar_removeMenu(@pointer, *a); end
    def _abi_remove_menu_item(*a);    Abi.call_arg_map! a; Abi.ABI_MenuBar_removeMenuItem(@pointer, *a); end
    def _abi_remove_sub_menu_items(*a);    Abi.call_arg_map! a; Abi.ABI_MenuBar_removeSubMenuItems(@pointer, *a); end
    def _abi_set_menu_enabled(*a);    Abi.call_arg_map! a; Abi.ABI_MenuBar_setMenuEnabled(@pointer, *a); end
    def _abi_get_menu_enabled(*a);    Abi.call_arg_map! a; Abi.ABI_MenuBar_getMenuEnabled(@pointer, *a); end
    def _abi_set_menu_item_enabled(*a);    Abi.call_arg_map! a; Abi.ABI_MenuBar_setMenuItemEnabled(@pointer, *a); end
    def _abi_get_menu_item_enabled(*a);    Abi.call_arg_map! a; Abi.ABI_MenuBar_getMenuItemEnabled(@pointer, *a); end
    def _abi_set_minimum_sub_menu_width(*a);    Abi.call_arg_map! a; Abi.ABI_MenuBar_setMinimumSubMenuWidth(@pointer, *a); end
    def _abi_get_minimum_sub_menu_width(*a);    Abi.call_arg_map! a; Abi.ABI_MenuBar_getMinimumSubMenuWidth(@pointer, *a); end
    def _abi_set_inverted_menu_direction(*a);    Abi.call_arg_map! a; Abi.ABI_MenuBar_setInvertedMenuDirection(@pointer, *a); end
    def _abi_get_inverted_menu_direction(*a);    Abi.call_arg_map! a; Abi.ABI_MenuBar_getInvertedMenuDirection(@pointer, *a); end
    def _abi_get_menus(*a);    Abi.call_arg_map! a; Abi.ABI_MenuBar_getMenus(@pointer, *a); end
    def _abi_close_menu(*a);    Abi.call_arg_map! a; Abi.ABI_MenuBar_closeMenu(@pointer, *a); end
    def _abi_on_menu_item_click(*a);    Abi.call_arg_map! a; Abi.ABI_MenuBar_onMenuItemClick(@pointer, *a); end
  end

  class PanelListBox
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_PanelListBox_new(*a)); initialized(); end
    def _abi_add_item(*a);    Abi.call_arg_map! a; Abi.ABI_PanelListBox_addItem(@pointer, *a); end
    def _abi_get_panel_template(*a);    Abi.call_arg_map! a; Abi.ABI_PanelListBox_getPanelTemplate(@pointer, *a); end
    def _abi_get_items_width(*a);    Abi.call_arg_map! a; Abi.ABI_PanelListBox_getItemsWidth(@pointer, *a); end
    def _abi_set_items_height(*a);    Abi.call_arg_map! a; Abi.ABI_PanelListBox_setItemsHeight(@pointer, *a); end
    def _abi_get_items_height(*a);    Abi.call_arg_map! a; Abi.ABI_PanelListBox_getItemsHeight(@pointer, *a); end
    def _abi_set_selected_item(*a);    Abi.call_arg_map! a; Abi.ABI_PanelListBox_setSelectedItem(@pointer, *a); end
    def _abi_set_selected_item_by_id(*a);    Abi.call_arg_map! a; Abi.ABI_PanelListBox_setSelectedItemById(@pointer, *a); end
    def _abi_set_selected_item_by_index(*a);    Abi.call_arg_map! a; Abi.ABI_PanelListBox_setSelectedItemByIndex(@pointer, *a); end
    def _abi_deselect_item(*a);    Abi.call_arg_map! a; Abi.ABI_PanelListBox_deselectItem(@pointer, *a); end
    def _abi_remove_item(*a);    Abi.call_arg_map! a; Abi.ABI_PanelListBox_removeItem(@pointer, *a); end
    def _abi_remove_item_by_id(*a);    Abi.call_arg_map! a; Abi.ABI_PanelListBox_removeItemById(@pointer, *a); end
    def _abi_remove_item_by_index(*a);    Abi.call_arg_map! a; Abi.ABI_PanelListBox_removeItemByIndex(@pointer, *a); end
    def _abi_get_item_by_id(*a);    Abi.call_arg_map! a; Abi.ABI_PanelListBox_getItemById(@pointer, *a); end
    def _abi_get_item_by_index(*a);    Abi.call_arg_map! a; Abi.ABI_PanelListBox_getItemByIndex(@pointer, *a); end
    def _abi_get_index_by_id(*a);    Abi.call_arg_map! a; Abi.ABI_PanelListBox_getIndexById(@pointer, *a); end
    def _abi_get_index_by_item(*a);    Abi.call_arg_map! a; Abi.ABI_PanelListBox_getIndexByItem(@pointer, *a); end
    def _abi_get_id_by_index(*a);    Abi.call_arg_map! a; Abi.ABI_PanelListBox_getIdByIndex(@pointer, *a); end
    def _abi_get_selected_item(*a);    Abi.call_arg_map! a; Abi.ABI_PanelListBox_getSelectedItem(@pointer, *a); end
    def _abi_get_selected_item_id(*a);    Abi.call_arg_map! a; Abi.ABI_PanelListBox_getSelectedItemId(@pointer, *a); end
    def _abi_get_selected_item_index(*a);    Abi.call_arg_map! a; Abi.ABI_PanelListBox_getSelectedItemIndex(@pointer, *a); end
    def _abi_get_item_count(*a);    Abi.call_arg_map! a; Abi.ABI_PanelListBox_getItemCount(@pointer, *a); end
    def _abi_get_items(*a);    Abi.call_arg_map! a; Abi.ABI_PanelListBox_getItems(@pointer, *a); end
    def _abi_get_item_ids(*a);    Abi.call_arg_map! a; Abi.ABI_PanelListBox_getItemIds(@pointer, *a); end
    def _abi_set_maximum_items(*a);    Abi.call_arg_map! a; Abi.ABI_PanelListBox_setMaximumItems(@pointer, *a); end
    def _abi_get_maximum_items(*a);    Abi.call_arg_map! a; Abi.ABI_PanelListBox_getMaximumItems(@pointer, *a); end
    def _abi_contains(*a);    Abi.call_arg_map! a; Abi.ABI_PanelListBox_contains(@pointer, *a); end
    def _abi_contains_id(*a);    Abi.call_arg_map! a; Abi.ABI_PanelListBox_containsId(@pointer, *a); end
    def _abi_on_item_select(*a);    Abi.call_arg_map! a; Abi.ABI_PanelListBox_onItemSelect(@pointer, *a); end
  end

  class PanelLIstBox
    def _abi_remove_all_items(*a);    Abi.call_arg_map! a; Abi.ABI_PanelLIstBox_removeAllItems(@pointer, *a); end
  end

  class ProgressBar
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_ProgressBar_new(*a)); initialized(); end
    def _abi_set_minimum(*a);    Abi.call_arg_map! a; Abi.ABI_ProgressBar_setMinimum(@pointer, *a); end
    def _abi_get_minimum(*a);    Abi.call_arg_map! a; Abi.ABI_ProgressBar_getMinimum(@pointer, *a); end
    def _abi_set_maximum(*a);    Abi.call_arg_map! a; Abi.ABI_ProgressBar_setMaximum(@pointer, *a); end
    def _abi_get_maximum(*a);    Abi.call_arg_map! a; Abi.ABI_ProgressBar_getMaximum(@pointer, *a); end
    def _abi_set_value(*a);    Abi.call_arg_map! a; Abi.ABI_ProgressBar_setValue(@pointer, *a); end
    def _abi_get_value(*a);    Abi.call_arg_map! a; Abi.ABI_ProgressBar_getValue(@pointer, *a); end
    def _abi_increment_value(*a);    Abi.call_arg_map! a; Abi.ABI_ProgressBar_incrementValue(@pointer, *a); end
    def _abi_set_text(*a);    Abi.call_arg_map! a; Abi.ABI_ProgressBar_setText(@pointer, *a); end
    def _abi_get_text(*a);    Abi.call_arg_map! a; Abi.ABI_ProgressBar_getText(@pointer, *a); end
    def _abi_set_fill_direction(*a);    Abi.call_arg_map! a; Abi.ABI_ProgressBar_setFillDirection(@pointer, *a); end
    def _abi_get_fill_direction(*a);    Abi.call_arg_map! a; Abi.ABI_ProgressBar_getFillDirection(@pointer, *a); end
    def _abi_on_value_change(*a);    Abi.call_arg_map! a; Abi.ABI_ProgressBar_onValueChange(@pointer, *a); end
    def _abi_on_full(*a);    Abi.call_arg_map! a; Abi.ABI_ProgressBar_onFull(@pointer, *a); end
  end

  class RangeSlider
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_RangeSlider_new(*a)); initialized(); end
    def _abi_set_minimum(*a);    Abi.call_arg_map! a; Abi.ABI_RangeSlider_setMinimum(@pointer, *a); end
    def _abi_get_minimum(*a);    Abi.call_arg_map! a; Abi.ABI_RangeSlider_getMinimum(@pointer, *a); end
    def _abi_set_maximum(*a);    Abi.call_arg_map! a; Abi.ABI_RangeSlider_setMaximum(@pointer, *a); end
    def _abi_get_maximum(*a);    Abi.call_arg_map! a; Abi.ABI_RangeSlider_getMaximum(@pointer, *a); end
    def _abi_set_selection_start(*a);    Abi.call_arg_map! a; Abi.ABI_RangeSlider_setSelectionStart(@pointer, *a); end
    def _abi_get_selection_start(*a);    Abi.call_arg_map! a; Abi.ABI_RangeSlider_getSelectionStart(@pointer, *a); end
    def _abi_set_selection_end(*a);    Abi.call_arg_map! a; Abi.ABI_RangeSlider_setSelectionEnd(@pointer, *a); end
    def _abi_get_selection_end(*a);    Abi.call_arg_map! a; Abi.ABI_RangeSlider_getSelectionEnd(@pointer, *a); end
    def _abi_set_step(*a);    Abi.call_arg_map! a; Abi.ABI_RangeSlider_setStep(@pointer, *a); end
    def _abi_get_step(*a);    Abi.call_arg_map! a; Abi.ABI_RangeSlider_getStep(@pointer, *a); end
    def _abi_on_range_change(*a);    Abi.call_arg_map! a; Abi.ABI_RangeSlider_onRangeChange(@pointer, *a); end
  end

  class RichTextLabel
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_RichTextLabel_new(*a)); initialized(); end
  end

  class SeparatorLine
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_SeparatorLine_new(*a)); initialized(); end
  end

  class Slider
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_Slider_new(*a)); initialized(); end
    def _abi_set_minimum(*a);    Abi.call_arg_map! a; Abi.ABI_Slider_setMinimum(@pointer, *a); end
    def _abi_get_minimum(*a);    Abi.call_arg_map! a; Abi.ABI_Slider_getMinimum(@pointer, *a); end
    def _abi_set_maximum(*a);    Abi.call_arg_map! a; Abi.ABI_Slider_setMaximum(@pointer, *a); end
    def _abi_get_maximum(*a);    Abi.call_arg_map! a; Abi.ABI_Slider_getMaximum(@pointer, *a); end
    def _abi_set_value(*a);    Abi.call_arg_map! a; Abi.ABI_Slider_setValue(@pointer, *a); end
    def _abi_get_value(*a);    Abi.call_arg_map! a; Abi.ABI_Slider_getValue(@pointer, *a); end
    def _abi_set_step(*a);    Abi.call_arg_map! a; Abi.ABI_Slider_setStep(@pointer, *a); end
    def _abi_get_step(*a);    Abi.call_arg_map! a; Abi.ABI_Slider_getStep(@pointer, *a); end
    def _abi_set_vertical_scroll(*a);    Abi.call_arg_map! a; Abi.ABI_Slider_setVerticalScroll(@pointer, *a); end
    def _abi_get_vertical_scroll(*a);    Abi.call_arg_map! a; Abi.ABI_Slider_getVerticalScroll(@pointer, *a); end
    def _abi_set_inverted_direction(*a);    Abi.call_arg_map! a; Abi.ABI_Slider_setInvertedDirection(@pointer, *a); end
    def _abi_get_inverted_direction(*a);    Abi.call_arg_map! a; Abi.ABI_Slider_getInvertedDirection(@pointer, *a); end
    def _abi_set_change_value_on_scroll(*a);    Abi.call_arg_map! a; Abi.ABI_Slider_setChangeValueOnScroll(@pointer, *a); end
    def _abi_get_change_value_on_scroll(*a);    Abi.call_arg_map! a; Abi.ABI_Slider_getChangeValueOnScroll(@pointer, *a); end
    def _abi_on_value_change(*a);    Abi.call_arg_map! a; Abi.ABI_Slider_onValueChange(@pointer, *a); end
  end

  class SpinButton
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_SpinButton_new(*a)); initialized(); end
    def _abi_set_minimum(*a);    Abi.call_arg_map! a; Abi.ABI_SpinButton_setMinimum(@pointer, *a); end
    def _abi_get_minimum(*a);    Abi.call_arg_map! a; Abi.ABI_SpinButton_getMinimum(@pointer, *a); end
    def _abi_set_maximum(*a);    Abi.call_arg_map! a; Abi.ABI_SpinButton_setMaximum(@pointer, *a); end
    def _abi_get_maximum(*a);    Abi.call_arg_map! a; Abi.ABI_SpinButton_getMaximum(@pointer, *a); end
    def _abi_set_value(*a);    Abi.call_arg_map! a; Abi.ABI_SpinButton_setValue(@pointer, *a); end
    def _abi_get_value(*a);    Abi.call_arg_map! a; Abi.ABI_SpinButton_getValue(@pointer, *a); end
    def _abi_set_step(*a);    Abi.call_arg_map! a; Abi.ABI_SpinButton_setStep(@pointer, *a); end
    def _abi_get_step(*a);    Abi.call_arg_map! a; Abi.ABI_SpinButton_getStep(@pointer, *a); end
    def _abi_set_vertical_scroll(*a);    Abi.call_arg_map! a; Abi.ABI_SpinButton_setVerticalScroll(@pointer, *a); end
    def _abi_get_vertical_scroll(*a);    Abi.call_arg_map! a; Abi.ABI_SpinButton_getVerticalScroll(@pointer, *a); end
    def _abi_on_value_change(*a);    Abi.call_arg_map! a; Abi.ABI_SpinButton_onValueChange(@pointer, *a); end
  end

  class SubwidgetContainer
    def _abi_get_container(*a);    Abi.call_arg_map! a; Abi.ABI_SubwidgetContainer_getContainer(@pointer, *a); end
  end

  class SpinControl
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_SpinControl_new(*a)); initialized(); end
    def _abi_set_minimum(*a);    Abi.call_arg_map! a; Abi.ABI_SpinControl_setMinimum(@pointer, *a); end
    def _abi_get_minimum(*a);    Abi.call_arg_map! a; Abi.ABI_SpinControl_getMinimum(@pointer, *a); end
    def _abi_set_maximum(*a);    Abi.call_arg_map! a; Abi.ABI_SpinControl_setMaximum(@pointer, *a); end
    def _abi_get_maximum(*a);    Abi.call_arg_map! a; Abi.ABI_SpinControl_getMaximum(@pointer, *a); end
    def _abi_set_value(*a);    Abi.call_arg_map! a; Abi.ABI_SpinControl_setValue(@pointer, *a); end
    def _abi_get_value(*a);    Abi.call_arg_map! a; Abi.ABI_SpinControl_getValue(@pointer, *a); end
    def _abi_set_step(*a);    Abi.call_arg_map! a; Abi.ABI_SpinControl_setStep(@pointer, *a); end
    def _abi_get_step(*a);    Abi.call_arg_map! a; Abi.ABI_SpinControl_getStep(@pointer, *a); end
    def _abi_set_decimal_places(*a);    Abi.call_arg_map! a; Abi.ABI_SpinControl_setDecimalPlaces(@pointer, *a); end
    def _abi_get_decimal_places(*a);    Abi.call_arg_map! a; Abi.ABI_SpinControl_getDecimalPlaces(@pointer, *a); end
    def _abi_set_use_wide_arrows(*a);    Abi.call_arg_map! a; Abi.ABI_SpinControl_setUseWideArrows(@pointer, *a); end
    def _abi_get_use_wide_arrows(*a);    Abi.call_arg_map! a; Abi.ABI_SpinControl_getUseWideArrows(@pointer, *a); end
    def _abi_on_value_change(*a);    Abi.call_arg_map! a; Abi.ABI_SpinControl_onValueChange(@pointer, *a); end
  end

  class Tabs
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_Tabs_new(*a)); initialized(); end
    def _abi_set_auto_size(*a);    Abi.call_arg_map! a; Abi.ABI_Tabs_setAutoSize(@pointer, *a); end
    def _abi_get_auto_size(*a);    Abi.call_arg_map! a; Abi.ABI_Tabs_getAutoSize(@pointer, *a); end
    def _abi_add(*a);    Abi.call_arg_map! a; Abi.ABI_Tabs_add(@pointer, *a); end
    def _abi_insert(*a);    Abi.call_arg_map! a; Abi.ABI_Tabs_insert(@pointer, *a); end
    def _abi_get_text(*a);    Abi.call_arg_map! a; Abi.ABI_Tabs_getText(@pointer, *a); end
    def _abi_change_text(*a);    Abi.call_arg_map! a; Abi.ABI_Tabs_changeText(@pointer, *a); end
    def _abi_select(*a);    Abi.call_arg_map! a; Abi.ABI_Tabs_select(@pointer, *a); end
    def _abi_select_by_index(*a);    Abi.call_arg_map! a; Abi.ABI_Tabs_selectByIndex(@pointer, *a); end
    def _abi_deselect(*a);    Abi.call_arg_map! a; Abi.ABI_Tabs_deselect(@pointer, *a); end
    def _abi_remove(*a);    Abi.call_arg_map! a; Abi.ABI_Tabs_remove(@pointer, *a); end
    def _abi_remove_by_index(*a);    Abi.call_arg_map! a; Abi.ABI_Tabs_removeByIndex(@pointer, *a); end
    def _abi_remove_all(*a);    Abi.call_arg_map! a; Abi.ABI_Tabs_removeAll(@pointer, *a); end
    def _abi_get_selected(*a);    Abi.call_arg_map! a; Abi.ABI_Tabs_getSelected(@pointer, *a); end
    def _abi_get_selected_index(*a);    Abi.call_arg_map! a; Abi.ABI_Tabs_getSelectedIndex(@pointer, *a); end
    def _abi_set_tab_visible(*a);    Abi.call_arg_map! a; Abi.ABI_Tabs_setTabVisible(@pointer, *a); end
    def _abi_get_tab_visible(*a);    Abi.call_arg_map! a; Abi.ABI_Tabs_getTabVisible(@pointer, *a); end
    def _abi_set_tab_enabled(*a);    Abi.call_arg_map! a; Abi.ABI_Tabs_setTabEnabled(@pointer, *a); end
    def _abi_get_tab_enabled(*a);    Abi.call_arg_map! a; Abi.ABI_Tabs_getTabEnabled(@pointer, *a); end
    def _abi_set_tab_height(*a);    Abi.call_arg_map! a; Abi.ABI_Tabs_setTabHeight(@pointer, *a); end
    def _abi_set_maximum_tab_width(*a);    Abi.call_arg_map! a; Abi.ABI_Tabs_setMaximumTabWidth(@pointer, *a); end
    def _abi_get_maximum_tab_width(*a);    Abi.call_arg_map! a; Abi.ABI_Tabs_getMaximumTabWidth(@pointer, *a); end
    def _abi_set_minimum_tab_width(*a);    Abi.call_arg_map! a; Abi.ABI_Tabs_setMinimumTabWidth(@pointer, *a); end
    def _abi_get_minimum_tab_width(*a);    Abi.call_arg_map! a; Abi.ABI_Tabs_getMinimumTabWidth(@pointer, *a); end
    def _abi_get_tabs_count(*a);    Abi.call_arg_map! a; Abi.ABI_Tabs_getTabsCount(@pointer, *a); end
    def _abi_on_tab_select(*a);    Abi.call_arg_map! a; Abi.ABI_Tabs_onTabSelect(@pointer, *a); end
  end

  class TabContainer
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_TabContainer_new(*a)); initialized(); end
    def _abi_set_tabs_height(*a);    Abi.call_arg_map! a; Abi.ABI_TabContainer_setTabsHeight(@pointer, *a); end
    def _abi_add_tab(*a);    Abi.call_arg_map! a; Abi.ABI_TabContainer_addTab(@pointer, *a); end
    def _abi_insert_tab(*a);    Abi.call_arg_map! a; Abi.ABI_TabContainer_insertTab(@pointer, *a); end
    def _abi_remove_tab(*a);    Abi.call_arg_map! a; Abi.ABI_TabContainer_removeTab(@pointer, *a); end
    def _abi_remove_tab_by_index(*a);    Abi.call_arg_map! a; Abi.ABI_TabContainer_removeTabByIndex(@pointer, *a); end
    def _abi_select(*a);    Abi.call_arg_map! a; Abi.ABI_TabContainer_select(@pointer, *a); end
    def _abi_get_panel_count(*a);    Abi.call_arg_map! a; Abi.ABI_TabContainer_getPanelCount(@pointer, *a); end
    def _abi_get_index(*a);    Abi.call_arg_map! a; Abi.ABI_TabContainer_getIndex(@pointer, *a); end
    def _abi_get_selected(*a);    Abi.call_arg_map! a; Abi.ABI_TabContainer_getSelected(@pointer, *a); end
    def _abi_get_selected_index(*a);    Abi.call_arg_map! a; Abi.ABI_TabContainer_getSelectedIndex(@pointer, *a); end
    def _abi_get_panel(*a);    Abi.call_arg_map! a; Abi.ABI_TabContainer_getPanel(@pointer, *a); end
    def _abi_get_tabs(*a);    Abi.call_arg_map! a; Abi.ABI_TabContainer_getTabs(@pointer, *a); end
    def _abi_get_tab_text(*a);    Abi.call_arg_map! a; Abi.ABI_TabContainer_getTabText(@pointer, *a); end
    def _abi_change_tab_text(*a);    Abi.call_arg_map! a; Abi.ABI_TabContainer_changeTabText(@pointer, *a); end
    def _abi_set_tab_alignment(*a);    Abi.call_arg_map! a; Abi.ABI_TabContainer_setTabAlignment(@pointer, *a); end
    def _abi_get_tab_alignment(*a);    Abi.call_arg_map! a; Abi.ABI_TabContainer_getTabAlignment(@pointer, *a); end
    def _abi_set_tab_fixed_size(*a);    Abi.call_arg_map! a; Abi.ABI_TabContainer_setTabFixedSize(@pointer, *a); end
    def _abi_get_tab_fixed_size(*a);    Abi.call_arg_map! a; Abi.ABI_TabContainer_getTabFixedSize(@pointer, *a); end
    def _abi_on_selection_change(*a);    Abi.call_arg_map! a; Abi.ABI_TabContainer_onSelectionChange(@pointer, *a); end
    def _abi_on_selection_changing(*a);    Abi.call_arg_map! a; Abi.ABI_TabContainer_onSelectionChanging(@pointer, *a); end
  end

  class TextArea
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_TextArea_new(*a)); initialized(); end
    def _abi_set_text(*a);    Abi.call_arg_map! a; Abi.ABI_TextArea_setText(@pointer, *a); end
    def _abi_add_text(*a);    Abi.call_arg_map! a; Abi.ABI_TextArea_addText(@pointer, *a); end
    def _abi_get_text(*a);    Abi.call_arg_map! a; Abi.ABI_TextArea_getText(@pointer, *a); end
    def _abi_set_default_text(*a);    Abi.call_arg_map! a; Abi.ABI_TextArea_setDefaultText(@pointer, *a); end
    def _abi_get_default_text(*a);    Abi.call_arg_map! a; Abi.ABI_TextArea_getDefaultText(@pointer, *a); end
    def _abi_set_selected_text(*a);    Abi.call_arg_map! a; Abi.ABI_TextArea_setSelectedText(@pointer, *a); end
    def _abi_get_selected_text(*a);    Abi.call_arg_map! a; Abi.ABI_TextArea_getSelectedText(@pointer, *a); end
    def _abi_get_selection_start(*a);    Abi.call_arg_map! a; Abi.ABI_TextArea_getSelectionStart(@pointer, *a); end
    def _abi_get_selection_end(*a);    Abi.call_arg_map! a; Abi.ABI_TextArea_getSelectionEnd(@pointer, *a); end
    def _abi_set_maximum_characters(*a);    Abi.call_arg_map! a; Abi.ABI_TextArea_setMaximumCharacters(@pointer, *a); end
    def _abi_get_maximum_characters(*a);    Abi.call_arg_map! a; Abi.ABI_TextArea_getMaximumCharacters(@pointer, *a); end
    def _abi_set_tab_string(*a);    Abi.call_arg_map! a; Abi.ABI_TextArea_setTabString(@pointer, *a); end
    def _abi_get_tab_string(*a);    Abi.call_arg_map! a; Abi.ABI_TextArea_getTabString(@pointer, *a); end
    def _abi_set_caret_position(*a);    Abi.call_arg_map! a; Abi.ABI_TextArea_setCaretPosition(@pointer, *a); end
    def _abi_get_caret_position(*a);    Abi.call_arg_map! a; Abi.ABI_TextArea_getCaretPosition(@pointer, *a); end
    def _abi_get_caret_line(*a);    Abi.call_arg_map! a; Abi.ABI_TextArea_getCaretLine(@pointer, *a); end
    def _abi_get_caret_column(*a);    Abi.call_arg_map! a; Abi.ABI_TextArea_getCaretColumn(@pointer, *a); end
    def _abi_set_read_only(*a);    Abi.call_arg_map! a; Abi.ABI_TextArea_setReadOnly(@pointer, *a); end
    def _abi_is_read_only(*a);    Abi.call_arg_map! a; Abi.ABI_TextArea_isReadOnly(@pointer, *a); end
    def _abi_get_lines_count(*a);    Abi.call_arg_map! a; Abi.ABI_TextArea_getLinesCount(@pointer, *a); end
    def _abi_enable_monospaced_font_optimization(*a);    Abi.call_arg_map! a; Abi.ABI_TextArea_enableMonospacedFontOptimization(@pointer, *a); end
    def _abi_set_vertical_scrollbar_policy(*a);    Abi.call_arg_map! a; Abi.ABI_TextArea_setVerticalScrollbarPolicy(@pointer, *a); end
    def _abi_get_vertical_scrollbar_policy(*a);    Abi.call_arg_map! a; Abi.ABI_TextArea_getVerticalScrollbarPolicy(@pointer, *a); end
    def _abi_set_horizontal_scrollbar_policy(*a);    Abi.call_arg_map! a; Abi.ABI_TextArea_setHorizontalScrollbarPolicy(@pointer, *a); end
    def _abi_get_horizontal_scrollbar_policy(*a);    Abi.call_arg_map! a; Abi.ABI_TextArea_getHorizontalScrollbarPolicy(@pointer, *a); end
    def _abi_set_vertical_scrollbar_value(*a);    Abi.call_arg_map! a; Abi.ABI_TextArea_setVerticalScrollbarValue(@pointer, *a); end
    def _abi_get_vertical_scrollbar_value(*a);    Abi.call_arg_map! a; Abi.ABI_TextArea_getVerticalScrollbarValue(@pointer, *a); end
    def _abi_set_horizontal_scrollbar_value(*a);    Abi.call_arg_map! a; Abi.ABI_TextArea_setHorizontalScrollbarValue(@pointer, *a); end
    def _abi_get_horizontal_scrollbar_value(*a);    Abi.call_arg_map! a; Abi.ABI_TextArea_getHorizontalScrollbarValue(@pointer, *a); end
    def _abi_on_text_change(*a);    Abi.call_arg_map! a; Abi.ABI_TextArea_onTextChange(@pointer, *a); end
    def _abi_on_selection_change(*a);    Abi.call_arg_map! a; Abi.ABI_TextArea_onSelectionChange(@pointer, *a); end
    def _abi_on_caret_position_change(*a);    Abi.call_arg_map! a; Abi.ABI_TextArea_onCaretPositionChange(@pointer, *a); end
  end

  class ToggleButton
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_ToggleButton_new(*a)); initialized(); end
    def _abi_set_down(*a);    Abi.call_arg_map! a; Abi.ABI_ToggleButton_setDown(@pointer, *a); end
    def _abi_is_down(*a);    Abi.call_arg_map! a; Abi.ABI_ToggleButton_isDown(@pointer, *a); end
    def _abi_on_toggle(*a);    Abi.call_arg_map! a; Abi.ABI_ToggleButton_onToggle(@pointer, *a); end
  end

  class ToolTip
    def self._abi_set_initial_delay(*a);    Abi.call_arg_map! a; Abi.ABI_STATIC_ToolTip_setInitialDelay(*a); end
    def self._abi_get_initial_delay(*a);    Abi.call_arg_map! a; Abi.ABI_STATIC_ToolTip_getInitialDelay(*a); end
    def self._abi_set_distance_to_mouse(*a);    Abi.call_arg_map! a; Abi.ABI_STATIC_ToolTip_setDistanceToMouse(*a); end
    def self._abi_get_distance_to_mouse(*a);    Abi.call_arg_map! a; Abi.ABI_STATIC_ToolTip_getDistanceToMouse(*a); end
    def self._abi_set_show_on_disabled_widget(*a);    Abi.call_arg_map! a; Abi.ABI_STATIC_ToolTip_setShowOnDisabledWidget(*a); end
    def self._abi_get_show_on_disabled_widget(*a);    Abi.call_arg_map! a; Abi.ABI_STATIC_ToolTip_getShowOnDisabledWidget(*a); end
  end

  class TreeView
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_TreeView_new(*a)); initialized(); end
    def _abi_add_item(*a);    Abi.call_arg_map! a; Abi.ABI_TreeView_addItem(@pointer, *a); end
    def _abi_expand(*a);    Abi.call_arg_map! a; Abi.ABI_TreeView_expand(@pointer, *a); end
    def _abi_expand_all(*a);    Abi.call_arg_map! a; Abi.ABI_TreeView_expandAll(@pointer, *a); end
    def _abi_collapse(*a);    Abi.call_arg_map! a; Abi.ABI_TreeView_collapse(@pointer, *a); end
    def _abi_collapse_all(*a);    Abi.call_arg_map! a; Abi.ABI_TreeView_collapseAll(@pointer, *a); end
    def _abi_select_item(*a);    Abi.call_arg_map! a; Abi.ABI_TreeView_selectItem(@pointer, *a); end
    def _abi_deselect_item(*a);    Abi.call_arg_map! a; Abi.ABI_TreeView_deselectItem(@pointer, *a); end
    def _abi_remove_item(*a);    Abi.call_arg_map! a; Abi.ABI_TreeView_removeItem(@pointer, *a); end
    def _abi_remove_all_items(*a);    Abi.call_arg_map! a; Abi.ABI_TreeView_removeAllItems(@pointer, *a); end
    def _abi_get_selected_item(*a);    Abi.call_arg_map! a; Abi.ABI_TreeView_getSelectedItem(@pointer, *a); end
    def _abi_get_nodes(*a);    Abi.call_arg_map! a; Abi.ABI_TreeView_getNodes(@pointer, *a); end
    def _abi_set_item_height(*a);    Abi.call_arg_map! a; Abi.ABI_TreeView_setItemHeight(@pointer, *a); end
    def _abi_get_item_height(*a);    Abi.call_arg_map! a; Abi.ABI_TreeView_getItemHeight(@pointer, *a); end
    def _abi_set_vertical_scrollbar_value(*a);    Abi.call_arg_map! a; Abi.ABI_TreeView_setVerticalScrollbarValue(@pointer, *a); end
    def _abi_get_vertical_scrollbar_value(*a);    Abi.call_arg_map! a; Abi.ABI_TreeView_getVerticalScrollbarValue(@pointer, *a); end
    def _abi_set_horizontal_scrollbar_value(*a);    Abi.call_arg_map! a; Abi.ABI_TreeView_setHorizontalScrollbarValue(@pointer, *a); end
    def _abi_get_horizontal_scrollbar_value(*a);    Abi.call_arg_map! a; Abi.ABI_TreeView_getHorizontalScrollbarValue(@pointer, *a); end
    def _abi_on_item_select(*a);    Abi.call_arg_map! a; Abi.ABI_TreeView_onItemSelect(@pointer, *a); end
    def _abi_on_double_click(*a);    Abi.call_arg_map! a; Abi.ABI_TreeView_onDoubleClick(@pointer, *a); end
    def _abi_on_expand(*a);    Abi.call_arg_map! a; Abi.ABI_TreeView_onExpand(@pointer, *a); end
    def _abi_on_collapse(*a);    Abi.call_arg_map! a; Abi.ABI_TreeView_onCollapse(@pointer, *a); end
    def _abi_on_right_click(*a);    Abi.call_arg_map! a; Abi.ABI_TreeView_onRightClick(@pointer, *a); end
  end

  class Scrollbar
    def initialize(*a, pointer: nil);    Abi.call_arg_map! a; super(pointer: pointer || Abi.ABI_Scrollbar_new(*a)); initialized(); end
    def _abi_set_maximum(*a);    Abi.call_arg_map! a; Abi.ABI_Scrollbar_setMaximum(@pointer, *a); end
    def _abi_get_maximum(*a);    Abi.call_arg_map! a; Abi.ABI_Scrollbar_getMaximum(@pointer, *a); end
    def _abi_set_value(*a);    Abi.call_arg_map! a; Abi.ABI_Scrollbar_setValue(@pointer, *a); end
    def _abi_get_value(*a);    Abi.call_arg_map! a; Abi.ABI_Scrollbar_getValue(@pointer, *a); end
    def _abi_set_viewport_size(*a);    Abi.call_arg_map! a; Abi.ABI_Scrollbar_setViewportSize(@pointer, *a); end
    def _abi_get_viewport_size(*a);    Abi.call_arg_map! a; Abi.ABI_Scrollbar_getViewportSize(@pointer, *a); end
    def _abi_set_scroll_amount(*a);    Abi.call_arg_map! a; Abi.ABI_Scrollbar_setScrollAmount(@pointer, *a); end
    def _abi_get_scroll_amount(*a);    Abi.call_arg_map! a; Abi.ABI_Scrollbar_getScrollAmount(@pointer, *a); end
    def _abi_set_auto_hide(*a);    Abi.call_arg_map! a; Abi.ABI_Scrollbar_setAutoHide(@pointer, *a); end
    def _abi_get_auto_hide(*a);    Abi.call_arg_map! a; Abi.ABI_Scrollbar_getAutoHide(@pointer, *a); end
    def _abi_set_vertical_scroll(*a);    Abi.call_arg_map! a; Abi.ABI_Scrollbar_setVerticalScroll(@pointer, *a); end
    def _abi_get_vertical_scroll(*a);    Abi.call_arg_map! a; Abi.ABI_Scrollbar_getVerticalScroll(@pointer, *a); end
    def _abi_get_default_width(*a);    Abi.call_arg_map! a; Abi.ABI_Scrollbar_getDefaultWidth(@pointer, *a); end
    def _abi_on_value_change(*a);    Abi.call_arg_map! a; Abi.ABI_Scrollbar_onValueChange(@pointer, *a); end
  end
end
